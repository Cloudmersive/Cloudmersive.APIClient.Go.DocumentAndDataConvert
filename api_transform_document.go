/*
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package GoCloudmersiveDocumentConvertApiClient

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"os"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type TransformDocumentApiService service

/* 
TransformDocumentApiService Replace string in Word DOCX document
Replace all instances of a string in an Office Word Document (docx)
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param matchString String to search for and match against, to be replaced
 * @param replaceString String to replace the matched values with
 * @param optional nil or *TransformDocumentDocxReplaceOpts - Optional Parameters:
     * @param "InputFile" (optional.Interface of *os.File) -  Optional: Input file to perform the operation on.
     * @param "InputFileUrl" (optional.String) -  Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
     * @param "MatchCase" (optional.Bool) -  Optional: True if the case should be matched, false for case insensitive match. Default is false.

@return string
*/

type TransformDocumentDocxReplaceOpts struct { 
	InputFile optional.Interface
	InputFileUrl optional.String
	MatchCase optional.Bool
}

func (a *TransformDocumentApiService) TransformDocumentDocxReplace(ctx context.Context, matchString string, replaceString string, localVarOptionals *TransformDocumentDocxReplaceOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/transform/docx/replace-all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.InputFileUrl.IsSet() {
		localVarHeaderParams["inputFileUrl"] = parameterToString(localVarOptionals.InputFileUrl.Value(), "")
	}
	localVarHeaderParams["matchString"] = parameterToString(matchString, "")
	localVarHeaderParams["replaceString"] = parameterToString(replaceString, "")
	if localVarOptionals != nil && localVarOptionals.MatchCase.IsSet() {
		localVarHeaderParams["matchCase"] = parameterToString(localVarOptionals.MatchCase.Value(), "")
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
TransformDocumentApiService Replace string in PowerPoint PPTX presentation
Replace all instances of a string in an Office PowerPoint Document (pptx)
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param matchString String to search for and match against, to be replaced
 * @param replaceString String to replace the matched values with
 * @param optional nil or *TransformDocumentPptxReplaceOpts - Optional Parameters:
     * @param "InputFile" (optional.Interface of *os.File) -  Optional: Input file to perform the operation on.
     * @param "InputFileUrl" (optional.String) -  Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
     * @param "MatchCase" (optional.Bool) -  Optional: True if the case should be matched, false for case insensitive match. Default is false.

@return string
*/

type TransformDocumentPptxReplaceOpts struct { 
	InputFile optional.Interface
	InputFileUrl optional.String
	MatchCase optional.Bool
}

func (a *TransformDocumentApiService) TransformDocumentPptxReplace(ctx context.Context, matchString string, replaceString string, localVarOptionals *TransformDocumentPptxReplaceOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/transform/pptx/replace-all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.InputFileUrl.IsSet() {
		localVarHeaderParams["inputFileUrl"] = parameterToString(localVarOptionals.InputFileUrl.Value(), "")
	}
	localVarHeaderParams["matchString"] = parameterToString(matchString, "")
	localVarHeaderParams["replaceString"] = parameterToString(replaceString, "")
	if localVarOptionals != nil && localVarOptionals.MatchCase.IsSet() {
		localVarHeaderParams["matchCase"] = parameterToString(localVarOptionals.MatchCase.Value(), "")
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
