---
swagger: "2.0"
info:
  description: "Convert API lets you effortlessly convert file formats and types."
  version: "v1"
  title: "convertapi"
host: "api.cloudmersive.com"
schemes:
- "https"
paths:
  /convert/compare/docx:
    post:
      tags:
      - "CompareDocument"
      summary: "Compare Two Word DOCX"
      description: "Compare two Office Word Documents (docx) files and highlight the\
        \ differences"
      operationId: "CompareDocument_Docx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on (more than 2 can\
          \ be supplied)."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/csv/to/json:
    post:
      tags:
      - "ConvertData"
      summary: "Convert CSV to JSON conversion"
      description: "Convert a CSV file to a JSON object array"
      operationId: "ConvertData_CsvToJson"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "columnNamesFromFirstRow"
        in: "header"
        description: "Optional; If true, the first row will be used as the labels\
          \ for the columns; if false, columns will be named Column0, Column1, etc.\
          \  Default is true.  Set to false if you are not using column headings,\
          \ or have an irregular column structure."
        required: false
        type: "boolean"
        x-exportParamName: "ColumnNamesFromFirstRow"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
      security:
      - Apikey: []
  /convert/csv/to/xml:
    post:
      tags:
      - "ConvertData"
      summary: "Convert CSV to XML conversion"
      description: "Convert a CSV file to a XML file"
      operationId: "ConvertData_CsvToXml"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "columnNamesFromFirstRow"
        in: "header"
        description: "Optional; If true, the first row will be used as the labels\
          \ for the columns; if false, columns will be named Column0, Column1, etc.\
          \  Default is true.  Set to false if you are not using column headings,\
          \ or have an irregular column structure."
        required: false
        type: "boolean"
        x-exportParamName: "ColumnNamesFromFirstRow"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xlsx/to/json:
    post:
      tags:
      - "ConvertData"
      summary: "Convert Excel XLSX to JSON conversion"
      description: "Convert an Excel XLSX file to a JSON object array"
      operationId: "ConvertData_XlsxToJson"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xlsx/to/xml:
    post:
      tags:
      - "ConvertData"
      summary: "Convert Excel XLSX to XML conversion"
      description: "Convert an Excel XLSX file to a XML file"
      operationId: "ConvertData_XlsxToXml"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xls/to/json:
    post:
      tags:
      - "ConvertData"
      summary: "Convert Excel (97-2003) XLS to JSON conversion"
      description: "Convert an Excel (97-2003) XLS file to a JSON object array"
      operationId: "ConvertData_XlsToJson"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
      security:
      - Apikey: []
  /convert/xml/to/json:
    post:
      tags:
      - "ConvertData"
      summary: "Convert XML to JSON conversion"
      description: "Convert an XML string or file into JSON"
      operationId: "ConvertData_XmlToJson"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
      security:
      - Apikey: []
  /convert/xml/select/xpath:
    post:
      tags:
      - "ConvertData"
      summary: "Filter, select XML nodes using XPath expression, get results"
      description: "Return the reuslts of filtering, selecting an XML document with\
        \ an XPath expression"
      operationId: "ConvertData_XmlFilterWithXPath"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "XPathExpression"
        in: "header"
        description: "Valid XML XPath query expression"
        required: true
        type: "string"
        x-exportParamName: "XPathExpression"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XmlFilterWithXPathResult"
      security:
      - Apikey: []
  /convert/xml/query/xquery:
    post:
      tags:
      - "ConvertData"
      summary: "Query an XML file using XQuery query, get results"
      description: "Return the reuslts of querying a single XML document with an XQuery\
        \ expression.  Supports XQuery 3.1 and earlier.  This API is optimized for\
        \ a single XML document as input.  Provided XML document is automatically\
        \ loaded as the default context; to access elements in the document, simply\
        \ refer to them without a document reference, such as bookstore/book"
      operationId: "ConvertData_XmlQueryWithXQuery"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input XML file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "XQuery"
        in: "header"
        description: "Valid XML XQuery 3.1 or earlier query expression; multi-line\
          \ expressions are supported"
        required: true
        type: "string"
        x-exportParamName: "XQuery"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XmlQueryWithXQueryResult"
      security:
      - Apikey: []
  /convert/xml/query/xquery/multi:
    post:
      tags:
      - "ConvertData"
      summary: "Query multiple XML files using XQuery query, get results"
      description: "Return the reuslts of querying an XML document with an XQuery\
        \ expression.  Supports XQuery 3.1 and earlier.  This API is optimized for\
        \ multiple XML documents as input.  You can refer to the contents of a given\
        \ document by name, for example doc(\"books.xml\") or doc(\"restaurants.xml\"\
        ) if you included two input files named books.xml and restaurants.xml.  If\
        \ input files contain no file name, they will default to file names input1.xml,\
        \ input2.xml and so on."
      operationId: "ConvertData_XmlQueryWithXQueryMulti"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input XML file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input XML file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input XML file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input XML file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input XML file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input XML file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input XML file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input XML file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input XML file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input XML file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      - name: "XQuery"
        in: "header"
        description: "Valid XML XQuery 3.1 or earlier query expression; multi-line\
          \ expressions are supported"
        required: true
        type: "string"
        x-exportParamName: "XQuery"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XmlQueryWithXQueryMultiResult"
      security:
      - Apikey: []
  /convert/xml/edit/xpath/set-value:
    post:
      tags:
      - "ConvertData"
      summary: "Sets the value contents of XML nodes matching XPath expression"
      description: "Return the reuslts of editing an XML document by setting the contents\
        \ of all of the nodes that match an input XPath expression.  Supports elements\
        \ and attributes."
      operationId: "ConvertData_XmlEditSetValueWithXPath"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input XML file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "XPathExpression"
        in: "header"
        description: "Valid XML XPath query expression"
        required: true
        type: "string"
        x-exportParamName: "XPathExpression"
      - name: "XmlValue"
        in: "header"
        description: "XML Value to set into the matching XML nodes"
        required: true
        type: "string"
        x-exportParamName: "XmlValue"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XmlSetValueWithXPathResult"
      security:
      - Apikey: []
  /convert/xml/edit/xpath/replace:
    post:
      tags:
      - "ConvertData"
      summary: "Replaces XML nodes matching XPath expression with new node"
      description: "Return the reuslts of editing an XML document by replacing all\
        \ of the nodes that match an input XPath expression with a new XML node expression."
      operationId: "ConvertData_XmlEditReplaceWithXPath"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input XML file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "XPathExpression"
        in: "header"
        description: "Valid XML XPath query expression"
        required: true
        type: "string"
        x-exportParamName: "XPathExpression"
      - name: "XmlNodeReplacement"
        in: "header"
        description: "XML Node replacement content"
        required: true
        type: "string"
        x-exportParamName: "XmlNodeReplacement"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XmlReplaceWithXPathResult"
      security:
      - Apikey: []
  /convert/xml/edit/xpath/add-child:
    post:
      tags:
      - "ConvertData"
      summary: "Adds an XML node as a child to XML nodes matching XPath expression"
      description: "Return the reuslts of editing an XML document by adding an XML\
        \ node as a child to all of the nodes that match an input XPath expression."
      operationId: "ConvertData_XmlEditAddChildWithXPath"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input XML file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "XPathExpression"
        in: "header"
        description: "Valid XML XPath query expression"
        required: true
        type: "string"
        x-exportParamName: "XPathExpression"
      - name: "XmlNodeToAdd"
        in: "header"
        description: "XML Node to add as a child"
        required: true
        type: "string"
        x-exportParamName: "XmlNodeToAdd"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XmlAddChildWithXPathResult"
      security:
      - Apikey: []
  /convert/xml/edit/xpath/add-attribute:
    post:
      tags:
      - "ConvertData"
      summary: "Adds an attribute to all XML nodes matching XPath expression"
      description: "Return the reuslts of editing an XML document by adding an attribute\
        \ to all of the nodes that match an input XPath expression."
      operationId: "ConvertData_XmlEditAddAttributeWithXPath"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input XML file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "XPathExpression"
        in: "header"
        description: "Valid XML XPath query expression"
        required: true
        type: "string"
        x-exportParamName: "XPathExpression"
      - name: "XmlAttributeName"
        in: "header"
        description: "Name of the XML attribute to add"
        required: true
        type: "string"
        x-exportParamName: "XmlAttributeName"
      - name: "XmlAttributeValue"
        in: "header"
        description: "Value of the XML attribute to add"
        required: true
        type: "string"
        x-exportParamName: "XmlAttributeValue"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XmlAddAttributeWithXPathResult"
      security:
      - Apikey: []
  /convert/xml/edit/xpath/remove:
    post:
      tags:
      - "ConvertData"
      summary: "Remove, delete XML nodes and items matching XPath expression"
      description: "Return the reuslts of editing an XML document by removing all\
        \ of the nodes that match an input XPath expression"
      operationId: "ConvertData_XmlRemoveWithXPath"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "XPathExpression"
        in: "header"
        description: "Valid XML XPath query expression"
        required: true
        type: "string"
        x-exportParamName: "XPathExpression"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XmlRemoveWithXPathResult"
      security:
      - Apikey: []
  /convert/xml/edit/xpath/remove-all-children:
    post:
      tags:
      - "ConvertData"
      summary: "Removes, deletes all children of nodes matching XPath expression,\
        \ but does not remove the nodes"
      description: "Return the reuslts of editing an XML document by removing all\
        \ child nodes of the nodes that match an input XPath expression."
      operationId: "ConvertData_XmlEditRemoveAllChildNodesWithXPath"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input XML file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "XPathExpression"
        in: "header"
        description: "Valid XML XPath query expression"
        required: true
        type: "string"
        x-exportParamName: "XPathExpression"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XmlRemoveAllChildrenWithXPathResult"
      security:
      - Apikey: []
  /convert/xml/transform/xslt/to/xml:
    post:
      tags:
      - "ConvertData"
      summary: "Transform XML document file with XSLT into a new XML document"
      description: "Convert an XML string or file into JSON"
      operationId: "ConvertData_XmlTransformWithXsltToXml"
      consumes: []
      produces:
      - "application/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input XML file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "transformFile"
        in: "formData"
        description: "Input XSLT file to use to transform the input XML file."
        required: true
        type: "file"
        x-exportParamName: "TransformFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/json/to/xml:
    post:
      tags:
      - "ConvertData"
      summary: "Convert JSON to XML conversion"
      description: "Convert a JSON object into XML"
      operationId: "ConvertData_JsonToXml"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      parameters:
      - in: "body"
        name: "JsonObject"
        description: "Input JSON to convert to XML"
        required: true
        schema:
          type: "object"
        x-exportParamName: "JsonObject"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/docx/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOCX Document to PDF"
      description: "Convert Office Word Documents (docx) to standard PDF"
      operationId: "ConvertDocument_DocxToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/docx/to/txt:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOCX Document to Text (txt)"
      description: "Convert Office Word Documents (docx) to text"
      operationId: "ConvertDocument_DocxToTxt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "textFormattingMode"
        in: "header"
        description: "Optional; specify how whitespace should be handled when converting\
          \ the document to text.  Possible values are 'preserveWhitespace' which\
          \ will attempt to preserve whitespace in the document and relative positioning\
          \ of text within the document, and 'minimizeWhitespace' which will not insert\
          \ additional spaces into the document in most cases.  Default is 'minimizeWhitespace'."
        required: false
        type: "string"
        x-exportParamName: "TextFormattingMode"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TextConversionResult"
      security:
      - Apikey: []
  /convert/docx/to/rtf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOCX Document to RTF"
      description: "Convert an Office Word Document (DOCX) to Rich Text Format Document\
        \ (RTF)"
      operationId: "ConvertDocument_DocxToRtf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/docx/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOCX Document to PNG image array"
      description: "Converts an Office Word Document (DOCX) file to an array of PNG\
        \ images, one for each page."
      operationId: "ConvertDocument_DocxToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocxToPngResult"
      security:
      - Apikey: []
  /convert/docx/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOCX Document to JPG/JPEG image array"
      description: "Converts an Office Word Document (DOCX) to an array of JPG/JPEG\
        \ images, one for each page. Customize image quality using quality header."
      operationId: "ConvertDocument_DocxToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocxToJpgResult"
      security:
      - Apikey: []
  /convert/docx/to/html:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOCX Document to HTML Document"
      description: "Convert Office Word Document (DOCX) to HTML Document"
      operationId: "ConvertDocument_DocxToHtml"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/doc/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOC (97-03) Document to PDF"
      description: "Convert Office Word (97-2003 Format) Documents (doc) to standard\
        \ PDF"
      operationId: "ConvertDocument_DocToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/doc/to/docx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOC (97-03) Document to DOCX"
      description: "Convert/upgrade Office Word (97-2003 Format) Documents (doc) to\
        \ the modern DOCX format"
      operationId: "ConvertDocument_DocToDocx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/docx/to/doc:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOCX Document to Legacy Word DOC (97-03)"
      description: "Convert/downgrade modern Office Word DOCX Documents (DOCX) to\
        \ the legacy Word DOC (97-2003 Format) format"
      operationId: "ConvertDocument_DocxToDoc"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xlsx/to/xls:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLSX Spreadsheet to Legacy Excel XLS (97-03)"
      description: "Convert/downgrade modern Office Excel XLSX Spreadsheet to the\
        \ legacy Excel XLS (97-2003 Format) format"
      operationId: "ConvertDocument_XlsxToXls"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/pptx/to/ppt:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PowerPoint PPTX presentation to Legacy PowerPoint PPT (97-03)"
      description: "Convert/downgrade modern Office PowerPoint PPTX Presentation to\
        \ the legacy PowerPoint PPT (97-2003 Format) format"
      operationId: "ConvertDocument_PptxToPpt"
      consumes: []
      produces:
      - "application/octet-stream"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
      security:
      - Apikey: []
  /convert/doc/to/txt:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Word DOC (97-03) Document to Text (txt)"
      description: "Convert Office Word DOC (97-03) Document (doc) to text"
      operationId: "ConvertDocument_DocToTxt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TextConversionResult"
      security:
      - Apikey: []
  /convert/pptx/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PowerPoint PPTX Presentation to PDF"
      description: "Convert Office PowerPoint Documents (pptx) to standard PDF"
      operationId: "ConvertDocument_PptxToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/pptx/to/txt:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PowerPoint PPTX Presentation to Text (txt)"
      description: "Convert Office PowerPoint Documents (pptx) to standard Text"
      operationId: "ConvertDocument_PptxToTxt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TextConversionResult"
      security:
      - Apikey: []
  /convert/pptx/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PowerPoint PPTX to PNG image array"
      description: "Converts a PowerPoint Presentation (PPTX) file to an array of\
        \ PNG images, one for each page."
      operationId: "ConvertDocument_PptxToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/PptxToPngResult"
      security:
      - Apikey: []
  /convert/ppt/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PowerPoint PPT (97-03) Presentation to PDF"
      description: "Convert Office PowerPoint (97-2003) Documents (ppt) to standard\
        \ PDF"
      operationId: "ConvertDocument_PptToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/ppt/to/pptx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PowerPoint PPT (97-03) Presentation to PPTX"
      description: "Convert/upgrade Office PowerPoint (97-2003) Documents (ppt) to\
        \ modern PPTX"
      operationId: "ConvertDocument_PptToPptx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xlsx/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLSX Spreadsheet to PDF"
      description: "Convert Office Excel Workbooks (XLSX) to standard PDF.  Converts\
        \ all worksheets in the workbook to PDF.  Supports both XLSX and XLSB Excel\
        \ file formats."
      operationId: "ConvertDocument_XlsxToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xlsx/to/txt:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLSX Spreadsheet to Text (txt)"
      description: "Convert Office Excel Workbooks (XLSX) to standard Text.  Converts\
        \ all worksheets in the workbook to Text.  Supports both XLSX and XLSB file\
        \ formats.  When a spreadsheet contains multiple worksheets, will export all\
        \ of the text from all of the worksheets.  If you wish to export the text\
        \ from only one worksheet, try using the Split XLSX API to split the spreadsheet\
        \ into multiple worksheet files, and then run XLSX to Text on the individual\
        \ worksheet file that you need to extract the text from."
      operationId: "ConvertDocument_XlsxToTxt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TextConversionResult"
      security:
      - Apikey: []
  /convert/xlsx/to/html:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLSX Spreadsheet to HTML Document"
      description: "Convert Office Excel Spreadsheet (XLSX) to HTML Document.  Converts\
        \ all worksheets to HTML.  Supports both XLSX and XLSB Excel file formats."
      operationId: "ConvertDocument_XlsxToHtml"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xls/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLS (97-03) Spreadsheet to PDF"
      description: "Convert Office Excel (97-2003) Workbooks (xls) to standard PDF.\
        \  Converts all worksheets in the workbook to PDF."
      operationId: "ConvertDocument_XlsToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xls/to/xlsx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLS (97-03) Spreadsheet to XLSX"
      description: "Convert/upgrade Office Excel (97-2003) Workbooks (xls) to modern\
        \ XLSX format."
      operationId: "ConvertDocument_XlsToXlsx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xls/to/csv:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLS (97-03) Spreadsheet to CSV"
      description: "Convert/upgrade Office Excel (97-2003) Workbooks (xls) to standard\
        \ CSV format."
      operationId: "ConvertDocument_XlsToCsv"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/csv/to/xlsx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert CSV to Excel XLSX Spreadsheet"
      description: "Convert CSV file to Office Excel XLSX Workbooks file format."
      operationId: "ConvertDocument_CsvToXlsx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/csv/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert CSV to PDF document"
      description: "Convert Comma-Separated Values (CSV) file to PDF document."
      operationId: "ConvertDocument_CsvToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/csv/to/html:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert CSV to HTML document"
      description: "Convert Comma-Separated Values (CSV) file to HTML document."
      operationId: "ConvertDocument_CsvToHtml"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/csv/multi/to/xlsx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Multiple CSV Files into a Single XLSX Spreadsheet"
      description: "Convert multiple Comma-Separated Values (CSV) files into a single\
        \ Excel XLSX Spreadsheet, with one worksheet corresponding to each CSV file."
      operationId: "ConvertDocument_CsvMultiToXlsx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      - name: "worksheetNames"
        in: "header"
        description: "Optional; Specify the name of each CSV's worksheet in order,\
          \ separated with commas (e.g. \"worksheet1,worksheet2,worksheet3\"). Defaults\
          \ to the names of the input CSV files. Recommended when inputting the files\
          \ directly, without file names."
        required: false
        type: "string"
        x-exportParamName: "WorksheetNames"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xlsx/to/csv:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLSX Spreadsheet to CSV, Single Worksheet"
      description: "Convert Office Excel Workbooks (XLSX) to standard Comma-Separated\
        \ Values (CSV) format.  Supports both XLSX and XLSB file Excel formats.  If\
        \ the input file contains multiple worksheets, the first one is used.  If\
        \ you wish to convert all of the worksheets (not just the first one), be sure\
        \ to use the xlsx/to/csv/multi API."
      operationId: "ConvertDocument_XlsxToCsv"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "outputEncoding"
        in: "header"
        description: "Optional, set the output text encoding for the result; possible\
          \ values are UTF-8, ASCII and UTF-32.  Default is UTF-8."
        required: false
        type: "string"
        x-exportParamName: "OutputEncoding"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/xlsx/to/csv/multi:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLSX Spreadsheet to CSV, Multiple Worksheets"
      description: "Convert Office Excel Workbooks (XLSX) to standard Comma-Separated\
        \ Values (CSV) format, with support for multiple worksheets.  Supports both\
        \ XLSX and XLSB file Excel formats.  Returns multiple CSV files, one for each\
        \ worksheet (tab) in the spreadsheet."
      operationId: "ConvertDocument_XlsxToCsvMulti"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "outputEncoding"
        in: "header"
        description: "Optional, set the output text encoding for the result; possible\
          \ values are UTF-8, ASCII and UTF-32.  Default is UTF-8."
        required: false
        type: "string"
        x-exportParamName: "OutputEncoding"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/CsvCollection"
      security:
      - Apikey: []
  /convert/xlsx/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Excel XLSX spreadsheet to PNG image array"
      description: "Converts an Excel Spreadsheet (XLSX) file to an array of PNG images,\
        \ one for each page."
      operationId: "ConvertDocument_XlsxToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XlsxToPngResult"
      security:
      - Apikey: []
  /convert/html/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert HTML document file to PDF Document"
      description: "Convert standard HTML, with full support for CSS, JavaScript,\
        \ Images, and other complex behavior to PDF.  To use external files such as\
        \ images, use an absolute URL to the file."
      operationId: "ConvertDocument_HtmlToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "includeBackgroundGraphics"
        in: "header"
        description: "Optional: Set to true to include background graphics in the\
          \ PDF, or false to not include.  Default is true."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeBackgroundGraphics"
        x-optionalDataType: "Bool"
      - name: "scaleFactor"
        in: "header"
        description: "Optional: Set to 100 to scale at 100%, set to 50% to scale down\
          \ to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is\
          \ 100%. Maximum is 1000%."
        required: false
        type: "integer"
        x-exportParamName: "ScaleFactor"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/html/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert HTML document file to PNG image array"
      description: "Convert standard HTML, with full support for CSS, JavaScript,\
        \ Images, and other complex behavior to an array of PNG images, one for each\
        \ page.  To use external files in your HTML such as images, use an absolute\
        \ URL to the file."
      operationId: "ConvertDocument_HtmlToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/PdfToPngResult"
      security:
      - Apikey: []
  /convert/html/to/txt:
    post:
      tags:
      - "ConvertDocument"
      summary: "HTML Document file to Text (txt)"
      description: "HTML document to text"
      operationId: "ConvertDocument_HtmlToTxt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TextConversionResult"
      security:
      - Apikey: []
  /convert/autodetect/get-info:
    post:
      tags:
      - "ConvertDocument"
      summary: "Get document type information"
      description: "Auto-detects a document's type information; does not require file\
        \ extension.  Analyzes file contents to confirm file type.  Even if no file\
        \ extension is present, the auto-detect system will reliably analyze the contents\
        \ of the file and identify its file type.  Supports over 100 image file formats,\
        \ Office document file formats, PDF, and more."
      operationId: "ConvertDocument_AutodetectGetInfo"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AutodetectGetInfoResult"
      security:
      - Apikey: []
  /convert/autodetect/get-icon/advanced:
    post:
      tags:
      - "ConvertDocument"
      summary: "Get PNG icon byte array for the file extension"
      description: "Returns a PNG icon for the given file format extension directly\
        \ as a byte array. User may specify the icon size. Supports over 100 file\
        \ formats, with a generic icon for unsupported formats."
      operationId: "ConvertDocument_GetFileTypeIconAdvanced"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "fileExtension"
        in: "header"
        description: "Required; The file extension to be used for the icon. Limited\
          \ to 4 AlphaNumeric characters."
        required: true
        type: "string"
        x-exportParamName: "FileExtension"
      - name: "iconSize"
        in: "header"
        description: "Optional; The desired width of the icon, preserving its aspect\
          \ ratio."
        required: false
        type: "integer"
        x-exportParamName: "IconSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetFileTypeIconResult"
      security:
      - Apikey: []
  /convert/autodetect/get-icon:
    post:
      tags:
      - "ConvertDocument"
      summary: "Get PNG icon file for the file extension"
      description: "Returns a PNG icon for the given file format extension as a file\
        \ for download. User may specify the icon size. Supports over 100 file formats,\
        \ with a generic icon for unsupported formats."
      operationId: "ConvertDocument_GetFileTypeIcon"
      consumes: []
      produces:
      - "application/octet-stream"
      parameters:
      - name: "fileExtension"
        in: "header"
        description: "Required; The file extension to be used for the icon. Limited\
          \ to 4 AlphaNumeric characters."
        required: true
        type: "string"
        x-exportParamName: "FileExtension"
      - name: "iconSize"
        in: "header"
        description: "Optional; The desired width of the icon, preserving its aspect\
          \ ratio."
        required: false
        type: "integer"
        x-exportParamName: "IconSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/autodetect/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Document to PDF"
      description: "Automatically detect file type and convert it to PDF.  Supports\
        \ all of the major Office document file formats including Word (DOCX, DOC),\
        \ Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML\
        \ files, and even multi-page TIFF files."
      operationId: "ConvertDocument_AutodetectToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/autodetect/to/txt:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Document to Text (txt)"
      description: "Automatically detect file type and convert it to Text.  Supports\
        \ all of the major Office document file formats including Word (DOCX, DOC),\
        \ Excel (XLSX, XLS), PowerPoint (PPTX, PPT) and PDF files.  For spreadsheets,\
        \ all worksheets will be included.  If you wish to exclude certain pages,\
        \ worksheets, slides, etc. use the Split document API first, or the delete\
        \ pages/slides/worksheet APIs first to adjust the document to the target state\
        \ prior to converting to text."
      operationId: "ConvertDocument_AutodetectToTxt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "textFormattingMode"
        in: "header"
        description: "Optional; specify how whitespace should be handled when converting\
          \ the document to text.  Possible values are 'preserveWhitespace' which\
          \ will attempt to preserve whitespace in the document and relative positioning\
          \ of text within the document, and 'minimizeWhitespace' which will not insert\
          \ additional spaces into the document in most cases.  Default is 'preserveWhitespace'."
        required: false
        type: "string"
        x-exportParamName: "TextFormattingMode"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TextConversionResult"
      security:
      - Apikey: []
  /convert/autodetect/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Document to PNG array"
      description: "Automatically detect file type and convert it to an array of PNG\
        \ images.  Supports all of the major Office document file formats, over 100\
        \ image formats, and even multi-page TIFF files."
      operationId: "ConvertDocument_AutodetectToPngArray"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AutodetectToPngResult"
      security:
      - Apikey: []
  /convert/autodetect/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Document to JPG/JPEG image array"
      description: "Automatically detect file type and convert it to an array of JPG/JPEG\
        \ Images.  Supports all of the major Office document file formats including\
        \ Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image\
        \ formats, HTML files, and even multi-page TIFF files. Customize image quality\
        \ using quality header."
      operationId: "ConvertDocument_AutodetectToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AutodetectToJpgResult"
      security:
      - Apikey: []
  /convert/autodetect/to/thumbnail/advanced:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert File to Thumbnail Image Object"
      description: "Automatically detect file type and convert it to an array of PNG\
        \ thumbnails, returned as an object. May specify the number of pages for multiple\
        \ thumbnails; default is one thumbnail. Supports all of the major Office document\
        \ file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX,\
        \ PPT), over 100 image formats, HTML files, and even multi-page TIFF files.\
        \ Returns a generic PNG thumbnail for unsupported formats. Maximum thumbnail\
        \ size is 2048x2048."
      operationId: "ConvertDocument_AutodetectToThumbnailsAdvanced"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "pages"
        in: "header"
        description: "Optional; Specify how many pages of the document will be converted\
          \ to thumbnails. Default is 1 page."
        required: false
        type: "integer"
        x-exportParamName: "Pages"
        x-optionalDataType: "Int32"
      - name: "maxWidth"
        in: "header"
        description: "Optional; Maximum width of the output thumbnail - final image\
          \ will be as large as possible while less than or equal to this width. Default\
          \ is 128."
        required: false
        type: "integer"
        x-exportParamName: "MaxWidth"
        x-optionalDataType: "Int32"
      - name: "maxHeight"
        in: "header"
        description: "Optional; Maximum height of the output thumbnail - final image\
          \ will be as large as possible while less than or equal to this width. Default\
          \ is 128."
        required: false
        type: "integer"
        x-exportParamName: "MaxHeight"
        x-optionalDataType: "Int32"
      - name: "extension"
        in: "header"
        description: "Optional; Specify the file extension of the inputFile. This\
          \ will improve the response time in most cases. Also allows unsupported\
          \ files without extensions to still return a corresponding generic icon."
        required: false
        type: "string"
        x-exportParamName: "Extension"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AutodetectToThumbnailsResult"
      security:
      - Apikey: []
  /convert/autodetect/to/thumbnail:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert File to Thumbnail Image"
      description: "Automatically detect file type and convert it to a PNG thumbnail.\
        \ Supports all of the major Office document file formats including Word (DOCX,\
        \ DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats,\
        \ HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail\
        \ for unsupported formats. Maximum thumbnail size is 2048x2048."
      operationId: "ConvertDocument_AutodetectToThumbnail"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "maxWidth"
        in: "header"
        description: "Optional; Maximum width of the output thumbnail - final image\
          \ will be as large as possible while less than or equal to this width. Default\
          \ is 128."
        required: false
        type: "integer"
        x-exportParamName: "MaxWidth"
        x-optionalDataType: "Int32"
      - name: "maxHeight"
        in: "header"
        description: "Optional; Maximum height of the output thumbnail - final image\
          \ will be as large as possible while less than or equal to this width. Default\
          \ is 128."
        required: false
        type: "integer"
        x-exportParamName: "MaxHeight"
        x-optionalDataType: "Int32"
      - name: "extension"
        in: "header"
        description: "Optional; Specify the file extension of the inputFile. This\
          \ will improve the response time in most cases. Also allows unsupported\
          \ files without extensions to still return a corresponding generic icon."
        required: false
        type: "string"
        x-exportParamName: "Extension"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/pdf/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PDF to PNG Image Array"
      description: "Convert PDF document to PNG array, one image per page."
      operationId: "ConvertDocument_PdfToPngArray"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/PdfToPngResult"
      security:
      - Apikey: []
  /convert/pdf/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PDF to JPG/JPEG image array"
      description: "Converts a PDF Document to an array of JPG/JPEG images, one for\
        \ each page. Customize image quality using quality header."
      operationId: "ConvertDocument_PdfToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/PdfToJpgResult"
      security:
      - Apikey: []
  /convert/png/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PNG Array to PDF"
      description: "Convert an array of PNG images, one image per page, into a newly-created\
        \ PDF.  Supports images of different sizes as input."
      operationId: "ConvertDocument_PngArrayToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/pdf/to/png/merge-single:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PDF to Single PNG image"
      description: "Convert PDF document to a single tall PNG image, by stacking/concatenating\
        \ the images vertically into a single \"tall\" image"
      operationId: "ConvertDocument_PdfToPngSingle"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/pdf/to/txt:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PDF Document to Text (txt)"
      description: "PDF document to text"
      operationId: "ConvertDocument_PdfToTxt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "textFormattingMode"
        in: "header"
        description: "Optional; specify how whitespace should be handled when converting\
          \ PDF to text.  Possible values are 'preserveWhitespace' which will attempt\
          \ to preserve whitespace in the document and relative positioning of text\
          \ within the document, and 'minimizeWhitespace' which will not insert additional\
          \ spaces into the document in most cases.  Default is 'preserveWhitespace'."
        required: false
        type: "string"
        x-exportParamName: "TextFormattingMode"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TextConversionResult"
      security:
      - Apikey: []
  /convert/pdf/to/docx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PDF to Word DOCX Document"
      description: "Convert standard PDF to Office Word Documents (docx).    Converts\
        \ a PDF at high fidelity into Word format, where it can be easily edited and\
        \ processed."
      operationId: "ConvertDocument_PdfToDocx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/pdf/to/docx/rasterize:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PDF to Word DOCX Document based on rasterized version of the\
        \ PDF"
      description: "Convert standard PDF to Office Word Documents (docx), but first\
        \ rasterize the PDF.    Converts a PDF at high fidelity into Word format."
      operationId: "ConvertDocument_PdfToDocxRasterize"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/pdf/to/pptx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert PDF to PowerPoint PPTX Presentation"
      description: "Convert standard PDF to Office PowerPoint Presentation (pptx).\
        \  Converts a PDF file at high fidelity into PowerPoint format, where it can\
        \ be easily edited and processed."
      operationId: "ConvertDocument_PdfToPptx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/eml/to/html:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Email EML file to HTML string"
      description: "Convert Outlook Email EML file to HTML string and attachments.\
        \ Supports images if they are base 64 inline."
      operationId: "ConvertDocument_EmlToHtml"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "bodyOnly"
        in: "header"
        description: "Optional; If true, the HTML string will only include the body\
          \ of the email. Other information such as subject will still be given as\
          \ properties in the response object. Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "BodyOnly"
        x-optionalDataType: "Bool"
      - name: "includeAttachments"
        in: "header"
        description: "Optional; If false, the response object will not include any\
          \ attachment files from the input file. Default is true."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeAttachments"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/EmlToHtmlResult"
      security:
      - Apikey: []
  /convert/eml/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Email EML file to PDF document"
      description: "Convert Outlook Email EML file to PDF document. Supports images\
        \ if they are base 64 inline."
      operationId: "ConvertDocument_EmlToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "bodyOnly"
        in: "header"
        description: "Optional; If true, the HTML string will only include the body\
          \ of the email. Other information such as subject will still be given as\
          \ properties in the response object. Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "BodyOnly"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/eml/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Email EML file to PNG image array"
      description: "Converts an Outlook Email File (EML) to an array of PNG images,\
        \ one for each page."
      operationId: "ConvertDocument_EmlToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/EmlToPngResult"
      security:
      - Apikey: []
  /convert/eml/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Email EML file to JPG/JPEG image array"
      description: "Converts an Outlook Email File (EML) to an array of JPG/JPEG images,\
        \ one for each page. Customize image quality using quality header."
      operationId: "ConvertDocument_EmlToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/EmlToJpgResult"
      security:
      - Apikey: []
  /convert/msg/to/html:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Email MSG file to HTML string"
      description: "Convert Outlook Email MSG file to HTML string and attachments.\
        \ Supports images if they are base 64 inline. Supports most, but not all,\
        \ RTF bodied MSG files."
      operationId: "ConvertDocument_MsgToHtml"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "bodyOnly"
        in: "header"
        description: "Optional; If true, the HTML string will only include the body\
          \ of the MSG. Other information such as subject will still be given as properties\
          \ in the response object. Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "BodyOnly"
        x-optionalDataType: "Bool"
      - name: "includeAttachments"
        in: "header"
        description: "Optional; If false, the response object will not include any\
          \ attachment files from the input file. Default is true."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeAttachments"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/MsgToHtmlResult"
      security:
      - Apikey: []
  /convert/msg/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Email MSG file to PDF document"
      description: "Convert Outlook Email MSG file to PDF document. Supports images\
        \ if they are base 64 inline. Supports most, but not all, RTF bodied MSG files."
      operationId: "ConvertDocument_MsgToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "bodyOnly"
        in: "header"
        description: "Optional; If true, the HTML string will only include the body\
          \ of the email. Other information such as subject will still be given as\
          \ properties in the response object. Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "BodyOnly"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/msg/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Email MSG file to PNG image array"
      description: "Converts an Outlook Email Message File (MSG) to an array of PNG\
        \ images, one for each page."
      operationId: "ConvertDocument_MsgToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/MsgToPngResult"
      security:
      - Apikey: []
  /convert/msg/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Email MSG file to JPG/JPEG image array"
      description: "Converts an Outlook Message File (MSG) to an array of JPG/JPEG\
        \ images, one for each page. Customize image quality using quality header."
      operationId: "ConvertDocument_MsgToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/MsgToJpgResult"
      security:
      - Apikey: []
  /convert/odt/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODT Text File to PDF"
      description: "Convert Office Open Document Text File (ODT) to standard PDF"
      operationId: "ConvertDocument_OdtToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/odt/to/docx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODT Text File to Word DOCX"
      description: "Convert Office Open Document Text File (ODT) to Word DOCX Document"
      operationId: "ConvertDocument_OdtToDocx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/odt/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODT Text File to PNG image array"
      description: "Converts an Office Open Document Text File (ODT) to an array of\
        \ PNG images, one for each page."
      operationId: "ConvertDocument_OdtToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OdtToPngResult"
      security:
      - Apikey: []
  /convert/odt/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODT Text File to JPG/JPEG image array"
      description: "Converts an Open Document Text File (ODT) to an array of JPG/JPEG\
        \ images, one for each page. Customize image quality using quality header."
      operationId: "ConvertDocument_OdtToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OdtToJpgResult"
      security:
      - Apikey: []
  /convert/ods/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODS Spreadsheet to PDF"
      description: "Convert Office Open Document Spreadsheet (ODS) to standard PDF"
      operationId: "ConvertDocument_OdsToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/ods/to/xlsx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODS Spreadsheet to XLSX"
      description: "Convert Office Open Document Spreadsheet (ODS) to Excel Spreadsheet\
        \ (XLSX)"
      operationId: "ConvertDocument_OdsToXlsx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/ods/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODS Spreadsheet to PNG image array"
      description: "Converts an Office Open Document Spreadsheet (ODS) to an array\
        \ of PNG images, one for each page."
      operationId: "ConvertDocument_OdsToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OdsToPngResult"
      security:
      - Apikey: []
  /convert/ods/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODS Spreadsheet to JPG/JPEG image array"
      description: "Converts an Open Document Spreadsheet (ODS) to an array of JPG/JPEG\
        \ images, one for each page. Customize image quality using quality header."
      operationId: "ConvertDocument_OdsToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OdsToJpgResult"
      security:
      - Apikey: []
  /convert/odp/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODP Presentation to PDF"
      description: "Convert Office Open Document Presentation (ODP) to standard PDF"
      operationId: "ConvertDocument_OdpToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/odp/to/pptx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODP Presentation to PPTX"
      description: "Convert Office Open Document Presentation (ODP) to PowerPoint\
        \ Presentation (PPTX)"
      operationId: "ConvertDocument_OdpToPptx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/odp/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODP Presentation to PNG image array"
      description: "Converts an Office Open Document Presentation (ODP) to an array\
        \ of PNG images, one for each page."
      operationId: "ConvertDocument_OdpToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OdpToPngResult"
      security:
      - Apikey: []
  /convert/odp/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert ODP Presentation to JPG/JPEG image array"
      description: "Converts an Open Document Presentation (ODP) to an array of JPG/JPEG\
        \ images, one for each page. Customize image quality using quality header."
      operationId: "ConvertDocument_OdpToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OdpToJpgResult"
      security:
      - Apikey: []
  /convert/key/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Keynote Presentation (KEY) to PDF"
      description: "Convert Mac Keynote Presentation (KEY) to standard PDF"
      operationId: "ConvertDocument_KeynoteToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/key/to/pptx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Keynote Presentation (KEY) to PPTX"
      description: "Convert Mac Keynote Presentation (KEY) to PowerPoint Presentation\
        \ (PPTX)"
      operationId: "ConvertDocument_KeynoteToPptx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/key/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Keynote Presentation (KEY) to PNG image array"
      description: "Converts a Mac Keynote Presentation (KEY) to an array of PNG images,\
        \ one for each page."
      operationId: "ConvertDocument_KeynoteToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/KeynoteToPngResult"
      security:
      - Apikey: []
  /convert/key/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Keynote Presentation (KEY) to JPG/JPEG image array"
      description: "Converts a Mac Keynote Presentation (KEY) to an array of JPG/JPEG\
        \ images, one for each page. Customize image quality using quality header."
      operationId: "ConvertDocument_KeynoteToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/KeynoteToJpgResult"
      security:
      - Apikey: []
  /convert/rtf/to/pdf:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Rich Text Format RTF to PDF"
      description: "Convert Rich Text Format Document (RTF) to standard PDF"
      operationId: "ConvertDocument_RtfToPdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/rtf/to/html:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Rich Text Format RTF to HTML Document"
      description: "Convert Rich Text Format Document (RTF) to HTML Document"
      operationId: "ConvertDocument_RtfToHtml"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/rtf/to/docx:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Rich Text Format RTF to DOCX Document"
      description: "Convert Rich Text Format Document (RTF) to Word DOCX Document"
      operationId: "ConvertDocument_RtfToDocx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/rtf/to/png:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Rich Text Format RTF to PNG image array"
      description: "Converts a Rich Text Format Document (RTF) to an array of PNG\
        \ images, one for each page."
      operationId: "ConvertDocument_RtfToPng"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RtfToPngResult"
      security:
      - Apikey: []
  /convert/rtf/to/jpg:
    post:
      tags:
      - "ConvertDocument"
      summary: "Convert Rich Text Format RTF to JPG/JPEG image array"
      description: "Converts a Rich Text Format Document (RTF) to an array of JPG/JPEG\
        \ images, one for each page. Customize image quality using quality header."
      operationId: "ConvertDocument_RtfToJpg"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "quality"
        in: "header"
        description: "Optional; Set the JPEG quality level; lowest quality is 1 (highest\
          \ compression), highest quality (lowest compression) is 100; recommended\
          \ value is 75. Default value is 75."
        required: false
        type: "integer"
        x-exportParamName: "Quality"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RtfToJpgResult"
      security:
      - Apikey: []
  /convert/image/{format1}/to/{format2}:
    post:
      tags:
      - "ConvertImage"
      summary: "Image format conversion"
      description: "Convert between over 100 file formats, including key formats such\
        \ as Photoshop (PSD), PNG, JPG, GIF, NEF, and BMP."
      operationId: "ConvertImage_ImageFormatConvert"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "format1"
        in: "path"
        description: "Input file format as a 3+ letter file extension.  You can also\
          \ provide UNKNOWN for unknown file formats. Supported formats include AAI,\
          \ ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA,\
          \ CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF,\
          \ EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX,\
          \ GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG,\
          \ JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF,\
          \ ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA,\
          \ PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48,\
          \ PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE,\
          \ SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP,\
          \ WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV"
        required: true
        type: "string"
        x-exportParamName: "Format1"
      - name: "format2"
        in: "path"
        description: "Output (convert to this format) file format as a 3+ letter file\
          \ extension.  Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2,\
          \ BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR,\
          \ DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF,\
          \ EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL,\
          \ HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR,\
          \ MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD,\
          \ PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG,\
          \ PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB,\
          \ RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA,\
          \ TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD,\
          \ X3F, YCbCr, YCbCrA, YUV"
        required: true
        type: "string"
        x-exportParamName: "Format2"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/image-multipage/{format1}/to/{format2}:
    post:
      tags:
      - "ConvertImage"
      summary: "Multi-page image format conversion"
      description: "Convert between over 100 file formats, including support for Multiple-Page\
        \ formats (e.g. PDFs, TIFFs, etc. with multiple pages)."
      operationId: "ConvertImage_MultipageImageFormatConvert"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "format1"
        in: "path"
        description: "Input file format as a 3+ letter file extension.  You can also\
          \ provide UNKNOWN for unknown file formats.  Supported formats include AAI,\
          \ ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA,\
          \ CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF,\
          \ EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX,\
          \ GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG,\
          \ JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF,\
          \ ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA,\
          \ PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48,\
          \ PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE,\
          \ SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP,\
          \ WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV"
        required: true
        type: "string"
        x-exportParamName: "Format1"
      - name: "format2"
        in: "path"
        description: "Output (convert to this format) file format as a 3+ letter file\
          \ extension.  Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2,\
          \ BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR,\
          \ DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF,\
          \ EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL,\
          \ HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR,\
          \ MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD,\
          \ PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG,\
          \ PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB,\
          \ RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA,\
          \ TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD,\
          \ X3F, YCbCr, YCbCrA, YUV"
        required: true
        type: "string"
        x-exportParamName: "Format2"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/MultipageImageFormatConversionResult"
      security:
      - Apikey: []
  /convert/image/set-dpi/{dpi}:
    post:
      tags:
      - "ConvertImage"
      summary: "Change image DPI"
      description: "Resize an image to have a different DPI"
      operationId: "ConvertImage_ImageSetDPI"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "dpi"
        in: "path"
        description: "New DPI in pixels-per-inch, for example 300 DPI or 600 DPI"
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "Dpi"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/image/get-info:
    post:
      tags:
      - "ConvertImage"
      summary: "Get information about an image"
      description: "Get details from an image such as size, format and MIME type,\
        \ compression, EXIF data such as location, DPI, unique colors, transparency\
        \ information, and more"
      operationId: "ConvertImage_GetImageInfo"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetImageInfoResult"
      security:
      - Apikey: []
  /convert/template/html/apply:
    post:
      tags:
      - "ConvertTemplate"
      summary: "Apply HTML template"
      description: "Apply operations to fill in an HTML template, generating a final\
        \ HTML result"
      operationId: "ConvertTemplate_ApplyHtmlTemplate"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "value"
        description: "Operations to apply to template"
        required: true
        schema:
          $ref: "#/definitions/HtmlTemplateApplicationRequest"
        x-exportParamName: "Value"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/HtmlTemplateApplicationResponse"
      security:
      - Apikey: []
  /convert/template/docx/apply:
    post:
      tags:
      - "ConvertTemplate"
      summary: "Apply Word DOCX template"
      description: "Apply operations to fill in a Word DOCX template by replacing\
        \ target template/placeholder strings in the DOCX with values, generating\
        \ a final Word DOCX result.  For example, you could create a Word Document\
        \ invoice containing strings such as \"{FirstName}\" and \"{LastName}\" and\
        \ then replace these values with \"John\" and \"Smith\"."
      operationId: "ConvertTemplate_ApplyDocxTemplate"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "templateDefinition"
        in: "header"
        description: "Template definition for the document, including what values\
          \ to replace"
        required: false
        x-exportParamName: "TemplateDefinition"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/web/url/to/screenshot:
    post:
      tags:
      - "ConvertWeb"
      summary: "Take screenshot of URL"
      description: "Fully renders a website and returns a PNG screenshot of the full\
        \ page image.  Javascript, HTML5, CSS and other advanced features are all\
        \ supported."
      operationId: "ConvertWeb_UrlToScreenshot"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "input"
        description: "Screenshot request parameters"
        required: true
        schema:
          $ref: "#/definitions/ScreenshotRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/web/url/to/pdf:
    post:
      tags:
      - "ConvertWeb"
      summary: "Convert a URL to PDF"
      description: "Fully renders a website and returns a PDF of the full page.  Javascript,\
        \ HTML5, CSS and other advanced features are all supported."
      operationId: "ConvertWeb_UrlToPdf"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "input"
        description: "URL to PDF request parameters"
        required: true
        schema:
          $ref: "#/definitions/UrlToPdfRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/web/url/to/txt:
    post:
      tags:
      - "ConvertWeb"
      summary: "Convert website URL page to text (txt)"
      description: "Converts a website URL page into text (txt); extracts text from\
        \ HTML"
      operationId: "ConvertWeb_UrlToTxt"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "input"
        description: "HTML to Text request parameters"
        required: true
        schema:
          $ref: "#/definitions/UrlToTextRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UrlToTextResponse"
      security:
      - Apikey: []
  /convert/web/html/to/pdf:
    post:
      tags:
      - "ConvertWeb"
      summary: "Convert HTML string to PDF"
      description: "Fully renders a website and returns a PDF of the HTML.  Javascript,\
        \ HTML5, CSS and other advanced features are all supported."
      operationId: "ConvertWeb_HtmlToPdf"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "input"
        description: "HTML to PDF request parameters"
        required: true
        schema:
          $ref: "#/definitions/HtmlToPdfRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/web/html/to/png:
    post:
      tags:
      - "ConvertWeb"
      summary: "Convert HTML string to PNG screenshot"
      description: "Fully renders a website and returns a PNG (screenshot) of the\
        \ HTML.  Javascript, HTML5, CSS and other advanced features are all supported."
      operationId: "ConvertWeb_HtmlToPng"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "input"
        description: "HTML to PNG request parameters"
        required: true
        schema:
          $ref: "#/definitions/HtmlToPngRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/web/html/to/txt:
    post:
      tags:
      - "ConvertWeb"
      summary: "Convert HTML string to text (txt)"
      description: "Converts an HTML string input into text (txt); extracts text from\
        \ HTML"
      operationId: "ConvertWeb_HtmlToTxt"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "input"
        description: "HTML to Text request parameters"
        required: true
        schema:
          $ref: "#/definitions/HtmlToTextRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/HtmlToTextResponse"
      security:
      - Apikey: []
  /convert/html/to/docx:
    post:
      tags:
      - "ConvertWeb"
      summary: "Convert HTML to Word DOCX Document"
      description: "Convert HTML to Office Word Document (DOCX) format"
      operationId: "ConvertWeb_HtmlToDocx"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "inputRequest"
        description: "HTML input to convert to DOCX"
        required: true
        schema:
          $ref: "#/definitions/HtmlToOfficeRequest"
        x-exportParamName: "InputRequest"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/web/md/to/html:
    post:
      tags:
      - "ConvertWeb"
      summary: "Convert Markdown to HTML"
      description: "Convert a markdown file (.md) to HTML"
      operationId: "ConvertWeb_MdToHtml"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/HtmlMdResult"
      security:
      - Apikey: []
  /convert/edit/begin-editing:
    post:
      tags:
      - "EditDocument"
      summary: "Begin editing a document"
      description: "Uploads a document to Cloudmersive to begin a series of one or\
        \ more editing operations.  To edit a document, first call Begin Editing on\
        \ the document.  Then perform operations on the document using the secure\
        \ URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert\
        \ Table.  Finally, perform finish editing on the URL to return the resulting\
        \ edited document.  The editing URL is temporary and only stored in-memory\
        \ cache, and will automatically expire from the cache after 30 minutes, and\
        \ cannot be directly accessed."
      operationId: "EditDocument_BeginEditing"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
      security:
      - Apikey: []
  /convert/edit/finish-editing:
    post:
      tags:
      - "EditDocument"
      summary: "Finish editing document, and download result from document editing"
      description: "Once done editing a document, download the result.  Begin editing\
        \ a document by calling begin-editing, then perform operations, then call\
        \ finish-editing to get the result."
      operationId: "EditDocument_FinishEditing"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Cloudmersive Document URL to complete editing on"
        required: true
        schema:
          $ref: "#/definitions/FinishEditingRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/docx/create/blank:
    post:
      tags:
      - "EditDocument"
      summary: "Create a blank Word DOCX document"
      description: "Returns a blank Word DOCX Document format file.  The file is blank,\
        \ with no contents.  Use additional editing commands such as Insert Paragraph\
        \ or Insert Table or Insert Image to populate the document."
      operationId: "EditDocument_DocxCreateBlankDocument"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/CreateBlankDocxRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/CreateBlankDocxResponse"
      security:
      - Apikey: []
  /convert/edit/docx/replace-all:
    post:
      tags:
      - "EditDocument"
      summary: "Replace string in Word DOCX document"
      description: "Replace all instances of a string in an Office Word Document (docx)"
      operationId: "EditDocument_DocxReplace"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document string replacement configuration input"
        required: true
        schema:
          $ref: "#/definitions/ReplaceStringRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/docx/replace-all/multi:
    post:
      tags:
      - "EditDocument"
      summary: "Replace multiple strings in Word DOCX document"
      description: "Replace all instances of multiple strings in an Office Word Document\
        \ (docx)"
      operationId: "EditDocument_DocxReplaceMulti"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document string replacement configuration input"
        required: true
        schema:
          $ref: "#/definitions/MultiReplaceStringRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pptx/replace-all:
    post:
      tags:
      - "EditDocument"
      summary: "Replace string in PowerPoint PPTX presentation"
      description: "Replace all instances of a string in an Office PowerPoint Document\
        \ (pptx)"
      operationId: "EditDocument_PptxReplace"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Replacement document configuration input"
        required: true
        schema:
          $ref: "#/definitions/ReplaceStringRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pptx/get-macros:
    post:
      tags:
      - "EditDocument"
      summary: "Get macro information from a PowerPoint PPTX/PPTM presentation document"
      description: "Returns information about the Macros (e.g. VBA) defined in the\
        \ PowerPoint Document"
      operationId: "EditDocument_PptxGetMacroInformation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetMacrosResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-metadata:
    post:
      tags:
      - "EditDocument"
      summary: "Get all metadata properties in Word DOCX document"
      description: "Returns all the metadata properties in an Office Word Document\
        \ (docx)"
      operationId: "EditDocument_DocxGetMetadataProperties"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxMetadataPropertiesResponse"
      security:
      - Apikey: []
  /convert/edit/docx/set-metadata/custom-property:
    post:
      tags:
      - "EditDocument"
      summary: "Set custom property metadata properties in Word DOCX document"
      description: "Sets the custom property metadata for the metadata properties\
        \ in an Office Word Document (docx)"
      operationId: "EditDocument_DocxSetCustomMetadataProperties"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/DocxSetCustomMetadataPropertiesRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/docx/get-tables:
    post:
      tags:
      - "EditDocument"
      summary: "Get all tables in Word DOCX document"
      description: "Returns all the table objects in an Office Word Document (docx)"
      operationId: "EditDocument_DocxGetTables"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxTablesRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxTablesResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-table/by-index:
    post:
      tags:
      - "EditDocument"
      summary: "Get a specific table by index in a Word DOCX document"
      description: "Returns the specific table object by its 0-based index in an Office\
        \ Word Document (DOCX)"
      operationId: "EditDocument_DocxGetTableByIndex"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxTableByIndexRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxTableByIndexResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-images:
    post:
      tags:
      - "EditDocument"
      summary: "Get images from a Word DOCX document"
      description: "Returns the images defined in the Word Document (DOCX) format\
        \ file"
      operationId: "EditDocument_DocxGetImages"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxImagesRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxImagesResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-macros:
    post:
      tags:
      - "EditDocument"
      summary: "Get macro information from a Word DOCX/DOCM document"
      description: "Returns information about the Macros (e.g. VBA) defined in the\
        \ Word Document"
      operationId: "EditDocument_DocxGetMacroInformation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetMacrosResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-styles:
    post:
      tags:
      - "EditDocument"
      summary: "Get styles from a Word DOCX document"
      description: "Returns the styles defined in the Word Document (DOCX) format\
        \ file"
      operationId: "EditDocument_DocxGetStyles"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxStylesRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxStylesResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-sections:
    post:
      tags:
      - "EditDocument"
      summary: "Get sections from a Word DOCX document"
      description: "Returns the sections defined in the Word Document (DOCX) format\
        \ file"
      operationId: "EditDocument_DocxGetSections"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxSectionsRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxSectionsResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-body:
    post:
      tags:
      - "EditDocument"
      summary: "Get body from a Word DOCX document"
      description: "Returns the body defined in the Word Document (DOCX) format file;\
        \ this is the main content part of a DOCX document"
      operationId: "EditDocument_DocxBody"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxBodyRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxBodyResponse"
      security:
      - Apikey: []
  /convert/edit/docx/find/paragraph:
    post:
      tags:
      - "EditDocument"
      summary: "Find matching paragraphs in a Word DOCX document"
      description: "Returns the paragraphs defined in the Word Document (DOCX) format\
        \ file that match the input criteria"
      operationId: "EditDocument_DocxFindParagraph"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/FindDocxParagraphRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FindDocxParagraphResponse"
      security:
      - Apikey: []
  /convert/edit/docx/replace/paragraph:
    post:
      tags:
      - "EditDocument"
      summary: "Replace matching paragraphs in a Word DOCX document"
      description: "Returns the edited Word Document (DOCX) format file with the matching\
        \ paragraphs replaced as requested.  Replace a paragraph with another object\
        \ such as an image.  Useful for performing templating operations."
      operationId: "EditDocument_DocxReplaceParagraph"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/ReplaceDocxParagraphRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ReplaceDocxParagraphResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-pages:
    post:
      tags:
      - "EditDocument"
      summary: "Get pages and content from a Word DOCX document"
      description: "Returns the pages and contents of each page defined in the Word\
        \ Document (DOCX) format file"
      operationId: "EditDocument_DocxPages"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxPagesRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxPagesResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-comments/flat-list:
    post:
      tags:
      - "EditDocument"
      summary: "Get comments from a Word DOCX document as a flat list"
      description: "Returns the comments and review annotations stored in the Word\
        \ Document (DOCX) format file as a flattened list (not as a hierarchy of comments\
        \ and replies)."
      operationId: "EditDocument_DocxGetComments"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxGetCommentsRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxCommentsResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-comments/hierarchical:
    post:
      tags:
      - "EditDocument"
      summary: "Get comments from a Word DOCX document hierarchically"
      description: "Returns the comments and review annotations stored in the Word\
        \ Document (DOCX) format file hierarchically, where reply comments are nested\
        \ as children under top-level comments in the results returned."
      operationId: "EditDocument_DocxGetCommentsHierarchical"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxGetCommentsHierarchicalRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxCommentsHierarchicalResponse"
      security:
      - Apikey: []
  /convert/edit/docx/comments/remove-all:
    post:
      tags:
      - "EditDocument"
      summary: "Remove all comments from a Word DOCX document"
      description: "Removes all of the comments from a Word Document."
      operationId: "EditDocument_DocxRemoveAllComments"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/docx/track-changes/enable:
    post:
      tags:
      - "EditDocument"
      summary: "Enable track changes, revisions in a Word DOCX document"
      description: "Enables tracking of changes and revisions in a Word DOCX document.\
        \  Users editing the document will see changes tracked automatically, with\
        \ edits highlighted, and the ability to accept or reject changes made to the\
        \ document."
      operationId: "EditDocument_DocxEnableTrackChanges"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/docx/track-changes/disable:
    post:
      tags:
      - "EditDocument"
      summary: "Disable track changes, revisions in a Word DOCX document"
      description: "Diables tracking of changes and revisions in a Word DOCX document,\
        \ and accepts any pending changes.  Users editing the document will no longer\
        \ see changes tracked automatically."
      operationId: "EditDocument_DocxDisableTrackChanges"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/docx/track-changes/accept-all:
    post:
      tags:
      - "EditDocument"
      summary: "Accept all tracked changes, revisions in a Word DOCX document"
      description: "Accepts all tracked changes and revisions in a Word DOCX document.\
        \  This will accept all pending changes in the document when tracked changes\
        \ is turned on.  Track changes will remain on (if it is on) after this oepration\
        \ is completed."
      operationId: "EditDocument_DocxAcceptAllTrackChanges"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/docx/insert-comment/on/paragraph:
    post:
      tags:
      - "EditDocument"
      summary: "Insert a new comment into a Word DOCX document attached to a paragraph"
      description: "Adds a new comment into a Word DOCX document attached to a paragraph\
        \ and returns the result.  Call Finish Editing on the output URL to complete\
        \ the operation."
      operationId: "EditDocument_DocxInsertCommentOnParagraph"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/DocxInsertCommentOnParagraphRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/InsertDocxCommentOnParagraphResponse"
      security:
      - Apikey: []
  /convert/edit/docx/delete-pages:
    post:
      tags:
      - "EditDocument"
      summary: "Delete, remove pages from a Word DOCX document"
      description: "Returns the edited Word Document in the Word Document (DOCX) format\
        \ file with the specified pages removed"
      operationId: "EditDocument_DocxDeletePages"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/RemoveDocxPagesRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/docx/get-headers-and-footers:
    post:
      tags:
      - "EditDocument"
      summary: "Get content of a footer from a Word DOCX document"
      description: "Returns the footer content from a Word Document (DOCX) format\
        \ file"
      operationId: "EditDocument_DocxGetHeadersAndFooters"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxHeadersAndFootersRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxHeadersAndFootersResponse"
      security:
      - Apikey: []
  /convert/edit/docx/set-header:
    post:
      tags:
      - "EditDocument"
      summary: "Set the header in a Word DOCX document"
      description: "Set the header in a Word Document (DOCX).  Call Finish Editing\
        \ on the output URL to complete the operation."
      operationId: "EditDocument_DocxSetHeader"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/DocxSetHeaderRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocxSetHeaderResponse"
      security:
      - Apikey: []
  /convert/edit/docx/set-footer:
    post:
      tags:
      - "EditDocument"
      summary: "Set the footer in a Word DOCX document"
      description: "Set the footer in a Word Document (DOCX).  Call Finish Editing\
        \ on the output URL to complete the operation."
      operationId: "EditDocument_DocxSetFooter"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/DocxSetFooterRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocxSetFooterResponse"
      security:
      - Apikey: []
  /convert/edit/docx/set-footer/add-page-number:
    post:
      tags:
      - "EditDocument"
      summary: "Add page number to footer in a Word DOCX document"
      description: "Set the footer in a Word Document (DOCX) to contain a page number.\
        \  Call Finish Editing on the output URL to complete the operation."
      operationId: "EditDocument_DocxSetFooterAddPageNumber"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/DocxSetFooterAddPageNumberRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocxSetFooterResponse"
      security:
      - Apikey: []
  /convert/edit/docx/insert-image:
    post:
      tags:
      - "EditDocument"
      summary: "Insert image into a Word DOCX document"
      description: "Set the footer in a Word Document (DOCX).  Call Finish Editing\
        \ on the output URL to complete the operation."
      operationId: "EditDocument_DocxInsertImage"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/DocxInsertImageRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocxInsertImageResponse"
      security:
      - Apikey: []
  /convert/edit/docx/insert-paragraph:
    post:
      tags:
      - "EditDocument"
      summary: "Insert a new paragraph into a Word DOCX document"
      description: "Adds a new paragraph into a DOCX and returns the result.  You\
        \ can insert at the beginning/end of a document, or before/after an existing\
        \ object using its Path (location within the document).  Call Finish Editing\
        \ on the output URL to complete the operation."
      operationId: "EditDocument_DocxInsertParagraph"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/InsertDocxInsertParagraphRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/InsertDocxInsertParagraphResponse"
      security:
      - Apikey: []
  /convert/edit/docx/insert-table:
    post:
      tags:
      - "EditDocument"
      summary: "Insert a new table into a Word DOCX document"
      description: "Adds a new table into a DOCX and returns the result.  Call Finish\
        \ Editing on the output URL to complete the operation."
      operationId: "EditDocument_DocxInsertTable"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/InsertDocxTablesRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/InsertDocxTablesResponse"
      security:
      - Apikey: []
  /convert/edit/docx/get-table-row:
    post:
      tags:
      - "EditDocument"
      summary: "Gets the contents of an existing table row in an existing table in\
        \ a Word DOCX document"
      description: "Gets the contents of an existing table row in a Word DOCX Document\
        \ and returns the result."
      operationId: "EditDocument_DocxGetTableRow"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetDocxTableRowRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetDocxTableRowResponse"
      security:
      - Apikey: []
  /convert/edit/docx/delete-table-row:
    post:
      tags:
      - "EditDocument"
      summary: "Deletes a table row in an existing table in a Word DOCX document"
      description: "Deletes an existing table row in a Word DOCX Document and returns\
        \ the result."
      operationId: "EditDocument_DocxDeleteTableRow"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/DeleteDocxTableRowRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DeleteDocxTableRowResponse"
      security:
      - Apikey: []
  /convert/edit/docx/delete-table-row/range:
    post:
      tags:
      - "EditDocument"
      summary: "Deletes a range of multiple table rows in an existing table in a Word\
        \ DOCX document"
      description: "Deletes a range of 1 or more existing table rows in a Word DOCX\
        \ Document and returns the result."
      operationId: "EditDocument_DocxDeleteTableRowRange"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/DeleteDocxTableRowRangeRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DeleteDocxTableRowRangeResponse"
      security:
      - Apikey: []
  /convert/edit/docx/insert-table-row:
    post:
      tags:
      - "EditDocument"
      summary: "Insert a new row into an existing table in a Word DOCX document"
      description: "Adds a new table row into a DOCX Document and returns the result.\
        \  Call Finish Editing on the output URL to complete the operation."
      operationId: "EditDocument_DocxInsertTableRow"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/InsertDocxTableRowRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/InsertDocxTableRowResponse"
      security:
      - Apikey: []
  /convert/edit/docx/update-table-row:
    post:
      tags:
      - "EditDocument"
      summary: "Update, set contents of a table row in an existing table in a Word\
        \ DOCX document"
      description: "Sets the contents of a table row into a DOCX Document and returns\
        \ the result.  Call Finish Editing on the output URL to complete the operation."
      operationId: "EditDocument_DocxUpdateTableRow"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/UpdateDocxTableRowRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UpdateDocxTableRowResponse"
      security:
      - Apikey: []
  /convert/edit/docx/update-table-cell:
    post:
      tags:
      - "EditDocument"
      summary: "Update, set contents of a table cell in an existing table in a Word\
        \ DOCX document"
      description: "Sets the contents of a table cell into a DOCX Document and returns\
        \ the result.  Call Finish Editing on the output URL to complete the operation."
      operationId: "EditDocument_DocxUpdateTableCell"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/UpdateDocxTableCellRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UpdateDocxTableCellResponse"
      security:
      - Apikey: []
  /convert/edit/docx/remove-headers-and-footers:
    post:
      tags:
      - "EditDocument"
      summary: "Remove headers and footers from Word DOCX document"
      description: "Remove all headers, or footers, or both from a Word Document (DOCX).\
        \  Call Finish Editing on the output URL to complete the operation."
      operationId: "EditDocument_DocxRemoveHeadersAndFooters"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/RemoveDocxHeadersAndFootersRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RemoveDocxHeadersAndFootersResponse"
      security:
      - Apikey: []
  /convert/edit/docx/remove-object:
    post:
      tags:
      - "EditDocument"
      summary: "Delete any object in a Word DOCX document"
      description: "Delete any object, such as a paragraph, table, image, etc. from\
        \ a Word Document (DOCX).  Pass in the Path of the object you would like to\
        \ delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body,\
        \ etc. to get the paths of the objects in the document.  Call Finish Editing\
        \ on the output URL to complete the operation."
      operationId: "EditDocument_DocxRemoveObject"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/DocxRemoveObjectRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocxRemoveObjectResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/create/blank:
    post:
      tags:
      - "EditDocument"
      summary: "Create a blank Excel XLSX spreadsheet"
      description: "Returns a blank Excel XLSX Spreadsheet (XLSX) format file"
      operationId: "EditDocument_XlsxCreateBlankSpreadsheet"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/CreateBlankSpreadsheetRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/CreateBlankSpreadsheetResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/create/from/data:
    post:
      tags:
      - "EditDocument"
      summary: "Create a new Excel XLSX spreadsheet from column and row data"
      description: "Returns a new Excel XLSX Spreadsheet (XLSX) format file populated\
        \ with column and row data specified as input"
      operationId: "EditDocument_XlsxCreateSpreadsheetFromData"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/CreateSpreadsheetFromDataRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/CreateSpreadsheetFromDataResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/get-worksheets:
    post:
      tags:
      - "EditDocument"
      summary: "Get worksheets from a Excel XLSX spreadsheet"
      description: "Returns the worksheets (tabs) defined in the Excel Spreadsheet\
        \ (XLSX) format file"
      operationId: "EditDocument_XlsxGetWorksheets"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetXlsxWorksheetsRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetXlsxWorksheetsResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/get-rows-and-cells:
    post:
      tags:
      - "EditDocument"
      summary: "Get rows and cells from a Excel XLSX spreadsheet, worksheet"
      description: "Returns the rows and cells defined in the Excel Spreadsheet worksheet"
      operationId: "EditDocument_XlsxGetRowsAndCells"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetXlsxRowsAndCellsRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetXlsxRowsAndCellsResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/get-specific-row:
    post:
      tags:
      - "EditDocument"
      summary: "Get a specific row from a Excel XLSX spreadsheet, worksheet by path"
      description: "Returns the specific row and its cells defined in the Excel Spreadsheet\
        \ worksheet based on the specified path."
      operationId: "EditDocument_XlsxGetSpecificRow"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetXlsxSpecificRowRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetXlsxSpecificRowResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/clear-row:
    post:
      tags:
      - "EditDocument"
      summary: "Clear row from a Excel XLSX spreadsheet, worksheet"
      description: "Clears data from a specific row in the Excel Spreadsheet worksheet,\
        \ leaving a blank row. Use the Get Rows And Cells API to enumerate available\
        \ rows in a spreadsheet."
      operationId: "EditDocument_XlsxClearRow"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/ClearXlsxRowRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ClearXlsxRowResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/append-row:
    post:
      tags:
      - "EditDocument"
      summary: "Append row to a Excel XLSX spreadsheet, worksheet"
      description: "Appends a row to the end of an Excel Spreadsheet worksheet."
      operationId: "EditDocument_XlsxAppendRow"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/AppendXlsxRowRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AppendXlsxRowResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/delete-worksheet:
    post:
      tags:
      - "EditDocument"
      summary: "Delete, remove worksheet from an Excel XLSX spreadsheet document"
      description: "Edits the input Excel XLSX spreadsheet document to remove the\
        \ specified worksheet (tab).  Use the Get Worksheets API to enumerate available\
        \ worksheets in a spreadsheet."
      operationId: "EditDocument_XlsxDeleteWorksheet"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Spreadsheet input request"
        required: true
        schema:
          $ref: "#/definitions/RemoveXlsxWorksheetRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/xlsx/get-cell/by-index:
    post:
      tags:
      - "EditDocument"
      summary: "Get cell from an Excel XLSX spreadsheet, worksheet by index"
      description: "Returns the value and definition of a specific cell in a specific\
        \ row in the Excel Spreadsheet worksheet"
      operationId: "EditDocument_XlsxGetCellByIndex"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetXlsxCellRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetXlsxCellResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/get-cell/by-identifier:
    post:
      tags:
      - "EditDocument"
      summary: "Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier"
      description: "Returns the value of a specific cell based on its identifier (e.g.\
        \ A1, B22, C33, etc.) in the Excel Spreadsheet worksheet"
      operationId: "EditDocument_XlsxGetCellByIdentifier"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetXlsxCellByIdentifierRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetXlsxCellByIdentifierResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/clear-cell/by-index:
    post:
      tags:
      - "EditDocument"
      summary: "Clear cell contents in an Excel XLSX spreadsheet, worksheet by index"
      description: "Clears, sets to blank, the contents of a specific cell in an Excel\
        \ XLSX spreadsheet, worksheet"
      operationId: "EditDocument_XlsxClearCellByIndex"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/ClearXlsxCellRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ClearXlsxCellResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/set-cell/by-index:
    post:
      tags:
      - "EditDocument"
      summary: "Set, update cell contents in an Excel XLSX spreadsheet, worksheet\
        \ by index"
      description: "Sets, updates the contents of a specific cell in an Excel XLSX\
        \ spreadsheet, worksheet"
      operationId: "EditDocument_XlsxSetCellByIndex"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/SetXlsxCellRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SetXlsxCellResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/set-cell/by-identifier:
    post:
      tags:
      - "EditDocument"
      summary: "Set, update cell contents in an Excel XLSX spreadsheet, worksheet\
        \ by cell identifier"
      description: "Sets, updates the contents of a specific cell in an Excel XLSX\
        \ spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in\
        \ the worksheet"
      operationId: "EditDocument_XlsxSetCellByIdentifier"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/SetXlsxCellByIdentifierRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SetXlsxCellByIdentifierResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/get-columns:
    post:
      tags:
      - "EditDocument"
      summary: "Get columns from a Excel XLSX spreadsheet, worksheet"
      description: "Returns the columns defined in the Excel Spreadsheet worksheet"
      operationId: "EditDocument_XlsxGetColumns"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetXlsxColumnsRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetXlsxColumnsResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/get-images:
    post:
      tags:
      - "EditDocument"
      summary: "Get images from a Excel XLSX spreadsheet, worksheet"
      description: "Returns the images defined in the Excel Spreadsheet worksheet"
      operationId: "EditDocument_XlsxGetImages"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetXlsxImagesRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetXlsxImagesResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/get-macros:
    post:
      tags:
      - "EditDocument"
      summary: "Get macro information from a Excel XLSX/XLSM spreadsheet, worksheet"
      description: "Returns information about the Macros (e.g. VBA) defined in the\
        \ Excel Spreadsheet"
      operationId: "EditDocument_XlsxGetMacroInformation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetMacrosResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/get-styles:
    post:
      tags:
      - "EditDocument"
      summary: "Get styles from a Excel XLSX spreadsheet, worksheet"
      description: "Returns the style defined in the Excel Spreadsheet"
      operationId: "EditDocument_XlsxGetStyles"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/GetXlsxStylesRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetXlsxStylesResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/insert-worksheet:
    post:
      tags:
      - "EditDocument"
      summary: "Insert a new worksheet into an Excel XLSX spreadsheet"
      description: "Inserts a new worksheet into an Excel Spreadsheet"
      operationId: "EditDocument_XlsxInsertWorksheet"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/InsertXlsxWorksheetRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/InsertXlsxWorksheetResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/rename-worksheet:
    post:
      tags:
      - "EditDocument"
      summary: "Rename a specific worksheet in a Excel XLSX spreadsheet"
      description: "Edits the input Excel XLSX spreadsheet document to rename a specified\
        \ worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets\
        \ in a spreadsheet."
      operationId: "EditDocument_XlsxRenameWorksheet"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/RenameXlsxWorksheetRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RenameXlsxWorksheetResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/configuration/enable-shared-workbook:
    post:
      tags:
      - "EditDocument"
      summary: "Enable Shared Workbook (legacy) in Excel XLSX spreadsheet"
      description: "Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet"
      operationId: "EditDocument_XlsxEnableSharedWorkbook"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/EnableSharedWorkbookRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/EnableSharedWorkbookResponse"
      security:
      - Apikey: []
  /convert/edit/xlsx/configuration/disable-shared-workbook:
    post:
      tags:
      - "EditDocument"
      summary: "Disable Shared Workbook (legacy) in Excel XLSX spreadsheet"
      description: "Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet"
      operationId: "EditDocument_XlsxDisableSharedWorkbook"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Document input request"
        required: true
        schema:
          $ref: "#/definitions/DisableSharedWorkbookRequest"
        x-exportParamName: "Input"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DisableSharedWorkbookResponse"
      security:
      - Apikey: []
  /convert/edit/pptx/delete-slides:
    post:
      tags:
      - "EditDocument"
      summary: "Delete, remove slides from a PowerPoint PPTX presentation document"
      description: "Edits the input PowerPoint PPTX presentation document to remove\
        \ the specified slides"
      operationId: "EditDocument_PptxDeleteSlides"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "reqConfig"
        description: "Presentation input request"
        required: true
        schema:
          $ref: "#/definitions/RemovePptxSlidesRequest"
        x-exportParamName: "ReqConfig"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/html/append/heading:
    post:
      tags:
      - "EditHtml"
      summary: "Append a Heading to an HTML Document"
      description: "Appends a heading to the end of an HTML document."
      operationId: "EditHtml_HtmlAppendHeading"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "headingText"
        in: "header"
        description: "The text content to be used in the header."
        required: true
        type: "string"
        x-exportParamName: "HeadingText"
      - name: "headingSize"
        in: "header"
        description: "Optional: The heading size number. Default is 1. Accepts values\
          \ between 1 and 6."
        required: false
        type: "integer"
        x-exportParamName: "HeadingSize"
        x-optionalDataType: "Int32"
      - name: "cssStyle"
        in: "header"
        description: "Optional: The CSS style for the heading."
        required: false
        type: "string"
        x-exportParamName: "CssStyle"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/html/head/append/tag:
    post:
      tags:
      - "EditHtml"
      summary: "Append an HTML tag to the HEAD section of an HTML Document"
      description: "Appends an HTML tag to the HEAD section of an HTML document."
      operationId: "EditHtml_HtmlAppendHeaderTag"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "htmlTag"
        in: "header"
        description: "The HTML tag to append."
        required: true
        type: "string"
        x-exportParamName: "HtmlTag"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/html/head/get/language:
    post:
      tags:
      - "EditHtml"
      summary: "Gets the language for the HTML document"
      description: "Retrieves the language code (e.g. \"en\" or \"de\") of an HTML\
        \ document."
      operationId: "EditHtml_HtmlGetLanguage"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/HtmlGetLanguageResult"
      security:
      - Apikey: []
  /convert/edit/html/head/set/language:
    post:
      tags:
      - "EditHtml"
      summary: "Sets the language for the HTML document"
      description: "Sets the language code of an HTML document."
      operationId: "EditHtml_HtmlSetLanguage"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "languageCode"
        in: "header"
        description: "The HTML langauge code to set."
        required: true
        type: "string"
        x-exportParamName: "LanguageCode"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/html/head/set/rel-canonical-url:
    post:
      tags:
      - "EditHtml"
      summary: "Sets the rel canonical URL for the HTML document"
      description: "Sets the rel canonical URL of an HTML document.  This is useful\
        \ for telling search engines and other indexers which pages are duplicates\
        \ of eachother; any pages with the rel=canonical tag will be treated as duplicates\
        \ of the canonical URL."
      operationId: "EditHtml_HtmlSetRelCanonical"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "canonicalUrl"
        in: "header"
        description: "The HTML canonical URL to set."
        required: true
        type: "string"
        x-exportParamName: "CanonicalUrl"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/html/head/get/rel-canonical-url:
    post:
      tags:
      - "EditHtml"
      summary: "Gets the rel canonical URL for the HTML document"
      description: "Gets the rel canonical URL of an HTML document."
      operationId: "EditHtml_HtmlGetRelCanonical"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/HtmlGetRelCanonicalUrlResult"
      security:
      - Apikey: []
  /convert/edit/html/head/get/sitemap-url:
    post:
      tags:
      - "EditHtml"
      summary: "Gets the sitemap URL for the HTML document"
      description: "Gets the sitemap link URL of an HTML document."
      operationId: "EditHtml_HtmlGetSitemap"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/HtmlGetSitemapUrlResult"
      security:
      - Apikey: []
  /convert/edit/html/head/set/sitemap-url:
    post:
      tags:
      - "EditHtml"
      summary: "Sets the sitemap URL for the HTML document"
      description: "Sets the sitemap URL of an HTML document."
      operationId: "EditHtml_HtmlSetSitemapUrl"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "sitemapUrl"
        in: "header"
        description: "The HTML sitemap URL to set."
        required: true
        type: "string"
        x-exportParamName: "SitemapUrl"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/html/append/paragraph:
    post:
      tags:
      - "EditHtml"
      summary: "Append a Paragraph to an HTML Document"
      description: "Appends a paragraph to the end of an HTML document."
      operationId: "EditHtml_HtmlAppendParagraph"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "paragraphText"
        in: "header"
        description: "The text content to be used in the paragraph."
        required: true
        type: "string"
        x-exportParamName: "ParagraphText"
      - name: "cssStyle"
        in: "header"
        description: "Optional: The CSS style for the paragraph."
        required: false
        type: "string"
        x-exportParamName: "CssStyle"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/html/extract/links:
    post:
      tags:
      - "EditHtml"
      summary: "Extract resolved link URLs from HTML File"
      description: "Extracts the resolved link URLs, fully-qualified if possible,\
        \ from an input HTML file."
      operationId: "EditHtml_HtmlGetLinks"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "baseUrl"
        in: "header"
        description: "Optional: Base URL of the page, such as https://mydomain.com"
        required: false
        type: "string"
        x-exportParamName: "BaseUrl"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/HtmlGetLinksResponse"
      security:
      - Apikey: []
  /convert/edit/html/append/image/from-url:
    post:
      tags:
      - "EditHtml"
      summary: "Append an Image to an HTML Document from a URL"
      description: "Appends an image to the end of an HTML document using a URL."
      operationId: "EditHtml_HtmlAppendImageFromUrl"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "imageUrl"
        in: "header"
        description: "The URL for the image."
        required: true
        type: "string"
        x-exportParamName: "ImageUrl"
      - name: "cssStyle"
        in: "header"
        description: "Optional: CSS style for the image."
        required: false
        type: "string"
        x-exportParamName: "CssStyle"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/html/append/image/inline:
    post:
      tags:
      - "EditHtml"
      summary: "Append a Base64 Inline Image to an HTML Document"
      description: "Appends a base64 inline image to the end of an HTML document from\
        \ an input file or URL."
      operationId: "EditHtml_HtmlAppendImageInline"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "imageFile"
        in: "formData"
        description: "Optional: Image file to be appended as base64 inline image."
        required: false
        type: "file"
        x-exportParamName: "ImageFile"
      - name: "imageUrl"
        in: "header"
        description: "Optional: Image URL to be appended as base64 inline image."
        required: false
        type: "string"
        x-exportParamName: "ImageUrl"
        x-optionalDataType: "String"
      - name: "cssStyle"
        in: "header"
        description: "Optional: CSS style for the image."
        required: false
        type: "string"
        x-exportParamName: "CssStyle"
        x-optionalDataType: "String"
      - name: "imageExtension"
        in: "header"
        description: "Optional: The extension (JPG, PNG, GIF, etc.) of the image file.\
          \ Recommended if uploading an imageFile directly, instead of using imageUrl.\
          \ If no extension can be determined, will default to JPG."
        required: false
        type: "string"
        x-exportParamName: "ImageExtension"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/html/create/blank:
    post:
      tags:
      - "EditHtml"
      summary: "Create a Blank HTML Document"
      description: "Returns a blank HTML Document format file.  The file is blank,\
        \ with no contents by default.  Use the optional input parameters to add various\
        \ starting elements.  Use additional editing commands such as Append Header,\
        \ Append Paragraph or Append Image from URL to populate the document."
      operationId: "EditHtml_HtmlCreateBlankDocument"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "title"
        in: "header"
        description: "Optional: The title of the HTML document"
        required: false
        type: "string"
        x-exportParamName: "Title"
        x-optionalDataType: "String"
      - name: "cssUrl"
        in: "header"
        description: "Optional: A CSS style URL to be added to the document."
        required: false
        type: "string"
        x-exportParamName: "CssUrl"
        x-optionalDataType: "String"
      - name: "cssInline"
        in: "header"
        description: "Optional: An inline CSS style to be added to the document."
        required: false
        type: "string"
        x-exportParamName: "CssInline"
        x-optionalDataType: "String"
      - name: "javascriptUrl"
        in: "header"
        description: "Optional: Javascript URL to be added to the document."
        required: false
        type: "string"
        x-exportParamName: "JavascriptUrl"
        x-optionalDataType: "String"
      - name: "javascriptInline"
        in: "header"
        description: "Optional: Inline Javascript to be added to the document."
        required: false
        type: "string"
        x-exportParamName: "JavascriptInline"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/encrypt:
    post:
      tags:
      - "EditPdf"
      summary: "Encrypt and password-protect a PDF"
      description: "Encrypt a PDF document with a password.  Set an owner password\
        \ to control owner (editor/creator) permissions, and set a user (reader) password\
        \ to control the viewer of the PDF.  Set the password fields null to omit\
        \ the given password."
      operationId: "EditPdf_Encrypt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "userPassword"
        in: "header"
        description: "Password of a user (reader) of the PDF file"
        required: false
        type: "string"
        x-exportParamName: "UserPassword"
        x-optionalDataType: "String"
      - name: "ownerPassword"
        in: "header"
        description: "Password of a owner (creator/editor) of the PDF file"
        required: false
        type: "string"
        x-exportParamName: "OwnerPassword"
        x-optionalDataType: "String"
      - name: "encryptionKeyLength"
        in: "header"
        description: "Possible values are \"128\" (128-bit RC4 encryption) and \"\
          256\" (256-bit AES encryption).  Default is 256."
        required: false
        type: "string"
        x-exportParamName: "EncryptionKeyLength"
        x-optionalDataType: "String"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/encrypt/set-permissions:
    post:
      tags:
      - "EditPdf"
      summary: "Encrypt, password-protect and set restricted permissions on a PDF"
      description: "Encrypt a PDF document with a password, and set permissions on\
        \ the PDF.  Set an owner password to control owner (editor/creator) permissions\
        \ [required], and set a user (reader) password to control the viewer of the\
        \ PDF [optional].  Set the reader password to null to omit the password. \
        \ Restrict or allow printing, copying content, document assembly, editing\
        \ (read-only), form filling, modification of annotations, and degraded printing\
        \ through document Digital Rights Management (DRM)."
      operationId: "EditPdf_SetPermissions"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "ownerPassword"
        in: "header"
        description: "Password of a owner (creator/editor) of the PDF file (required)"
        required: true
        type: "string"
        x-exportParamName: "OwnerPassword"
      - name: "userPassword"
        in: "header"
        description: "Password of a user (reader) of the PDF file (optional)"
        required: true
        type: "string"
        x-exportParamName: "UserPassword"
      - name: "encryptionKeyLength"
        in: "header"
        description: "Possible values are \"128\" (128-bit RC4 encryption) and \"\
          256\" (256-bit AES encryption).  Default is 256."
        required: false
        type: "string"
        x-exportParamName: "EncryptionKeyLength"
        x-optionalDataType: "String"
      - name: "allowPrinting"
        in: "header"
        description: "Set to false to disable printing through DRM.  Default is true."
        required: false
        type: "boolean"
        x-exportParamName: "AllowPrinting"
        x-optionalDataType: "Bool"
      - name: "allowDocumentAssembly"
        in: "header"
        description: "Set to false to disable document assembly through DRM.  Default\
          \ is true."
        required: false
        type: "boolean"
        x-exportParamName: "AllowDocumentAssembly"
        x-optionalDataType: "Bool"
      - name: "allowContentExtraction"
        in: "header"
        description: "Set to false to disable copying/extracting content out of the\
          \ PDF through DRM.  Default is true."
        required: false
        type: "boolean"
        x-exportParamName: "AllowContentExtraction"
        x-optionalDataType: "Bool"
      - name: "allowFormFilling"
        in: "header"
        description: "Set to false to disable filling out form fields in the PDF through\
          \ DRM.  Default is true."
        required: false
        type: "boolean"
        x-exportParamName: "AllowFormFilling"
        x-optionalDataType: "Bool"
      - name: "allowEditing"
        in: "header"
        description: "Set to false to disable editing in the PDF through DRM (making\
          \ the PDF read-only).  Default is true."
        required: false
        type: "boolean"
        x-exportParamName: "AllowEditing"
        x-optionalDataType: "Bool"
      - name: "allowAnnotations"
        in: "header"
        description: "Set to false to disable annotations and editing of annotations\
          \ in the PDF through DRM.  Default is true."
        required: false
        type: "boolean"
        x-exportParamName: "AllowAnnotations"
        x-optionalDataType: "Bool"
      - name: "allowDegradedPrinting"
        in: "header"
        description: "Set to false to disable degraded printing of the PDF through\
          \ DRM.  Default is true."
        required: false
        type: "boolean"
        x-exportParamName: "AllowDegradedPrinting"
        x-optionalDataType: "Bool"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/decrypt:
    post:
      tags:
      - "EditPdf"
      summary: "Decrypt and password-protect a PDF"
      description: "Decrypt a PDF document with a password.  Decrypted PDF will no\
        \ longer require a password to open."
      operationId: "EditPdf_Decrypt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "password"
        in: "header"
        description: "Valid password for the PDF file"
        required: true
        type: "string"
        x-exportParamName: "Password"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/watermark/text:
    post:
      tags:
      - "EditPdf"
      summary: "Add a text watermark to a PDF"
      description: "Adds a text watermark to a PDF"
      operationId: "EditPdf_WatermarkText"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "watermarkText"
        in: "header"
        description: "Watermark text to add to the PDF (required)"
        required: true
        type: "string"
        x-exportParamName: "WatermarkText"
      - name: "fontName"
        in: "header"
        description: "Font Family Name for the watermark text; default is Times New\
          \ Roman"
        required: false
        type: "string"
        x-exportParamName: "FontName"
        x-optionalDataType: "String"
      - name: "fontSize"
        in: "header"
        description: "Font Size in points of the text; default is 150"
        required: false
        type: "number"
        x-exportParamName: "FontSize"
        x-optionalDataType: "Float32"
      - name: "fontColor"
        in: "header"
        description: "Font color in hexadecimal or HTML color name; default is Red"
        required: false
        type: "string"
        x-exportParamName: "FontColor"
        x-optionalDataType: "String"
      - name: "fontTransparency"
        in: "header"
        description: "Font transparency between 0.0 (completely transparent) to 1.0\
          \ (fully opaque); default is 0.5"
        required: false
        type: "number"
        x-exportParamName: "FontTransparency"
        x-optionalDataType: "Float32"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/rasterize:
    post:
      tags:
      - "EditPdf"
      summary: "Rasterize a PDF to an image-based PDF"
      description: "Rasterize a PDF into an image-based PDF.  The output is a PDF\
        \ where each page is comprised of a high-resolution image, with all text,\
        \ figures and other components removed."
      operationId: "EditPdf_Rasterize"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/pages/delete:
    post:
      tags:
      - "EditPdf"
      summary: "Remove, delete pages from a PDF document"
      description: "Remove one or more pages from a PDF document"
      operationId: "EditPdf_DeletePages"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "pageStart"
        in: "header"
        description: "Page number (1 based) to start deleting pages from (inclusive)."
        required: true
        type: "integer"
        x-exportParamName: "PageStart"
      - name: "pageEnd"
        in: "header"
        description: "Page number (1 based) to stop deleting pages from (inclusive)."
        required: true
        type: "integer"
        x-exportParamName: "PageEnd"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/pages/insert:
    post:
      tags:
      - "EditPdf"
      summary: "Insert, copy pages from one PDF document into another"
      description: "Copy one or more pages from one PDF document (source document)\
        \ and insert them into a second PDF document (destination document)."
      operationId: "EditPdf_InsertPages"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "sourceFile"
        in: "formData"
        description: "Source PDF file to copy pages from."
        required: true
        type: "file"
        x-exportParamName: "SourceFile"
      - name: "destinationFile"
        in: "formData"
        description: "Destination PDF file to copy pages into."
        required: true
        type: "file"
        x-exportParamName: "DestinationFile"
      - name: "pageStartSource"
        in: "header"
        description: "Page number (1 based) to start copying pages from (inclusive)\
          \ in the Source file."
        required: true
        type: "integer"
        x-exportParamName: "PageStartSource"
      - name: "pageEndSource"
        in: "header"
        description: "Page number (1 based) to stop copying pages pages from (inclusive)\
          \ in the Source file."
        required: true
        type: "integer"
        x-exportParamName: "PageEndSource"
      - name: "pageInsertBeforeDesitnation"
        in: "header"
        description: "Page number (1 based) to insert the pages before in the Destination\
          \ file."
        required: true
        type: "integer"
        x-exportParamName: "PageInsertBeforeDesitnation"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/pages/get-text:
    post:
      tags:
      - "EditPdf"
      summary: "Get text in a PDF document by page"
      description: "Gets the text in a PDF by page"
      operationId: "EditPdf_GetPdfTextByPages"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "textFormattingMode"
        in: "header"
        description: "Optional; specify how whitespace should be handled when converting\
          \ the document to text.  Possible values are 'preserveWhitespace' which\
          \ will attempt to preserve whitespace in the document and relative positioning\
          \ of text within the document, and 'minimizeWhitespace' which will not insert\
          \ additional spaces into the document in most cases.  Default is 'preserveWhitespace'."
        required: false
        type: "string"
        x-exportParamName: "TextFormattingMode"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/PdfTextByPageResult"
      security:
      - Apikey: []
  /convert/edit/pdf/pages/rotate/all:
    post:
      tags:
      - "EditPdf"
      summary: "Rotate all pages in a PDF document"
      description: "Rotate all of the pages in a PDF document by a multiple of 90\
        \ degrees"
      operationId: "EditPdf_RotateAllPages"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "rotationAngle"
        in: "header"
        description: "The angle to rotate the page in degrees, must be a multiple\
          \ of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc."
        required: true
        type: "integer"
        x-exportParamName: "RotationAngle"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/pages/rotate/page-range:
    post:
      tags:
      - "EditPdf"
      summary: "Rotate a range, subset of pages in a PDF document"
      description: "Rotate a range of specific pages in a PDF document by a multiple\
        \ of 90 degrees"
      operationId: "EditPdf_RotatePageRange"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "rotationAngle"
        in: "header"
        description: "The angle to rotate the page in degrees, must be a multiple\
          \ of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc."
        required: true
        type: "integer"
        x-exportParamName: "RotationAngle"
      - name: "pageStart"
        in: "header"
        description: "Page number (1 based) to start rotating pages from (inclusive)."
        required: true
        type: "integer"
        x-exportParamName: "PageStart"
      - name: "pageEnd"
        in: "header"
        description: "Page number (1 based) to stop rotating pages from (inclusive)."
        required: true
        type: "integer"
        x-exportParamName: "PageEnd"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/get-metadata:
    post:
      tags:
      - "EditPdf"
      summary: "Get PDF document metadata"
      description: "Returns the metadata from the PDF document, including Title, Author,\
        \ etc."
      operationId: "EditPdf_GetMetadata"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/PdfMetadata"
      security:
      - Apikey: []
  /convert/edit/pdf/set-metadata:
    post:
      tags:
      - "EditPdf"
      summary: "Sets PDF document metadata"
      description: "Sets (writes) metadata into the input PDF document, including\
        \ Title, Author, etc."
      operationId: "EditPdf_SetMetadata"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/SetPdfMetadataRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/form/get-fields:
    post:
      tags:
      - "EditPdf"
      summary: "Gets PDF Form fields and values"
      description: "Encrypt a PDF document with a password.  Set an owner password\
        \ to control owner (editor/creator) permissions, and set a user (reader) password\
        \ to control the viewer of the PDF.  Set the password fields null to omit\
        \ the given password."
      operationId: "EditPdf_GetFormFields"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/PdfFormFields"
      security:
      - Apikey: []
  /convert/edit/pdf/form/set-fields:
    post:
      tags:
      - "EditPdf"
      summary: "Sets ands fills PDF Form field values"
      description: "Fill in the form fields in a PDF form with specific values.  Use\
        \ form/get-fields to enumerate the available fields and their data types in\
        \ an input form."
      operationId: "EditPdf_SetFormFields"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "fieldValues"
        required: true
        schema:
          $ref: "#/definitions/SetPdfFormFieldsRequest"
        x-exportParamName: "FieldValues"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/annotations/list:
    post:
      tags:
      - "EditPdf"
      summary: "Get PDF annotations, including comments in the document"
      description: "Enumerates the annotations, including comments and notes, in a\
        \ PDF document."
      operationId: "EditPdf_GetAnnotations"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GetPdfAnnotationsResult"
      security:
      - Apikey: []
  /convert/edit/pdf/annotations/add-item:
    post:
      tags:
      - "EditPdf"
      summary: "Add one or more PDF annotations, comments in the PDF document"
      description: "Adds one or more annotations, comments to a PDF document."
      operationId: "EditPdf_AddAnnotations"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/AddPdfAnnotationRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/annotations/remove-item:
    post:
      tags:
      - "EditPdf"
      summary: "Remove a specific PDF annotation, comment in the document"
      description: "Removes a specific annotation in a PDF document, using the AnnotationIndex.\
        \  To enumerate AnnotationIndex for all of the annotations in the PDF document,\
        \ use the /edit/pdf/annotations/list API."
      operationId: "EditPdf_RemoveAnnotationItem"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "annotationIndex"
        in: "header"
        description: "The 0-based index of the annotation in the document"
        required: true
        type: "integer"
        x-exportParamName: "AnnotationIndex"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/annotations/remove-all:
    post:
      tags:
      - "EditPdf"
      summary: "Remove all PDF annotations, including comments in the document"
      description: "Removes all of the annotations, including comments and notes,\
        \ in a PDF document."
      operationId: "EditPdf_RemoveAllAnnotations"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/resize:
    post:
      tags:
      - "EditPdf"
      summary: "Change PDF Document's Paper Size"
      description: "Resizes a PDF document's paper size."
      operationId: "EditPdf_Resize"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "paperSize"
        in: "header"
        description: "The desired paper size for the resized PDF document. Size ranges\
          \ from A7 (smallest) to A0 (largest)."
        required: true
        type: "string"
        x-exportParamName: "PaperSize"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/optimize/pdf-a:
    post:
      tags:
      - "EditPdf"
      summary: "Convert a PDF file to PDF/A"
      description: "Converts the input PDF file to a PDF/A-1b or PDF/A-2b standardized\
        \ PDF."
      operationId: "EditPdf_ConvertToPdfA"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "conformanceLevel"
        in: "header"
        description: "Optional: Select the conformance level for PDF/A - specify '1b'\
          \ for PDF/A-1b or specify '2b' for PDF/A-2b; default is PDF/A-1b"
        required: false
        type: "string"
        x-exportParamName: "ConformanceLevel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/optimize/reduce-file-size:
    post:
      tags:
      - "EditPdf"
      summary: "Reduce the file size and optimize a PDF"
      description: "Reduces the file size and optimizes the content of a PDF to minimize\
        \ its file size."
      operationId: "EditPdf_ReduceFileSize"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "quality"
        in: "header"
        description: "Quality level for the images in the PDF, ranging from 0.0 (low\
          \ quality) to 1.0 (high quality); default is 0.3"
        required: false
        type: "number"
        x-exportParamName: "Quality"
        x-optionalDataType: "Float32"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/pdf/optimize/linearize:
    post:
      tags:
      - "EditPdf"
      summary: "Linearize and optimize a PDF for streaming download"
      description: "Linearizes the content of a PDF to optimize it for streaming download,\
        \ particularly over web streaming."
      operationId: "EditPdf_Linearize"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/edit/text/encoding/base64/detect:
    post:
      tags:
      - "EditText"
      summary: "Detect, check if text string is base 64 encoded"
      description: "Checks, detects if input string is base 64 encoded"
      operationId: "EditText_Base64Detect"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/Base64DetectRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Base64DetectResponse"
      security:
      - Apikey: []
  /convert/edit/text/encoding/base64/encode:
    post:
      tags:
      - "EditText"
      summary: "Base 64 encode, convert binary or file data to a text string"
      description: "Encodes / converts binary or file data to a text string"
      operationId: "EditText_Base64Encode"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/Base64EncodeRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Base64EncodeResponse"
      security:
      - Apikey: []
  /convert/edit/text/encoding/base64/decode:
    post:
      tags:
      - "EditText"
      summary: "Base 64 decode, convert base 64 string to binary content"
      description: "Decodes / converts base 64 UTF-8 text string to binary content"
      operationId: "EditText_Base64Decode"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/Base64DecodeRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Base64DecodeResponse"
      security:
      - Apikey: []
  /convert/edit/text/encoding/detect:
    post:
      tags:
      - "EditText"
      summary: "Detect text encoding of file"
      description: "Checks text encoding of file"
      operationId: "EditText_TextEncodingDetect"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TextEncodingDetectResponse"
      security:
      - Apikey: []
  /convert/edit/text/find/string:
    post:
      tags:
      - "EditText"
      summary: "Find a string in text input"
      description: "Finds all occurrences of the input string in the input content,\
        \ and returns the matches"
      operationId: "EditText_FindSimple"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/FindStringSimpleRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FindStringSimpleResponse"
      security:
      - Apikey: []
  /convert/edit/text/find/regex:
    post:
      tags:
      - "EditText"
      summary: "Find a regular expression regex in text input"
      description: "Find all occurrences of the input regular expression in the input\
        \ content, and returns the matches"
      operationId: "EditText_FindRegex"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/FindStringRegexRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FindStringRegexResponse"
      security:
      - Apikey: []
  /convert/edit/text/replace/string:
    post:
      tags:
      - "EditText"
      summary: "Replace a string in text with another string value"
      description: "Replaces all occurrences of the input string in the input content,\
        \ and returns the result"
      operationId: "EditText_ReplaceSimple"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/ReplaceStringSimpleRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ReplaceStringSimpleResponse"
      security:
      - Apikey: []
  /convert/edit/text/replace/regex:
    post:
      tags:
      - "EditText"
      summary: "Replace a string in text with a regex regular expression string"
      description: "Replaces all occurrences of the input regular expression regex\
        \ string in the input content, and returns the result"
      operationId: "EditText_ReplaceRegex"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/ReplaceStringRegexRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ReplaceStringRegexResponse"
      security:
      - Apikey: []
  /convert/edit/text/line-endings/detect:
    post:
      tags:
      - "EditText"
      summary: "Detect line endings of a text file"
      description: "Detect line ending type (Windows, Unix or Mac) of an input file."
      operationId: "EditText_DetectLineEndings"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DetectLineEndingsResponse"
      security:
      - Apikey: []
  /convert/edit/text/line-endings/change:
    post:
      tags:
      - "EditText"
      summary: "Set, change line endings of a text file"
      description: "Sets the line ending type of a text file; set to Windows, Unix\
        \ or Mac."
      operationId: "EditText_ChangeLineEndings"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "lineEndingType"
        in: "header"
        description: "Required; 'Windows' will use carriage return and line feed,\
          \ 'Unix' will use newline, and 'Mac' will use carriage return"
        required: true
        type: "string"
        x-exportParamName: "LineEndingType"
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ChangeLineEndingResponse"
      security:
      - Apikey: []
  /convert/edit/text/remove/html:
    post:
      tags:
      - "EditText"
      summary: "Remove HTML from text string"
      description: "Removes HTML from text, leaving behind only text.  Formatted text\
        \ will become plain text.  Important for protecting against HTML and Cross-Site-Scripting\
        \ attacks."
      operationId: "EditText_RemoveHtml"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/RemoveHtmlFromTextRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RemoveHtmlFromTextResponse"
      security:
      - Apikey: []
  /convert/edit/text/remove/whitespace/all:
    post:
      tags:
      - "EditText"
      summary: "Remove whitespace from text string"
      description: "Removes all whitespace from text, leaving behind only non-whitespace\
        \ characters.  Whitespace includes newlines, spaces and other whitespace characters."
      operationId: "EditText_RemoveAllWhitespace"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/RemoveWhitespaceFromTextRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RemoveWhitespaceFromTextResponse"
      security:
      - Apikey: []
  /convert/edit/text/remove/whitespace/trim:
    post:
      tags:
      - "EditText"
      summary: "Trim leading and trailing whitespace from text string"
      description: "Trim leading and trailing whitespace from text, leaving behind\
        \ a trimmed string.  Whitespace includes newlines, spaces and other whitespace\
        \ characters."
      operationId: "EditText_TrimWhitespace"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/RemoveWhitespaceFromTextRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RemoveWhitespaceFromTextResponse"
      security:
      - Apikey: []
  /convert/merge/docx:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Two Word DOCX Together"
      description: "Combine two Office Word Documents (docx) into one single Office\
        \ Word document"
      operationId: "MergeDocument_Docx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on (more than 2 can\
          \ be supplied)."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/docx/multi:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Multple Word DOCX Together"
      description: "Combine multiple Office Word Documents (docx) into one single\
        \ Office Word document"
      operationId: "MergeDocument_DocxMulti"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/pptx:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Two PowerPoint PPTX Together"
      description: "Combine two Office PowerPoint presentations (pptx) into one single\
        \ Office PowerPoint presentation"
      operationId: "MergeDocument_Pptx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on (more than 2 can\
          \ be supplied)."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/pptx/multi:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Multple PowerPoint PPTX Together"
      description: "Combine multiple Office PowerPoint presentations (pptx) into one\
        \ single Office PowerPoint presentation"
      operationId: "MergeDocument_PptxMulti"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/xlsx:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Two Excel XLSX Together"
      description: "Combine two Office Excel spreadsheets (xlsx) into a single Office\
        \ Excel spreadsheet"
      operationId: "MergeDocument_Xlsx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on (more than 2 can\
          \ be supplied)."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/xlsx/multi:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Multple Excel XLSX Together"
      description: "Combine multiple Office Excel spreadsheets (xlsx) into a single\
        \ Office Excel spreadsheet"
      operationId: "MergeDocument_XlsxMulti"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/pdf:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Two PDF Files Together"
      description: "Combine two PDF files (pdf) into a single PDF document, preserving\
        \ the order of the input documents in the combined document"
      operationId: "MergeDocument_Pdf"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on (more than 2 can\
          \ be supplied)."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/pdf/multi:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Multple PDF Files Together"
      description: "Combine multiple PDF files (pdf) into a single PDF document, preserving\
        \ the order of the input documents in the combined document"
      operationId: "MergeDocument_PdfMulti"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/html:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Two HTML (HTM) Files Together"
      description: "Combine two HTML (.HTM) files into a single text document, preserving\
        \ the order of the input documents in the combined document by stacking them\
        \ vertically.  The title will be taken from the first document."
      operationId: "MergeDocument_Html"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on (more than 2 can\
          \ be supplied)."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/html/multi:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Multple HTML (HTM) Files Together"
      description: "Combine multiple HTML (.HTM) files into a single text document,\
        \ preserving the order of the input documents in the combined document by\
        \ stacking them vertically.  The title will be taken from the first document."
      operationId: "MergeDocument_HtmlMulti"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/txt:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Two Text (TXT) Files Together"
      description: "Combine two Text (.TXT) files into a single text document, preserving\
        \ the order of the input documents in the combined document by stacking them\
        \ vertically."
      operationId: "MergeDocument_Txt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on (more than 2 can\
          \ be supplied)."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
      security:
      - Apikey: []
  /convert/merge/txt/multi:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Multple Text (TXT) Files Together"
      description: "Combine multiple Text (.TXT) files into a single text document,\
        \ preserving the order of the input documents in the combined document by\
        \ stacking them vertically."
      operationId: "MergeDocument_TxtMulti"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/png/vertical:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Two PNG Files Together"
      description: "Combine two PNG files into a single PNG document, preserving the\
        \ order of the input documents in the combined document by stacking them vertically"
      operationId: "MergeDocument_Png"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on (more than 2 can\
          \ be supplied)."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/merge/png/vertical/multi:
    post:
      tags:
      - "MergeDocument"
      summary: "Merge Multple PNG Files Together"
      description: "Combine multiple PNG files into a single PNG document, preserving\
        \ the order of the input documents in the combined document by stacking them\
        \ vertically"
      operationId: "MergeDocument_PngMulti"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/split/docx:
    post:
      tags:
      - "SplitDocument"
      summary: "Split a single Word Document DOCX into Separate Documents by Page"
      description: "Split a Word DOCX Document, comprised of multiple pages into separate\
        \ Word DOCX document files, with each containing exactly one page."
      operationId: "SplitDocument_Docx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "returnDocumentContents"
        in: "header"
        description: "Set to true to return the contents of each Worksheet directly,\
          \ set to false to only return URLs to each resulting document.  Default\
          \ is true."
        required: false
        type: "boolean"
        x-exportParamName: "ReturnDocumentContents"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SplitDocxDocumentResult"
      security:
      - Apikey: []
  /convert/split/xlsx:
    post:
      tags:
      - "SplitDocument"
      summary: "Split a single Excel XLSX into Separate Worksheets"
      description: "Split an Excel XLSX Spreadsheet, comprised of multiple Worksheets\
        \ (or Tabs) into separate Excel XLSX spreadsheet files, with each containing\
        \ exactly one Worksheet."
      operationId: "SplitDocument_Xlsx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "returnDocumentContents"
        in: "header"
        description: "Set to true to return the contents of each Worksheet directly,\
          \ set to false to only return URLs to each resulting worksheet.  Default\
          \ is true."
        required: false
        type: "boolean"
        x-exportParamName: "ReturnDocumentContents"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SplitXlsxWorksheetResult"
      security:
      - Apikey: []
  /convert/split/pptx:
    post:
      tags:
      - "SplitDocument"
      summary: "Split a single PowerPoint Presentation PPTX into Separate Slides"
      description: "Split an PowerPoint PPTX Presentation, comprised of multiple slides\
        \ into separate PowerPoint PPTX presentation files, with each containing exactly\
        \ one slide."
      operationId: "SplitDocument_Pptx"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "returnDocumentContents"
        in: "header"
        description: "Set to true to return the contents of each presentation directly,\
          \ set to false to only return URLs to each resulting presentation.  Default\
          \ is true."
        required: false
        type: "boolean"
        x-exportParamName: "ReturnDocumentContents"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SplitPptxPresentationResult"
      security:
      - Apikey: []
  /convert/split/pdf:
    post:
      tags:
      - "SplitDocument"
      summary: "Split a PDF file into separate PDF files, one per page"
      description: "Split an input PDF file into separate pages, comprised of one\
        \ PDF file per page."
      operationId: "SplitDocument_PdfByPage"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "returnDocumentContents"
        in: "header"
        description: "Set to true to directly return all of the document contents\
          \ in the DocumentContents field; set to false to return contents as temporary\
          \ URLs (more efficient for large operations).  Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "ReturnDocumentContents"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SplitPdfResult"
      security:
      - Apikey: []
  /convert/split/txt/by-line:
    post:
      tags:
      - "SplitDocument"
      summary: "Split a single Text file (txt) into lines"
      description: "Split a Text (txt) Document by line, returning each line separately\
        \ in order.  Supports multiple types of newlines."
      operationId: "SplitDocument_TxtByLine"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SplitTextDocumentByLinesResult"
      security:
      - Apikey: []
  /convert/split/txt/by-string:
    post:
      tags:
      - "SplitDocument"
      summary: "Split a single Text file (txt) by a string delimiter"
      description: "Split a Text (txt) Document by a string delimiter, returning each\
        \ component of the string as an array of strings."
      operationId: "SplitDocument_TxtByString"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "splitDelimiter"
        in: "header"
        description: "Required; String to split up the input file on"
        required: true
        type: "string"
        x-exportParamName: "SplitDelimiter"
      - name: "skipEmptyElements"
        in: "header"
        description: "Optional; If true, empty elements will be skipped in the output"
        required: false
        type: "boolean"
        x-exportParamName: "SkipEmptyElements"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SplitTextDocumentByStringResult"
      security:
      - Apikey: []
  /convert/transform/docx/replace-all:
    post:
      tags:
      - "TransformDocument"
      summary: "Replace string in Word DOCX document"
      description: "Replace all instances of a string in an Office Word Document (docx)"
      operationId: "TransformDocument_DocxReplace"
      consumes: []
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API (part of EditDocumentApi)\
          \ to upload a document and pass in the secure URL result from that operation\
          \ as the URL here (this URL is not public)."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "matchString"
        in: "header"
        description: "String to search for and match against, to be replaced"
        required: true
        type: "string"
        x-exportParamName: "MatchString"
      - name: "replaceString"
        in: "header"
        description: "String to replace the matched values with"
        required: true
        type: "string"
        x-exportParamName: "ReplaceString"
      - name: "matchCase"
        in: "header"
        description: "Optional: True if the case should be matched, false for case\
          \ insensitive match. Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "MatchCase"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/transform/pptx/replace-all:
    post:
      tags:
      - "TransformDocument"
      summary: "Replace string in PowerPoint PPTX presentation"
      description: "Replace all instances of a string in an Office PowerPoint Document\
        \ (pptx)"
      operationId: "TransformDocument_PptxReplace"
      consumes: []
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Optional: Input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile"
      - name: "inputFileUrl"
        in: "header"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API (part of EditDocumentApi)\
          \ to upload a document and pass in the secure URL result from that operation\
          \ as the URL here (this URL is not public)."
        required: false
        type: "string"
        x-exportParamName: "InputFileUrl"
        x-optionalDataType: "String"
      - name: "matchString"
        in: "header"
        description: "String to search for and match against, to be replaced"
        required: true
        type: "string"
        x-exportParamName: "MatchString"
      - name: "replaceString"
        in: "header"
        description: "String to replace the matched values with"
        required: true
        type: "string"
        x-exportParamName: "ReplaceString"
      - name: "matchCase"
        in: "header"
        description: "Optional: True if the case should be matched, false for case\
          \ insensitive match. Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "MatchCase"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/validate/autodetect:
    post:
      tags:
      - "ValidateDocument"
      summary: "Autodetect content type and validate"
      description: "Automatically detect the type of content, verify and validate\
        \ that the content is indeed fully valid at depth, and then report the validation\
        \ result."
      operationId: "ValidateDocument_AutodetectValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AutodetectDocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/docx:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a Word document (DOCX)"
      description: "Validate a Word document (DOCX); if the document is not valid,\
        \ identifies the errors in the document"
      operationId: "ValidateDocument_DocxValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/image:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate an Image File"
      description: "Validate an image file; if the document is not valid, identifies\
        \ the errors in the document.  Formats supported include AAI, ART, ARW, AVS,\
        \ BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT,\
        \ DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2,\
        \ EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC,\
        \ HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG,\
        \ JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD,\
        \ PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG,\
        \ PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB,\
        \ RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF,\
        \ TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F,\
        \ YCbCr, YCbCrA, YUV."
      operationId: "ValidateDocument_ImageValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/png:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a PNG File"
      description: "Validate a PNG image file; if the document is not valid, identifies\
        \ the errors in the document."
      operationId: "ValidateDocument_PngValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/jpg:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a JPG File"
      description: "Validate a JPEG image file; if the document is not valid, identifies\
        \ the errors in the document.."
      operationId: "ValidateDocument_JpgValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/xlsx:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a Excel document (XLSX)"
      description: "Validate a Excel document (XLSX); if the document is not valid,\
        \ identifies the errors in the document"
      operationId: "ValidateDocument_XlsxValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/csv:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a CSV file document (CSV)"
      description: "Validate a CSV file document (CSV); if the document is not valid,\
        \ identifies the errors in the document"
      operationId: "ValidateDocument_CsvValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/pptx:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a PowerPoint presentation (PPTX)"
      description: "Validate a PowerPoint presentation (PPTX); if the document is\
        \ not valid, identifies the errors in the document"
      operationId: "ValidateDocument_PptxValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/zip:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a Zip Archive file (zip)"
      description: "Validate a Zip archive file (ZIP)"
      operationId: "ValidateDocument_ZipValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/gzip:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a GZip Archive file (gzip or gz)"
      description: "Validate a GZip archive file (GZIP or GZ)"
      operationId: "ValidateDocument_GZipValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/rar:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a RAR Archive file (RAR)"
      description: "Validate a RAR archive file (RAR)"
      operationId: "ValidateDocument_RarValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/tar:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a TAR Tarball Archive file (TAR)"
      description: "Validate a TAR tarball archive file (TAR)"
      operationId: "ValidateDocument_TarValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/pdf:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a PDF document file"
      description: "Validate a PDF document; if the document is not valid, identifies\
        \ the errors in the document.  Also checks if the PDF is password protected."
      operationId: "ValidateDocument_PdfValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/xml:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate an XML file"
      description: "Validate an XML document file; if the document is not valid, identifies\
        \ the errors in the document"
      operationId: "ValidateDocument_XmlValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/xml/xxe-threats:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate an XML file for XML External Entity (XXE) threats"
      description: "Validate an XML document file for XML External Entity (XXE) threats;\
        \ if the document is not valid, identifies the errors in the document.  XXE\
        \ threats are a type of threat that exploits vulnerabilities in the XML standard\
        \ relating to external or local entity URIs in XML documents."
      operationId: "ValidateDocument_XmlXxeThreatValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/XxeThreatDetectionResult"
      security:
      - Apikey: []
  /convert/validate/html:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate an HTML file"
      description: "Validate an HTML document file; if the document is not valid,\
        \ identifies the errors in the document"
      operationId: "ValidateDocument_HtmlValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/html/ssrf-threat-check:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate an HTML file and checks for SSRF threats"
      description: "Validate an HTML document file and checks for SSRF (Server-side\
        \ Request Forgery) threats in the file; if the document is not valid, identifies\
        \ the errors in the document"
      operationId: "ValidateDocument_HtmlSsrfValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/HtmlSsrfThreatCheckResult"
      security:
      - Apikey: []
  /convert/validate/txt:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate an TXT file"
      description: "Validate an TXT document file; if the document is not valid, identifies\
        \ the errors in the document"
      operationId: "ValidateDocument_TxtValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/json:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate a JSON file"
      description: "Validate a JSON (JavaScript Object Notation) document file; if\
        \ the document is not valid, identifies the errors in the document"
      operationId: "ValidateDocument_JsonValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/executable:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate if a file is executable"
      description: "Validate if an input file is a binary executable file; if the\
        \ document is not valid"
      operationId: "ValidateDocument_ExecutableValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/eml:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate if an EML file is executable"
      description: "Validate if an input file is an EML email file; if the document\
        \ is not valid"
      operationId: "ValidateDocument_EmlValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/validate/msg:
    post:
      tags:
      - "ValidateDocument"
      summary: "Validate if an MSG file is executable"
      description: "Validate if an input file is an MSG email file; if the document\
        \ is not valid"
      operationId: "ValidateDocument_MsgValidation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DocumentValidationResult"
      security:
      - Apikey: []
  /convert/viewer/create/web/simple:
    post:
      tags:
      - "ViewerTools"
      summary: "Create a web-based viewer"
      description: "Creates an HTML embed code for a simple web-based viewer of a\
        \ document; supports Office document types and PDF."
      operationId: "ViewerTools_CreateSimple"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "width"
        in: "header"
        description: "Optional; width of the output viewer in pixels"
        required: false
        type: "integer"
        x-exportParamName: "Width"
        x-optionalDataType: "Int32"
      - name: "height"
        in: "header"
        description: "Optional; height of the output viewer in pixels"
        required: false
        type: "integer"
        x-exportParamName: "Height"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ViewerResponse"
      security:
      - Apikey: []
  /convert/archive/zip/create:
    post:
      tags:
      - "ZipArchive"
      summary: "Compress files to create a new zip archive"
      description: "Create a new zip archive by compressing input files."
      operationId: "ZipArchive_ZipCreate"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/archive/zip/create/encrypted:
    post:
      tags:
      - "ZipArchive"
      summary: "Compress files to create a new, encrypted and password-protected zip\
        \ archive"
      description: "Create a new zip archive by compressing input files, and also\
        \ applies encryption and password protection to the zip."
      operationId: "ZipArchive_ZipCreateEncrypted"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "password"
        in: "header"
        description: "Password to place on the Zip file; the longer the password,\
          \ the more secure"
        required: true
        type: "string"
        x-exportParamName: "Password"
      - name: "encryptionAlgorithm"
        in: "header"
        description: "Encryption algorithm to use; possible values are AES-256 (recommended),\
          \ AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm).\
          \ Default is AES-256."
        required: false
        type: "string"
        x-exportParamName: "EncryptionAlgorithm"
        x-optionalDataType: "String"
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      - name: "inputFile2"
        in: "formData"
        description: "Second input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile2"
      - name: "inputFile3"
        in: "formData"
        description: "Third input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile3"
      - name: "inputFile4"
        in: "formData"
        description: "Fourth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile4"
      - name: "inputFile5"
        in: "formData"
        description: "Fifth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile5"
      - name: "inputFile6"
        in: "formData"
        description: "Sixth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile6"
      - name: "inputFile7"
        in: "formData"
        description: "Seventh input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile7"
      - name: "inputFile8"
        in: "formData"
        description: "Eighth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile8"
      - name: "inputFile9"
        in: "formData"
        description: "Ninth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile9"
      - name: "inputFile10"
        in: "formData"
        description: "Tenth input file to perform the operation on."
        required: false
        type: "file"
        x-exportParamName: "InputFile10"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
            title: "OutputContent"
            format: "byte"
            description: "Output file content from the operation"
      security:
      - Apikey: []
  /convert/archive/zip/create/quarantine:
    post:
      tags:
      - "ZipArchive"
      summary: "Create an encrypted zip file to quarantine a dangerous file"
      description: "Create a new zip archive by compressing input files, and also\
        \ applies encryption and password protection to the zip, for the purposes\
        \ of quarantining the underlyikng file."
      operationId: "ZipArchive_ZipCreateQuarantine"
      consumes: []
      produces:
      - "application/octet-stream"
      parameters:
      - name: "password"
        in: "header"
        description: "Password to place on the Zip file; the longer the password,\
          \ the more secure"
        required: true
        type: "string"
        x-exportParamName: "Password"
      - name: "encryptionAlgorithm"
        in: "header"
        description: "Encryption algorithm to use; possible values are AES-256 (recommended),\
          \ AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm).\
          \ Default is AES-256."
        required: false
        type: "string"
        x-exportParamName: "EncryptionAlgorithm"
        x-optionalDataType: "String"
      - name: "inputFile1"
        in: "formData"
        description: "First input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile1"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
      security:
      - Apikey: []
  /convert/archive/zip/create/advanced:
    post:
      tags:
      - "ZipArchive"
      summary: "Compress files and folders to create a new zip archive with advanced\
        \ options"
      description: "Create a new zip archive by compressing input files, folders and\
        \ leverage advanced options to control the structure of the resulting zip\
        \ archive."
      operationId: "ZipArchive_ZipCreateAdvanced"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "request"
        description: "Input request"
        required: true
        schema:
          $ref: "#/definitions/CreateZipArchiveRequest"
        x-exportParamName: "Request"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
      security:
      - Apikey: []
  /convert/archive/zip/extract:
    post:
      tags:
      - "ZipArchive"
      summary: "Extract, decompress files and folders from a zip archive"
      description: "Extracts a zip archive by decompressing files, and folders."
      operationId: "ZipArchive_ZipExtract"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ZipExtractResponse"
      security:
      - Apikey: []
  /convert/archive/zip/encrypt/advanced:
    post:
      tags:
      - "ZipArchive"
      summary: "Encrypt and password protect a zip file"
      description: "Encrypts and password protects an existing zip file with the specified\
        \ password and encryption algorithm"
      operationId: "ZipArchive_ZipEncryptAdvanced"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "encryptionRequest"
        description: "Encryption request"
        required: true
        schema:
          $ref: "#/definitions/ZipEncryptionAdvancedRequest"
        x-exportParamName: "EncryptionRequest"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
      security:
      - Apikey: []
  /convert/archive/zip/decrypt:
    post:
      tags:
      - "ZipArchive"
      summary: "Decrypt and remove password protection on a zip file"
      description: "Decrypts and removes password protection from an encrypted zip\
        \ file with the specified password"
      operationId: "ZipArchive_ZipDecrypt"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "inputFile"
        in: "formData"
        description: "Input file to perform the operation on."
        required: true
        type: "file"
        x-exportParamName: "InputFile"
      - name: "zipPassword"
        in: "header"
        description: "Required; Password for the input archive"
        required: true
        type: "string"
        x-exportParamName: "ZipPassword"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
      security:
      - Apikey: []
securityDefinitions:
  Apikey:
    description: "API Key Authentication"
    type: "apiKey"
    name: "Apikey"
    in: "header"
definitions:
  XmlFilterWithXPathResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      XmlNodes:
        type: "array"
        description: "Matching selected XML nodes as strings"
        items:
          type: "string"
      ResultCount:
        type: "integer"
        format: "int32"
        description: "Count of the matching results"
    description: "Result of performing a filter operation on XML input using XPath"
    example:
      XmlNodes:
      - "XmlNodes"
      - "XmlNodes"
      ResultCount: 0
      Successful: true
  XmlQueryWithXQueryResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ResultingXml:
        type: "string"
        description: "Resulting XML result output"
      ErrorMessage:
        type: "string"
        description: "If an error occurs, additional details on the error"
    description: "Result of performing an XQuery operation on an XML document."
    example:
      ResultingXml: "ResultingXml"
      ErrorMessage: "ErrorMessage"
      Successful: true
  XmlQueryWithXQueryMultiResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ResultingXml:
        type: "string"
        description: "Resulting XML result output"
      ErrorMessage:
        type: "string"
        description: "If an error occurs, additional details on the error"
    description: "Result of performing an XQuery operation on multiple XML documents."
    example:
      ResultingXml: "ResultingXml"
      ErrorMessage: "ErrorMessage"
      Successful: true
  XmlSetValueWithXPathResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ResultingXmlDocument:
        type: "string"
        description: "Resulting, modified XML document"
      NodesEditedCount:
        type: "integer"
        format: "int32"
        description: "Count of the matching results"
    description: "Result of performing a set value operation on XML input using XPath"
    example:
      NodesEditedCount: 0
      ResultingXmlDocument: "ResultingXmlDocument"
      Successful: true
  XmlReplaceWithXPathResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ResultingXmlDocument:
        type: "string"
        description: "Resulting, modified XML document"
      NodesEditedCount:
        type: "integer"
        format: "int32"
        description: "Count of the matching results"
    description: "Result of performing a replace node operation on XML input using\
      \ XPath"
    example:
      NodesEditedCount: 0
      ResultingXmlDocument: "ResultingXmlDocument"
      Successful: true
  XmlAddChildWithXPathResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ResultingXmlDocument:
        type: "string"
        description: "Resulting, modified XML document"
      NodesEditedCount:
        type: "integer"
        format: "int32"
        description: "Count of the matching results"
    description: "Result of performing a add child node operation on XML input using\
      \ XPath"
    example:
      NodesEditedCount: 0
      ResultingXmlDocument: "ResultingXmlDocument"
      Successful: true
  XmlAddAttributeWithXPathResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ResultingXmlDocument:
        type: "string"
        description: "Resulting, modified XML document"
      NodesEditedCount:
        type: "integer"
        format: "int32"
        description: "Count of the matching results"
    description: "Result of performing a add attribute node operation on XML input\
      \ using XPath"
    example:
      NodesEditedCount: 0
      ResultingXmlDocument: "ResultingXmlDocument"
      Successful: true
  XmlRemoveWithXPathResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ResultingXmlDocument:
        type: "string"
        description: "Resulting, modified XML document with matching nodes removed\
          \ as a string"
      XmlNodesRemoved:
        type: "array"
        description: "Matching selected XML nodes as strings"
        items:
          type: "string"
      NodesRemovedCount:
        type: "integer"
        format: "int32"
        description: "Count of the matching results"
    description: "Result of performing a filter operation on XML input using XPath"
    example:
      XmlNodesRemoved:
      - "XmlNodesRemoved"
      - "XmlNodesRemoved"
      ResultingXmlDocument: "ResultingXmlDocument"
      Successful: true
      NodesRemovedCount: 0
  XmlRemoveAllChildrenWithXPathResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ResultingXmlDocument:
        type: "string"
        description: "Resulting, modified XML document"
      NodesEditedCount:
        type: "integer"
        format: "int32"
        description: "Count of the matching results"
    description: "Result of performing a remove all child nodes operation on XML input\
      \ using XPath"
    example:
      NodesEditedCount: 0
      ResultingXmlDocument: "ResultingXmlDocument"
      Successful: true
  TextConversionResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      TextResult:
        type: "string"
        description: "Plain Text (TXT) format conversion result of the input document.\
          \  The text result is returned as a string."
    description: "Text conversion result from converting a document to Plain Text\
      \ (TXT) format"
    example:
      TextResult: "TextResult"
      Successful: true
  DocxToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting a DOCX input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  ConvertedPngPage:
    type: "object"
    properties:
      PageNumber:
        type: "integer"
        format: "int32"
        description: "Page number of the converted page, starting with 1"
      URL:
        type: "string"
        description: "URL to the PNG file of this page; file is stored in an in-memory\
          \ cache and will be deleted"
    description: "A single converted page"
    example:
      PageNumber: 0
      URL: "URL"
  DocxToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting a DOCX input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  ConvertedJpgPage:
    type: "object"
    properties:
      PageNumber:
        type: "integer"
        format: "int32"
        description: "Page number of the converted page, starting with 1"
      Content:
        type: "string"
        format: "byte"
        description: "The JPG file of this page as a byte array"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "A single converted page"
    example:
      PageNumber: 0
      Content: "Content"
  PptxToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting a PPTX input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  CsvCollection:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      CsvFiles:
        type: "array"
        description: "Array of CSV File results"
        items:
          $ref: "#/definitions/CsvFileResult"
      FileCount:
        type: "integer"
        format: "int32"
        description: "Count of the number of CSV files produced"
    description: "Collection of CSV Files"
  CsvFileResult:
    type: "object"
    properties:
      Title:
        type: "string"
        description: "Title of the CSV file"
      FileContents:
        type: "string"
        format: "byte"
        description: "Contents of the CSV file"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "CSV file result"
  XlsxToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting an XLSX input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  PdfToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting a PDF to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  AutodetectGetInfoResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      DetectedFileExtension:
        type: "string"
        description: "Detected file extension of the file format, with a leading period"
      DetectedMimeType:
        type: "string"
        description: "MIME type of this file extension"
      PageCount:
        type: "integer"
        format: "int64"
        description: "Number of pages in a page-based document; for presentations,\
          \ this is the number of slides and for a spreadsheet this is the number\
          \ of worksheets.  Contains 0 when the page count cannot be determined, or\
          \ if the concept of page count does not apply (e.g. for an image)"
      Author:
        type: "string"
        description: "User name of the creator/author of the document, if available,\
          \ null if not available"
      DateModified:
        type: "string"
        format: "date-time"
        description: "The timestamp that the document was last modified, if available,\
          \ null if not available"
      AlternateFileTypeCandidates:
        type: "array"
        description: "Alternate file type options and their probability"
        items:
          $ref: "#/definitions/AlternateFileFormatCandidate"
    description: "Result of an autodetect/get-info operation"
    example:
      PageCount: 0
      AlternateFileTypeCandidates:
      - Probability: 6.027456183070403
        DetectedMimeType: "DetectedMimeType"
        DetectedFileExtension: "DetectedFileExtension"
      - Probability: 6.027456183070403
        DetectedMimeType: "DetectedMimeType"
        DetectedFileExtension: "DetectedFileExtension"
      Author: "Author"
      DetectedMimeType: "DetectedMimeType"
      Successful: true
      DetectedFileExtension: "DetectedFileExtension"
      DateModified: "2000-01-23T04:56:07.000+00:00"
  AlternateFileFormatCandidate:
    type: "object"
    properties:
      Probability:
        type: "number"
        format: "double"
        description: "Probability that this extension is the right one; possible values\
          \ are between 0.0 (lowest confidence) and 1.0 (highest confidence)"
      DetectedFileExtension:
        type: "string"
        description: "Detected file extension of the file format, with a leading period"
      DetectedMimeType:
        type: "string"
        description: "MIME type of this file extension"
    description: "Alternate file format possibility"
    example:
      Probability: 6.027456183070403
      DetectedMimeType: "DetectedMimeType"
      DetectedFileExtension: "DetectedFileExtension"
  GetFileTypeIconResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      Icon:
        type: "string"
        format: "byte"
        description: "PNG icon as a byte array"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      Extension:
        type: "string"
        description: "Extension used for the icon"
    description: "Result of getting a file type icon from a file extension"
    example:
      Extension: "Extension"
      Icon: "Icon"
      Successful: true
  AutodetectToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting an autodetected input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  AutodetectToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting a Autodetected Document input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  AutodetectToThumbnailsResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "Index of this thumbnail"
      ThumbnailPages:
        type: "array"
        description: "A PNG thumbnail of the document page"
        items:
          $ref: "#/definitions/Thumbnail"
    description: "Result of converting an entire document to an array of PNG thumbnails"
    example:
      Successful: true
      ThumbnailPages:
      - Content: "Content"
        Index: 0
      - Content: "Content"
        Index: 0
  Thumbnail:
    type: "object"
    properties:
      Index:
        type: "integer"
        format: "int32"
        description: "Index of this thumbnail"
      Content:
        type: "string"
        format: "byte"
        description: "A PNG thumbnail of the document page"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "Result of converting a single document page to a PNG thumbnail"
    example:
      Content: "Content"
      Index: 0
  PdfToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting a PDF input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  EmlToHtmlResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      Content:
        type: "string"
        description: "An HTML string version of the EML file"
      Body:
        type: "string"
        description: "The main body of the EML file's email as an HTML string"
      From:
        type: "string"
        description: "The From sender of the EML file's email"
      To:
        type: "string"
        description: "The To recipients of the EML file's email"
      Cc:
        type: "string"
        description: "The CC recipients of the EML file's email"
      DateSent:
        type: "string"
        description: "The date and time that the EML file's email was sent"
      Subject:
        type: "string"
        description: "The subject of the EML file's email"
      Attachments:
        type: "array"
        description: "List of all attachments for the EML file"
        items:
          $ref: "#/definitions/EmlAttachment"
    description: "Result of converting an EML file to HTML string"
    example:
      Cc: "Cc"
      DateSent: "DateSent"
      Content: "Content"
      From: "From"
      To: "To"
      Successful: true
      Body: "Body"
      Attachments:
      - Content: "Content"
        Name: "Name"
      - Content: "Content"
        Name: "Name"
      Subject: "Subject"
  EmlAttachment:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Name of the attachment, including file extension"
      Content:
        type: "string"
        format: "byte"
        description: "The EML attachment as a byte[]"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "An EML file attachment"
    example:
      Content: "Content"
      Name: "Name"
  EmlToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting an EML input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  EmlToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting an EML input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  MsgToHtmlResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      Content:
        type: "string"
        description: "An HTML string version of the MSG file"
      Body:
        type: "string"
        description: "The main body of the MSG file's email as an HTML string"
      From:
        type: "string"
        description: "The From sender of the MSG file's email"
      To:
        type: "string"
        description: "The To recipients of the MSG file's email"
      Cc:
        type: "string"
        description: "The CC recipients of the MSG file's email"
      ReceivedTime:
        type: "string"
        description: "The time that the MSG file's email was received"
      Subject:
        type: "string"
        description: "The subject of the MSG file's email"
      Attachments:
        type: "array"
        description: "List of all attachments for the MSG file"
        items:
          $ref: "#/definitions/MsgAttachment"
    description: "Result of converting an MSG file to HTML string"
    example:
      Cc: "Cc"
      Content: "Content"
      From: "From"
      To: "To"
      ReceivedTime: "ReceivedTime"
      Successful: true
      Body: "Body"
      Attachments:
      - Content: "Content"
        Name: "Name"
      - Content: "Content"
        Name: "Name"
      Subject: "Subject"
  MsgAttachment:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Name of the attachment, including file extension"
      Content:
        type: "string"
        format: "byte"
        description: "The MSG attachment as a byte[]"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "An MSG file attachment"
    example:
      Content: "Content"
      Name: "Name"
  MsgToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting a MSG input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  MsgToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting a MSG input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  OdtToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting an ODT input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  OdtToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting an ODT input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  OdsToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting an ODS input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  OdsToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting an ODS input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  OdpToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting an ODP input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  OdpToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting an ODP input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  KeynoteToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting a Keynote input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  KeynoteToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting a Keynote input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  RtfToPngResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      PngResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedPngPage"
    description: "Result of converting a RTF input to a PNG array"
    example:
      PngResultPages:
      - PageNumber: 0
        URL: "URL"
      - PageNumber: 0
        URL: "URL"
      Successful: true
  RtfToJpgResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      JpgResultPages:
        type: "array"
        description: "Array of converted pages"
        items:
          $ref: "#/definitions/ConvertedJpgPage"
    description: "Result of converting a RTF input to a JPG array"
    example:
      JpgResultPages:
      - PageNumber: 0
        Content: "Content"
      - PageNumber: 0
        Content: "Content"
      Successful: true
  MultipageImageFormatConversionResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      PageCount:
        type: "integer"
        format: "int32"
        description: "The number of pages in the converted output"
      Pages:
        type: "array"
        description: "Converted page results"
        items:
          $ref: "#/definitions/PageConversionResult"
    description: "Result of converting a multi-page image into individual pages with\
      \ a different format"
    example:
      Pages:
      - FileBytes: "FileBytes"
        Filename: "Filename"
      - FileBytes: "FileBytes"
        Filename: "Filename"
      PageCount: 0
      Successful: true
  PageConversionResult:
    type: "object"
    properties:
      Filename:
        type: "string"
        description: "File name of the image in the converted file format"
      FileBytes:
        type: "string"
        format: "byte"
        description: "File bytes (contents) of the image in converted file format"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "Converted page as an image"
    example:
      FileBytes: "FileBytes"
      Filename: "Filename"
  GetImageInfoResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
      ColorSpace:
        type: "string"
        description: "Color space of the image"
      ColorType:
        type: "string"
        description: "Color type of the image"
      Width:
        type: "integer"
        format: "int32"
        description: "Width in pixels of the image"
      Height:
        type: "integer"
        format: "int32"
        description: "Height in pixels of the image"
      CompressionLevel:
        type: "integer"
        format: "int32"
        description: "Compression level value from 0 (lowest quality) to 100 (highest\
          \ quality)"
      ImageHashSignature:
        type: "string"
        description: "SHA256 hash signature of the image"
      HasTransparency:
        type: "boolean"
        description: "True if the image contains transparency, otherwise false"
      MimeType:
        type: "string"
        description: "MIME type of the image format"
      ImageFormat:
        type: "string"
        description: "Image format"
      DPIUnit:
        type: "string"
        description: "Units of the DPI measurement; can be either in Inches or Centimeters"
      DPI:
        type: "number"
        format: "double"
        description: "DPI (pixels per unit, e.g. pixels per inch) of the image"
      ColorCount:
        type: "integer"
        format: "int32"
        description: "Unique colors in the image"
      BitDepth:
        type: "integer"
        format: "int32"
        description: "Bit depth of the image"
      Comment:
        type: "string"
        description: "Comment string in the image"
      ExifProfileName:
        type: "string"
        description: "Name of the EXIF profile used"
      ExifValues:
        type: "array"
        description: "EXIF tags and values embedded in the image"
        items:
          $ref: "#/definitions/ExifValue"
    description: "Result of running a get-info operation on an image"
    example:
      Comment: "Comment"
      ColorSpace: "ColorSpace"
      HasTransparency: true
      ColorCount: 5
      ImageHashSignature: "ImageHashSignature"
      Successful: true
      BitDepth: 2
      MimeType: "MimeType"
      ImageFormat: "ImageFormat"
      ExifValues:
      - DataValue: "DataValue"
        DataType: "DataType"
        Tag: "Tag"
      - DataValue: "DataValue"
        DataType: "DataType"
        Tag: "Tag"
      CompressionLevel: 1
      ColorType: "ColorType"
      DPIUnit: "DPIUnit"
      ExifProfileName: "ExifProfileName"
      Height: 6
      DPI: 5.962133916683182
      Width: 0
  ExifValue:
    type: "object"
    properties:
      Tag:
        type: "string"
        description: "Tag name for the EXIF value"
      DataType:
        type: "string"
        description: "Date type of the EXIF value"
      DataValue:
        type: "string"
        description: "Value, formatted as a string of the EXIF value"
    description: "EXIF tag and value"
    example:
      DataValue: "DataValue"
      DataType: "DataType"
      Tag: "Tag"
  HtmlTemplateApplicationRequest:
    type: "object"
    properties:
      HtmlTemplate:
        type: "string"
        description: "HTML template input as a string"
      HtmlTemplateUrl:
        type: "string"
        description: "URL to HTML template input"
      Operations:
        type: "array"
        description: "Operations to apply to this template"
        items:
          $ref: "#/definitions/HtmlTemplateOperation"
    description: "HTML template application request"
    example:
      HtmlTemplate: "HtmlTemplate"
      Operations:
      - Action: 0
        ReplaceWith: "ReplaceWith"
        MatchAgsint: "MatchAgsint"
      - Action: 0
        ReplaceWith: "ReplaceWith"
        MatchAgsint: "MatchAgsint"
      HtmlTemplateUrl: "HtmlTemplateUrl"
  HtmlTemplateOperation:
    type: "object"
    properties:
      Action:
        type: "integer"
        format: "int32"
        description: "Operation action to take; possible values are \"Replace\""
        enum:
        - 1
      MatchAgsint:
        type: "string"
        description: "For Replace operations, the string to match against (to be replaced\
          \ with ReplaceWith string)"
      ReplaceWith:
        type: "string"
        description: "For Replace operations, the string to Replace the original string\
          \ with"
    example:
      Action: 0
      ReplaceWith: "ReplaceWith"
      MatchAgsint: "MatchAgsint"
  HtmlTemplateApplicationResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      FinalHtml:
        type: "string"
        description: "Final HTML result of all operations on input"
    description: "Response from an HTML template application"
    example:
      FinalHtml: "FinalHtml"
      Successful: true
  DocxTemplateApplicationRequest:
    type: "object"
    properties:
      Operations:
        type: "array"
        description: "Operations to apply to this template"
        items:
          $ref: "#/definitions/DocxTemplateOperation"
    description: "Word DOCX template application request"
  DocxTemplateOperation:
    type: "object"
    properties:
      Action:
        type: "integer"
        format: "int32"
        description: "Operation action to take; possible values are \"Replace\""
        enum:
        - 1
      MatchAgainst:
        type: "string"
        description: "For Replace operations, the string to match against (to be replaced\
          \ with ReplaceWith string)"
      ReplaceWith:
        type: "string"
        description: "For Replace operations, the string to Replace the original string\
          \ with"
  ScreenshotRequest:
    type: "object"
    properties:
      Url:
        type: "string"
        description: "URL address of the website to screenshot.  HTTP and HTTPS are\
          \ both supported, as are custom ports."
      ExtraLoadingWait:
        type: "integer"
        format: "int32"
        description: "Optional: Additional number of milliseconds to wait once the\
          \ web page has finished loading before taking the screenshot.  Can be helpful\
          \ for highly asynchronous websites.  Provide a value of 0 for the default\
          \ of 5000 milliseconds (5 seconds). Maximum is 20000 milliseconds (20 seconds)."
      ScreenshotWidth:
        type: "integer"
        format: "int32"
        description: "Optional: Width of the screenshot in pixels; supply 0 to default\
          \ to 1280 x 1024"
      ScreenshotHeight:
        type: "integer"
        format: "int32"
        description: "Optional: Height of the screenshot in pixels; supply 0 to default\
          \ to 1280 x 1024, supply -1 to measure the full screen height of the page\
          \ and attempt to take a screen-height screenshot"
    description: "Details of the screenshot request"
    example:
      ScreenshotWidth: 6
      ExtraLoadingWait: 0
      Url: "Url"
      ScreenshotHeight: 1
  UrlToPdfRequest:
    type: "object"
    properties:
      Url:
        type: "string"
        description: "URL address of the website to screenshot.  HTTP and HTTPS are\
          \ both supported, as are custom ports."
      ExtraLoadingWait:
        type: "integer"
        format: "int32"
        description: "Optional: Additional number of milliseconds to wait once the\
          \ web page has finished loading before taking the screenshot.  Can be helpful\
          \ for highly asynchronous websites.  Provide a value of 0 for the default\
          \ of 5000 milliseconds (5 seconds). Maximum is 20000 milliseconds (20 seconds)."
      IncludeBackgroundGraphics:
        type: "boolean"
        description: "Optional: Set to true to include background graphics in the\
          \ PDF, or false to not include.  Default is true."
      ScaleFactor:
        type: "integer"
        format: "int32"
        description: "Optional: Set to 100 to scale at 100%, set to 50% to scale down\
          \ to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is\
          \ 100%. Maximum is 1000%"
    description: "Request to convert a URL to a PDF file"
    example:
      IncludeBackgroundGraphics: true
      ExtraLoadingWait: 0
      Url: "Url"
      ScaleFactor: 6
  UrlToTextRequest:
    type: "object"
    properties:
      Url:
        type: "string"
        description: "URL of the website to extract the text from"
    description: "Details of the URL website to Text request"
    example:
      Url: "Url"
  UrlToTextResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      TextContentResult:
        type: "string"
        description: "Text content result from the URL website input"
    description: "Result of running the URL website to Text operation"
  HtmlToPdfRequest:
    type: "object"
    properties:
      Html:
        type: "string"
        description: "HTML to render to PDF"
      ExtraLoadingWait:
        type: "integer"
        format: "int32"
        description: "Optional: Additional number of milliseconds to wait once the\
          \ web page has finished loading before taking the screenshot.  Can be helpful\
          \ for highly asynchronous websites. Provide a value of 0 for the default\
          \ of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds)."
      IncludeBackgroundGraphics:
        type: "boolean"
        description: "Optional: Set to true to include background graphics in the\
          \ PDF, or false to not include.  Default is true."
      ScaleFactor:
        type: "integer"
        format: "int32"
        description: "Optional: Set to 100 to scale at 100%, set to 50% to scale down\
          \ to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is\
          \ 100%. Maximum is 1000%."
    description: "Details of the HTML to PDF request"
    example:
      IncludeBackgroundGraphics: true
      Html: "Html"
      ExtraLoadingWait: 0
      ScaleFactor: 6
  HtmlToPngRequest:
    type: "object"
    properties:
      Html:
        type: "string"
        description: "HTML to render to PNG (screenshot)"
      ExtraLoadingWait:
        type: "integer"
        format: "int32"
        description: "Optional: Additional number of milliseconds to wait once the\
          \ web page has finished loading before taking the screenshot.  Can be helpful\
          \ for highly asynchronous websites. Provide a value of 0 for the default\
          \ of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds)."
      ScreenshotWidth:
        type: "integer"
        format: "int32"
        description: "Optional: Width of the screenshot in pixels; supply 0 to default\
          \ to 1280 x 1024, supply -1 to measure the full screen height of the page\
          \ and attempt to take a screen-height screenshot"
      ScreenshotHeight:
        type: "integer"
        format: "int32"
        description: "Optional: Height of the screenshot in pixels; supply 0 to default\
          \ to 1280 x 1024, supply -1 to measure the full screen height of the page\
          \ and attempt to take a screen-height screenshot"
    description: "Details of the HTML to PNG request"
    example:
      Html: "Html"
      ScreenshotWidth: 6
      ExtraLoadingWait: 0
      ScreenshotHeight: 1
  HtmlToTextRequest:
    type: "object"
    properties:
      Html:
        type: "string"
        description: "HTML to extract the text from"
    description: "Details of the HTML to Text request"
    example:
      Html: "Html"
  HtmlToTextResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      TextContentResult:
        type: "string"
        description: "Text content result from the HTML input"
    description: "Result of running the HTML to Text operation"
  HtmlToOfficeRequest:
    type: "object"
    properties:
      Html:
        type: "string"
        description: "HTML to render to Office format"
    description: "Details of the HTML to Office request"
    example:
      Html: "Html"
  HtmlMdResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if operation was successful, false otherwise"
      Html:
        type: "string"
        description: "Resulting HTML from the conversion"
    description: "Result from converting a Markdown file to HTML"
  FinishEditingRequest:
    type: "object"
    properties:
      InputFileUrl:
        type: "string"
        description: "URL of a document being edited to get the contents of."
    description: "Input to a Finish Editing request"
    example:
      InputFileUrl: "InputFileUrl"
  CreateBlankDocxRequest:
    type: "object"
    properties:
      InitialText:
        type: "string"
        description: "Optional; initial text to include in the document"
    description: "Input to a Create Blank Word Document request"
    example:
      InitialText: "InitialText"
  CreateBlankDocxResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of creating a blank Word document"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  ReplaceStringRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      MatchString:
        type: "string"
        description: "String to search for and match against, to be replaced"
      ReplaceString:
        type: "string"
        description: "String to replace the matched values with"
      MatchCase:
        type: "boolean"
        description: "True if the case should be matched, false for case insensitive\
          \ match"
    description: "Input to a string replacement request"
    example:
      MatchString: "MatchString"
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      MatchCase: true
      ReplaceString: "ReplaceString"
  MultiReplaceStringRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      ReplaceStrings:
        type: "array"
        description: "An array of individual string replacement requests"
        items:
          $ref: "#/definitions/SingleReplaceString"
    description: "Input to a multiple string replacement request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      ReplaceStrings:
      - MatchString: "MatchString"
        MatchCase: true
        ReplaceString: "ReplaceString"
      - MatchString: "MatchString"
        MatchCase: true
        ReplaceString: "ReplaceString"
  SingleReplaceString:
    type: "object"
    properties:
      MatchString:
        type: "string"
        description: "String to search for and match against, to be replaced"
      ReplaceString:
        type: "string"
        description: "String to replace the matched values with"
      MatchCase:
        type: "boolean"
        description: "True if the case should be matched, false for case insensitive\
          \ match"
    description: "A single string replacement request"
    example:
      MatchString: "MatchString"
      MatchCase: true
      ReplaceString: "ReplaceString"
  GetMacrosResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      ContainsVbaMacros:
        type: "boolean"
        description: "True if the document contains VBA macros, false otherwise"
    description: "Result of running a Get Macro Information command"
    example:
      ContainsVbaMacros: true
      Successful: true
  GetDocxMetadataPropertiesResponse:
    type: "object"
    properties:
      Company:
        type: "string"
        description: "Name of the Company that authored the document, if available"
      Manager:
        type: "string"
        description: "Name of the Manager that authored the document, if available"
      ApplicationVersion:
        type: "string"
        description: "Application version that authored the document, if available"
      WordCount:
        type: "integer"
        format: "int64"
        description: "Word count of the document"
      LineCount:
        type: "integer"
        format: "int64"
        description: "Line count of the document"
      ParagraphCount:
        type: "integer"
        format: "int64"
        description: "Paragraph count of the document"
      PageCount:
        type: "integer"
        format: "int64"
        description: "Page count of the document"
      CustomProperties:
        type: "array"
        description: "Custom properties applied to the document"
        items:
          $ref: "#/definitions/DocxMetadataCustomProperty"
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
    description: "Result of running a DocxGetMetadataProperties command"
    example:
      Company: "Company"
      ApplicationVersion: "ApplicationVersion"
      PageCount: 5
      WordCount: 0
      ParagraphCount: 1
      Manager: "Manager"
      LineCount: 6
      Successful: true
      CustomProperties:
      - PropertyName: "PropertyName"
        DoubleValue: 2.3021358869347655
        DateValue: "2000-01-23T04:56:07.000+00:00"
        IntegerValue: 5
        PropertyDataType: "PropertyDataType"
        StringValue: "StringValue"
      - PropertyName: "PropertyName"
        DoubleValue: 2.3021358869347655
        DateValue: "2000-01-23T04:56:07.000+00:00"
        IntegerValue: 5
        PropertyDataType: "PropertyDataType"
        StringValue: "StringValue"
  DocxMetadataCustomProperty:
    type: "object"
    properties:
      PropertyName:
        type: "string"
        description: "Name of the property"
      PropertyDataType:
        type: "string"
        description: "Data type of the property; possible values are \"string\", \"\
          integer\", \"double\" or \"date\""
      StringValue:
        type: "string"
        description: "If the property is of a string data type, then provides the\
          \ string value if available"
      IntegerValue:
        type: "integer"
        format: "int64"
        description: "If the property is of a integer data type, then provides the\
          \ integer value if available"
      DoubleValue:
        type: "number"
        format: "double"
        description: "If the property is of a double floating point data type, then\
          \ provides the double value if available"
      DateValue:
        type: "string"
        format: "date-time"
        description: "If the property is of a date time data type, then provides the\
          \ date time value if available"
    description: "Name and value pair for a custom-defined DOCX metadata property"
    example:
      PropertyName: "PropertyName"
      DoubleValue: 2.3021358869347655
      DateValue: "2000-01-23T04:56:07.000+00:00"
      IntegerValue: 5
      PropertyDataType: "PropertyDataType"
      StringValue: "StringValue"
  DocxSetCustomMetadataPropertiesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      PropertiesToSet:
        type: "array"
        description: "Required: properties to set in the Word Document; provide one\
          \ or more property definitions to set - be sure to specify the data type\
          \ and value, together with the property name"
        items:
          $ref: "#/definitions/DocxMetadataCustomProperty"
    description: "Request to set Word custom metadata properties"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      PropertiesToSet:
      - PropertyName: "PropertyName"
        DoubleValue: 2.3021358869347655
        DateValue: "2000-01-23T04:56:07.000+00:00"
        IntegerValue: 5
        PropertyDataType: "PropertyDataType"
        StringValue: "StringValue"
      - PropertyName: "PropertyName"
        DoubleValue: 2.3021358869347655
        DateValue: "2000-01-23T04:56:07.000+00:00"
        IntegerValue: 5
        PropertyDataType: "PropertyDataType"
        StringValue: "StringValue"
  GetDocxTablesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Tables request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetDocxTablesResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Tables:
        type: "array"
        description: "Tables in the DOCX file"
        items:
          $ref: "#/definitions/DocxTable"
    description: "Result of running a Get-Tables command"
    example:
      Tables:
      - CellHorizontalBorderType: "CellHorizontalBorderType"
        LeftBorderType: "LeftBorderType"
        TopBorderSize: 2
        TableRows:
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        CellVerticalBorderSpace: 7
        RightBorderSpace: 1
        CellVerticalBorderType: "CellVerticalBorderType"
        TableIndentationMode: "TableIndentationMode"
        RightBorderColor: "RightBorderColor"
        CellHorizontalBorderSize: 1
        Width: "Width"
        LeftBorderSize: 2
        WidthType: "WidthType"
        TableID: "TableID"
        Path: "Path"
        StartBorderSpace: 4
        StartBorderColor: "StartBorderColor"
        BottomBorderSize: 9
        BottomBorderColor: "BottomBorderColor"
        BottomBorderSpace: 3
        CellHorizontalBorderSpace: 1
        LeftBorderColor: "LeftBorderColor"
        EndBorderSpace: 9
        TableIndentationWidth: 9
        CellVerticalBorderSize: 6
        TopBorderSpace: 7
        BottomBorderType: "BottomBorderType"
        LeftBorderSpace: 4
        EndBorderColor: "EndBorderColor"
        TopBorderColor: "TopBorderColor"
        TopBorderType: "TopBorderType"
        CellVerticalBorderColor: "CellVerticalBorderColor"
        RightBorderSize: 7
        StartBorderSize: 1
        StartBorderType: "StartBorderType"
        EndBorderType: "EndBorderType"
        RightBorderType: "RightBorderType"
        EndBorderSize: 5
        CellHorizontalBorderColor: "CellHorizontalBorderColor"
      - CellHorizontalBorderType: "CellHorizontalBorderType"
        LeftBorderType: "LeftBorderType"
        TopBorderSize: 2
        TableRows:
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        CellVerticalBorderSpace: 7
        RightBorderSpace: 1
        CellVerticalBorderType: "CellVerticalBorderType"
        TableIndentationMode: "TableIndentationMode"
        RightBorderColor: "RightBorderColor"
        CellHorizontalBorderSize: 1
        Width: "Width"
        LeftBorderSize: 2
        WidthType: "WidthType"
        TableID: "TableID"
        Path: "Path"
        StartBorderSpace: 4
        StartBorderColor: "StartBorderColor"
        BottomBorderSize: 9
        BottomBorderColor: "BottomBorderColor"
        BottomBorderSpace: 3
        CellHorizontalBorderSpace: 1
        LeftBorderColor: "LeftBorderColor"
        EndBorderSpace: 9
        TableIndentationWidth: 9
        CellVerticalBorderSize: 6
        TopBorderSpace: 7
        BottomBorderType: "BottomBorderType"
        LeftBorderSpace: 4
        EndBorderColor: "EndBorderColor"
        TopBorderColor: "TopBorderColor"
        TopBorderType: "TopBorderType"
        CellVerticalBorderColor: "CellVerticalBorderColor"
        RightBorderSize: 7
        StartBorderSize: 1
        StartBorderType: "StartBorderType"
        EndBorderType: "EndBorderType"
        RightBorderType: "RightBorderType"
        EndBorderSize: 5
        CellHorizontalBorderColor: "CellHorizontalBorderColor"
      Successful: true
  DocxTable:
    type: "object"
    properties:
      TableID:
        type: "string"
        description: "The ID of the table; leave blank for new tables"
      Path:
        type: "string"
        description: "The Path of the location of this table object; leave blank for\
          \ new tables"
      Width:
        type: "string"
        description: "The Width of the table, or 0 if not specified"
      WidthType:
        type: "string"
        description: "The Width configuration type of the table"
      TableRows:
        type: "array"
        description: "Rows in the table; this is where the contents is located"
        items:
          $ref: "#/definitions/DocxTableRow"
      TopBorderType:
        type: "string"
        description: "Type for the top border - can be a Single, DashDotStroked, Dashed,\
          \ DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset,\
          \ Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap,\
          \ ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap,\
          \ ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave,\
          \ Triple, Wave"
      TopBorderSize:
        type: "integer"
        format: "int32"
        description: "Width of the border in points (1/72nd of an inch)"
      TopBorderSpace:
        type: "integer"
        format: "int32"
        description: "Spacing around the border in points (1/72nd of an inch)"
      TopBorderColor:
        type: "string"
        description: "HTML-style color hex value (do not include a #)"
      BottomBorderType:
        type: "string"
        description: "Type for the bottom border - can be a Single, DashDotStroked,\
          \ Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave,\
          \ Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap,\
          \ ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap,\
          \ ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap,\
          \ ThreeDEmboss, ThreeDEngrave, Triple, Wave"
      BottomBorderSize:
        type: "integer"
        format: "int32"
        description: "Width of the border in points (1/72nd of an inch)"
      BottomBorderSpace:
        type: "integer"
        format: "int32"
        description: "Spacing around the border in points (1/72nd of an inch)"
      BottomBorderColor:
        type: "string"
        description: "HTML-style color hex value (do not include a #)"
      LeftBorderType:
        type: "string"
        description: "Type for the left border - can be a Single, DashDotStroked,\
          \ Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave,\
          \ Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap,\
          \ ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap,\
          \ ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap,\
          \ ThreeDEmboss, ThreeDEngrave, Triple, Wave"
      LeftBorderSize:
        type: "integer"
        format: "int32"
        description: "Width of the border in points (1/72nd of an inch)"
      LeftBorderSpace:
        type: "integer"
        format: "int32"
        description: "Spacing around the border in points (1/72nd of an inch)"
      LeftBorderColor:
        type: "string"
        description: "HTML-style color hex value (do not include a #)"
      RightBorderType:
        type: "string"
        description: "Type for the right border - can be a Single, DashDotStroked,\
          \ Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave,\
          \ Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap,\
          \ ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap,\
          \ ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap,\
          \ ThreeDEmboss, ThreeDEngrave, Triple, Wave"
      RightBorderSize:
        type: "integer"
        format: "int32"
        description: "Width of the border in points (1/72nd of an inch)"
      RightBorderSpace:
        type: "integer"
        format: "int32"
        description: "Spacing around the border in points (1/72nd of an inch)"
      RightBorderColor:
        type: "string"
        description: "HTML-style color hex value (do not include a #)"
      CellHorizontalBorderType:
        type: "string"
        description: "Type for the cell horizontal border - can be a Single, DashDotStroked,\
          \ Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave,\
          \ Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap,\
          \ ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap,\
          \ ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap,\
          \ ThreeDEmboss, ThreeDEngrave, Triple, Wave"
      CellHorizontalBorderSize:
        type: "integer"
        format: "int32"
        description: "Width of the border in points (1/72nd of an inch)"
      CellHorizontalBorderSpace:
        type: "integer"
        format: "int32"
        description: "Spacing around the border in points (1/72nd of an inch)"
      CellHorizontalBorderColor:
        type: "string"
        description: "HTML-style color hex value (do not include a #)"
      CellVerticalBorderType:
        type: "string"
        description: "Type for the cell vertical border - can be a Single, DashDotStroked,\
          \ Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave,\
          \ Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap,\
          \ ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap,\
          \ ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap,\
          \ ThreeDEmboss, ThreeDEngrave, Triple, Wave"
      CellVerticalBorderSize:
        type: "integer"
        format: "int32"
        description: "Width of the border in points (1/72nd of an inch)"
      CellVerticalBorderSpace:
        type: "integer"
        format: "int32"
        description: "Spacing around the border in points (1/72nd of an inch)"
      CellVerticalBorderColor:
        type: "string"
        description: "HTML-style color hex value (do not include a #)"
      StartBorderType:
        type: "string"
        description: "Type for the start border - can be a Single, DashDotStroked,\
          \ Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave,\
          \ Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap,\
          \ ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap,\
          \ ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap,\
          \ ThreeDEmboss, ThreeDEngrave, Triple, Wave"
      StartBorderSize:
        type: "integer"
        format: "int32"
        description: "Width of the border in points (1/72nd of an inch)"
      StartBorderSpace:
        type: "integer"
        format: "int32"
        description: "Spacing around the border in points (1/72nd of an inch)"
      StartBorderColor:
        type: "string"
        description: "HTML-style color hex value (do not include a #)"
      EndBorderType:
        type: "string"
        description: "Type for the end border - can be a Single, DashDotStroked, Dashed,\
          \ DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset,\
          \ Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap,\
          \ ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap,\
          \ ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave,\
          \ Triple, Wave"
      EndBorderSize:
        type: "integer"
        format: "int32"
        description: "Width of the border in points (1/72nd of an inch)"
      EndBorderSpace:
        type: "integer"
        format: "int32"
        description: "Spacing around the border in points (1/72nd of an inch)"
      EndBorderColor:
        type: "string"
        description: "HTML-style color hex value (do not include a #)"
      TableIndentationMode:
        type: "string"
        description: "Table indentation type"
      TableIndentationWidth:
        type: "integer"
        format: "int32"
        description: "Table indentation width"
    description: "A table in a Word Document (DOCX) file"
    example:
      CellHorizontalBorderType: "CellHorizontalBorderType"
      LeftBorderType: "LeftBorderType"
      TopBorderSize: 2
      TableRows:
      - Path: "Path"
        RowCells:
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        RowIndex: 0
      - Path: "Path"
        RowCells:
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        RowIndex: 0
      CellVerticalBorderSpace: 7
      RightBorderSpace: 1
      CellVerticalBorderType: "CellVerticalBorderType"
      TableIndentationMode: "TableIndentationMode"
      RightBorderColor: "RightBorderColor"
      CellHorizontalBorderSize: 1
      Width: "Width"
      LeftBorderSize: 2
      WidthType: "WidthType"
      TableID: "TableID"
      Path: "Path"
      StartBorderSpace: 4
      StartBorderColor: "StartBorderColor"
      BottomBorderSize: 9
      BottomBorderColor: "BottomBorderColor"
      BottomBorderSpace: 3
      CellHorizontalBorderSpace: 1
      LeftBorderColor: "LeftBorderColor"
      EndBorderSpace: 9
      TableIndentationWidth: 9
      CellVerticalBorderSize: 6
      TopBorderSpace: 7
      BottomBorderType: "BottomBorderType"
      LeftBorderSpace: 4
      EndBorderColor: "EndBorderColor"
      TopBorderColor: "TopBorderColor"
      TopBorderType: "TopBorderType"
      CellVerticalBorderColor: "CellVerticalBorderColor"
      RightBorderSize: 7
      StartBorderSize: 1
      StartBorderType: "StartBorderType"
      EndBorderType: "EndBorderType"
      RightBorderType: "RightBorderType"
      EndBorderSize: 5
      CellHorizontalBorderColor: "CellHorizontalBorderColor"
  DocxTableRow:
    type: "object"
    properties:
      RowIndex:
        type: "integer"
        format: "int32"
        description: "Index of the row, 0-based"
      Path:
        type: "string"
        description: "The Path of the location of this table row object; leave blank\
          \ for new tables"
      RowCells:
        type: "array"
        description: "Cells in the row; this is where the contents of the row is stored"
        items:
          $ref: "#/definitions/DocxTableCell"
    description: "A row in a Word Document (DOCX) file"
    example:
      Path: "Path"
      RowCells:
      - Path: "Path"
        CellWidthMode: "CellWidthMode"
        CellWidth: "CellWidth"
        CellIndex: 6
        CellShadingColor: "CellShadingColor"
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        CellShadingFill: "CellShadingFill"
        CellShadingPattern: "CellShadingPattern"
      - Path: "Path"
        CellWidthMode: "CellWidthMode"
        CellWidth: "CellWidth"
        CellIndex: 6
        CellShadingColor: "CellShadingColor"
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        CellShadingFill: "CellShadingFill"
        CellShadingPattern: "CellShadingPattern"
      RowIndex: 0
  DocxTableCell:
    type: "object"
    properties:
      CellIndex:
        type: "integer"
        format: "int32"
        description: "The index of the cell, 0-based"
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ tables"
      Paragraphs:
        type: "array"
        description: "Paragraphs inside the cell; this is where the contents of the\
          \ cell are stored"
        items:
          $ref: "#/definitions/DocxParagraph"
      CellShadingColor:
        type: "string"
        description: "Color of the cell shading"
      CellShadingFill:
        type: "string"
        description: "Fill of the cell shading"
      CellShadingPattern:
        type: "string"
        description: "Pattern of the cell shading"
      CellWidthMode:
        type: "string"
        description: "Width mode of the cell; can be auto (for automatic) or manual"
      CellWidth:
        type: "string"
        description: "Width of the cell"
    description: "A cell in a Word Document (DOCX) file"
    example:
      Path: "Path"
      CellWidthMode: "CellWidthMode"
      CellWidth: "CellWidth"
      CellIndex: 6
      CellShadingColor: "CellShadingColor"
      Paragraphs:
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
      CellShadingFill: "CellShadingFill"
      CellShadingPattern: "CellShadingPattern"
  DocxParagraph:
    type: "object"
    properties:
      ParagraphIndex:
        type: "integer"
        format: "int32"
        description: "The index of the paragraph; 0-based"
      Path:
        type: "string"
        description: "The Path of the location of this Paragraph object; leave blank\
          \ during creation"
      ContentRuns:
        type: "array"
        description: "The content runs in the paragraph - this is where text is stored;\
          \ similar to a span in HTML"
        items:
          $ref: "#/definitions/DocxRun"
      StyleID:
        type: "string"
        description: "Style ID of the style applied to the paragraph; null if no style\
          \ is applied"
    description: "A paragraph in a Word Document (DOCX) file; there is where text,\
      \ content and formatting are stored - similar to the paragraph tag in HTML"
    example:
      Path: "Path"
      ContentRuns:
      - Path: "Path"
        RunIndex: 5
        FontFamily: "FontFamily"
        Italic: true
        FontSize: "FontSize"
        TextItems:
        - Path: "Path"
          TextIndex: 5
          TextContent: "TextContent"
        - Path: "Path"
          TextIndex: 5
          TextContent: "TextContent"
        Underline: "Underline"
        Bold: true
      - Path: "Path"
        RunIndex: 5
        FontFamily: "FontFamily"
        Italic: true
        FontSize: "FontSize"
        TextItems:
        - Path: "Path"
          TextIndex: 5
          TextContent: "TextContent"
        - Path: "Path"
          TextIndex: 5
          TextContent: "TextContent"
        Underline: "Underline"
        Bold: true
      ParagraphIndex: 1
      StyleID: "StyleID"
  DocxRun:
    type: "object"
    properties:
      RunIndex:
        type: "integer"
        format: "int32"
        description: "Index of the run, 0-based"
      Path:
        type: "string"
        description: "The Path of the location of this Run object; leave blank for\
          \ creation"
      TextItems:
        type: "array"
        description: "Text items inside the run; this is where the actual text content\
          \ is stored"
        items:
          $ref: "#/definitions/DocxText"
      Bold:
        type: "boolean"
        description: "True to make the text bold, false otherwise"
      Italic:
        type: "boolean"
        description: "True to make the text italic, false otherwise"
      Underline:
        type: "string"
        description: "Underline mode for the text; possible values are: Words, Double,\
          \ Thick, Dotted, DottedHeavy, Dash, DashedHeavy, DashLong, DashLongHeavy,\
          \ DotDash, DashDotHeavy, DotDotDash, DashDotDotHeavy, Wave, WavyHeavy, WavyDouble,\
          \ None"
      FontFamily:
        type: "string"
        description: "Font Family name for the text, e.g. \"Arial\" or \"Times New\
          \ Roman\""
      FontSize:
        type: "string"
        description: "Font size in font points (e.g. \"24\")"
    description: "A content run in a Word Document (DOCX) file"
    example:
      Path: "Path"
      RunIndex: 5
      FontFamily: "FontFamily"
      Italic: true
      FontSize: "FontSize"
      TextItems:
      - Path: "Path"
        TextIndex: 5
        TextContent: "TextContent"
      - Path: "Path"
        TextIndex: 5
        TextContent: "TextContent"
      Underline: "Underline"
      Bold: true
  DocxText:
    type: "object"
    properties:
      TextIndex:
        type: "integer"
        format: "int32"
        description: "Index of the text content in the run; 0-based"
      Path:
        type: "string"
        description: "The Path of the location of this Text object; leave blank for\
          \ creation"
      TextContent:
        type: "string"
        description: "Text string containing the text content of this text content\
          \ item"
    description: "Unit of text content in a Word Document (DOCX) file"
    example:
      Path: "Path"
      TextIndex: 5
      TextContent: "TextContent"
  GetDocxTableByIndexRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      TableIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the table to retrieve from the Word Document"
    description: "Input to a Get Tables by Index request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      TableIndex: 0
  GetDocxTableByIndexResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Table:
        description: "Requested Table in the DOCX file"
        $ref: "#/definitions/DocxTable"
    description: "Result of running a Get-Tables by Index command"
    example:
      Table:
        CellHorizontalBorderType: "CellHorizontalBorderType"
        LeftBorderType: "LeftBorderType"
        TopBorderSize: 2
        TableRows:
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        CellVerticalBorderSpace: 7
        RightBorderSpace: 1
        CellVerticalBorderType: "CellVerticalBorderType"
        TableIndentationMode: "TableIndentationMode"
        RightBorderColor: "RightBorderColor"
        CellHorizontalBorderSize: 1
        Width: "Width"
        LeftBorderSize: 2
        WidthType: "WidthType"
        TableID: "TableID"
        Path: "Path"
        StartBorderSpace: 4
        StartBorderColor: "StartBorderColor"
        BottomBorderSize: 9
        BottomBorderColor: "BottomBorderColor"
        BottomBorderSpace: 3
        CellHorizontalBorderSpace: 1
        LeftBorderColor: "LeftBorderColor"
        EndBorderSpace: 9
        TableIndentationWidth: 9
        CellVerticalBorderSize: 6
        TopBorderSpace: 7
        BottomBorderType: "BottomBorderType"
        LeftBorderSpace: 4
        EndBorderColor: "EndBorderColor"
        TopBorderColor: "TopBorderColor"
        TopBorderType: "TopBorderType"
        CellVerticalBorderColor: "CellVerticalBorderColor"
        RightBorderSize: 7
        StartBorderSize: 1
        StartBorderType: "StartBorderType"
        EndBorderType: "EndBorderType"
        RightBorderType: "RightBorderType"
        EndBorderSize: 5
        CellHorizontalBorderColor: "CellHorizontalBorderColor"
      Successful: true
  GetDocxImagesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Images request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetDocxImagesResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Images:
        type: "array"
        description: "Images in the DOCX document"
        items:
          $ref: "#/definitions/DocxImage"
    description: "Result of running a Get-Images command"
    example:
      Images:
      - Path: "Path"
        ImageDataEmbedId: "ImageDataEmbedId"
        YOffset: 5
        XOffset: 5
        InlineWithText: true
        ImageInternalFileName: "ImageInternalFileName"
        ImageName: "ImageName"
        ImageHeight: 1
        ImageWidth: 6
        ImageId: 0
        ImageDescription: "ImageDescription"
        ImageDataContentType: "ImageDataContentType"
        ImageContentsURL: "ImageContentsURL"
      - Path: "Path"
        ImageDataEmbedId: "ImageDataEmbedId"
        YOffset: 5
        XOffset: 5
        InlineWithText: true
        ImageInternalFileName: "ImageInternalFileName"
        ImageName: "ImageName"
        ImageHeight: 1
        ImageWidth: 6
        ImageId: 0
        ImageDescription: "ImageDescription"
        ImageDataContentType: "ImageDataContentType"
        ImageContentsURL: "ImageContentsURL"
      Successful: true
  DocxImage:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ tables"
      ImageName:
        type: "string"
        description: "The Name of the image"
      ImageId:
        type: "integer"
        format: "int64"
        description: "The Id of the image"
      ImageDescription:
        type: "string"
        description: "The Description of the image"
      ImageWidth:
        type: "integer"
        format: "int64"
        description: "Width of the image in EMUs (English Metric Units); set to 0\
          \ to default to page width and aspect-ratio based height"
      ImageHeight:
        type: "integer"
        format: "int64"
        description: "Height of the image in EMUs (English Metric Units); set to 0\
          \ to default to page width and aspect-ratio based height"
      XOffset:
        type: "integer"
        format: "int64"
        description: "X (horizontal) offset of the image"
      YOffset:
        type: "integer"
        format: "int64"
        description: "Y (vertical) offset of the image"
      ImageDataEmbedId:
        type: "string"
        description: "Read-only; internal ID for the image contents"
      ImageDataContentType:
        type: "string"
        description: "Read-only; image data MIME content-type"
      ImageInternalFileName:
        type: "string"
        description: "Read-only; internal file name/path for the image"
      ImageContentsURL:
        type: "string"
        description: "URL to the image contents; file is stored in an in-memory cache\
          \ and will be deleted.  Call Finish-Editing to get the contents."
      InlineWithText:
        type: "boolean"
        description: "True if the image is inline with the text; false if it is floating"
    example:
      Path: "Path"
      ImageDataEmbedId: "ImageDataEmbedId"
      YOffset: 5
      XOffset: 5
      InlineWithText: true
      ImageInternalFileName: "ImageInternalFileName"
      ImageName: "ImageName"
      ImageHeight: 1
      ImageWidth: 6
      ImageId: 0
      ImageDescription: "ImageDescription"
      ImageDataContentType: "ImageDataContentType"
      ImageContentsURL: "ImageContentsURL"
  GetDocxStylesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Tables request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetDocxStylesResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Styles:
        type: "array"
        description: "Styles in the DOCX document"
        items:
          $ref: "#/definitions/DocxStyle"
    description: "Result of running a Get-Tables command"
    example:
      Successful: true
      Styles:
      - Path: "Path"
        FontFamily: "FontFamily"
        Italic: true
        FontSize: "FontSize"
        Underline: true
        Bold: true
        StyleID: "StyleID"
      - Path: "Path"
        FontFamily: "FontFamily"
        Italic: true
        FontSize: "FontSize"
        Underline: true
        Bold: true
        StyleID: "StyleID"
  DocxStyle:
    type: "object"
    properties:
      StyleID:
        type: "string"
        description: "ID of the style"
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ tables"
      Bold:
        type: "boolean"
        description: "Style applies bold formatting"
      Italic:
        type: "boolean"
        description: "Style applies italic formatting"
      Underline:
        type: "boolean"
        description: "Style applies underline formatting"
      FontSize:
        type: "string"
        description: "Font size"
      FontFamily:
        type: "string"
        description: "Font family"
    description: "Style in a DOCX Word Document"
    example:
      Path: "Path"
      FontFamily: "FontFamily"
      Italic: true
      FontSize: "FontSize"
      Underline: true
      Bold: true
      StyleID: "StyleID"
  GetDocxSectionsRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Sections request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetDocxSectionsResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Sections:
        type: "array"
        description: "Sections in the DOCX document"
        items:
          $ref: "#/definitions/DocxSection"
    description: "Result of running a Get-Sections command"
    example:
      Sections:
      - Path: "Path"
        StartingPageNumbers:
        - 0
        - 0
      - Path: "Path"
        StartingPageNumbers:
        - 0
        - 0
      Successful: true
  DocxSection:
    type: "object"
    properties:
      StartingPageNumbers:
        type: "array"
        description: "Page numbers that the section starts at, typically just one"
        items:
          type: "integer"
          format: "int32"
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ tables"
    description: "Section of a Word Document (DOCX)"
    example:
      Path: "Path"
      StartingPageNumbers:
      - 0
      - 0
  GetDocxBodyRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Body request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetDocxBodyResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Body:
        description: "Body in the DOCX document"
        $ref: "#/definitions/DocxBody"
    description: "Result of running a Get-Body command"
    example:
      Successful: true
      Body:
        Path: "Path"
        AllTables:
        - CellHorizontalBorderType: "CellHorizontalBorderType"
          LeftBorderType: "LeftBorderType"
          TopBorderSize: 2
          TableRows:
          - Path: "Path"
            RowCells:
            - Path: "Path"
              CellWidthMode: "CellWidthMode"
              CellWidth: "CellWidth"
              CellIndex: 6
              CellShadingColor: "CellShadingColor"
              Paragraphs:
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              CellShadingFill: "CellShadingFill"
              CellShadingPattern: "CellShadingPattern"
            - Path: "Path"
              CellWidthMode: "CellWidthMode"
              CellWidth: "CellWidth"
              CellIndex: 6
              CellShadingColor: "CellShadingColor"
              Paragraphs:
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              CellShadingFill: "CellShadingFill"
              CellShadingPattern: "CellShadingPattern"
            RowIndex: 0
          - Path: "Path"
            RowCells:
            - Path: "Path"
              CellWidthMode: "CellWidthMode"
              CellWidth: "CellWidth"
              CellIndex: 6
              CellShadingColor: "CellShadingColor"
              Paragraphs:
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              CellShadingFill: "CellShadingFill"
              CellShadingPattern: "CellShadingPattern"
            - Path: "Path"
              CellWidthMode: "CellWidthMode"
              CellWidth: "CellWidth"
              CellIndex: 6
              CellShadingColor: "CellShadingColor"
              Paragraphs:
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              CellShadingFill: "CellShadingFill"
              CellShadingPattern: "CellShadingPattern"
            RowIndex: 0
          CellVerticalBorderSpace: 7
          RightBorderSpace: 1
          CellVerticalBorderType: "CellVerticalBorderType"
          TableIndentationMode: "TableIndentationMode"
          RightBorderColor: "RightBorderColor"
          CellHorizontalBorderSize: 1
          Width: "Width"
          LeftBorderSize: 2
          WidthType: "WidthType"
          TableID: "TableID"
          Path: "Path"
          StartBorderSpace: 4
          StartBorderColor: "StartBorderColor"
          BottomBorderSize: 9
          BottomBorderColor: "BottomBorderColor"
          BottomBorderSpace: 3
          CellHorizontalBorderSpace: 1
          LeftBorderColor: "LeftBorderColor"
          EndBorderSpace: 9
          TableIndentationWidth: 9
          CellVerticalBorderSize: 6
          TopBorderSpace: 7
          BottomBorderType: "BottomBorderType"
          LeftBorderSpace: 4
          EndBorderColor: "EndBorderColor"
          TopBorderColor: "TopBorderColor"
          TopBorderType: "TopBorderType"
          CellVerticalBorderColor: "CellVerticalBorderColor"
          RightBorderSize: 7
          StartBorderSize: 1
          StartBorderType: "StartBorderType"
          EndBorderType: "EndBorderType"
          RightBorderType: "RightBorderType"
          EndBorderSize: 5
          CellHorizontalBorderColor: "CellHorizontalBorderColor"
        - CellHorizontalBorderType: "CellHorizontalBorderType"
          LeftBorderType: "LeftBorderType"
          TopBorderSize: 2
          TableRows:
          - Path: "Path"
            RowCells:
            - Path: "Path"
              CellWidthMode: "CellWidthMode"
              CellWidth: "CellWidth"
              CellIndex: 6
              CellShadingColor: "CellShadingColor"
              Paragraphs:
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              CellShadingFill: "CellShadingFill"
              CellShadingPattern: "CellShadingPattern"
            - Path: "Path"
              CellWidthMode: "CellWidthMode"
              CellWidth: "CellWidth"
              CellIndex: 6
              CellShadingColor: "CellShadingColor"
              Paragraphs:
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              CellShadingFill: "CellShadingFill"
              CellShadingPattern: "CellShadingPattern"
            RowIndex: 0
          - Path: "Path"
            RowCells:
            - Path: "Path"
              CellWidthMode: "CellWidthMode"
              CellWidth: "CellWidth"
              CellIndex: 6
              CellShadingColor: "CellShadingColor"
              Paragraphs:
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              CellShadingFill: "CellShadingFill"
              CellShadingPattern: "CellShadingPattern"
            - Path: "Path"
              CellWidthMode: "CellWidthMode"
              CellWidth: "CellWidth"
              CellIndex: 6
              CellShadingColor: "CellShadingColor"
              Paragraphs:
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              - Path: "Path"
                ContentRuns:
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                - Path: "Path"
                  RunIndex: 5
                  FontFamily: "FontFamily"
                  Italic: true
                  FontSize: "FontSize"
                  TextItems:
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  - Path: "Path"
                    TextIndex: 5
                    TextContent: "TextContent"
                  Underline: "Underline"
                  Bold: true
                ParagraphIndex: 1
                StyleID: "StyleID"
              CellShadingFill: "CellShadingFill"
              CellShadingPattern: "CellShadingPattern"
            RowIndex: 0
          CellVerticalBorderSpace: 7
          RightBorderSpace: 1
          CellVerticalBorderType: "CellVerticalBorderType"
          TableIndentationMode: "TableIndentationMode"
          RightBorderColor: "RightBorderColor"
          CellHorizontalBorderSize: 1
          Width: "Width"
          LeftBorderSize: 2
          WidthType: "WidthType"
          TableID: "TableID"
          Path: "Path"
          StartBorderSpace: 4
          StartBorderColor: "StartBorderColor"
          BottomBorderSize: 9
          BottomBorderColor: "BottomBorderColor"
          BottomBorderSpace: 3
          CellHorizontalBorderSpace: 1
          LeftBorderColor: "LeftBorderColor"
          EndBorderSpace: 9
          TableIndentationWidth: 9
          CellVerticalBorderSize: 6
          TopBorderSpace: 7
          BottomBorderType: "BottomBorderType"
          LeftBorderSpace: 4
          EndBorderColor: "EndBorderColor"
          TopBorderColor: "TopBorderColor"
          TopBorderType: "TopBorderType"
          CellVerticalBorderColor: "CellVerticalBorderColor"
          RightBorderSize: 7
          StartBorderSize: 1
          StartBorderType: "StartBorderType"
          EndBorderType: "EndBorderType"
          RightBorderType: "RightBorderType"
          EndBorderSize: 5
          CellHorizontalBorderColor: "CellHorizontalBorderColor"
        AllParagraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
  DocxBody:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ tables"
      AllParagraphs:
        type: "array"
        description: "All paragraphs anywhere in the document; these objects are not\
          \ sequentially placed but are scatted across document"
        items:
          $ref: "#/definitions/DocxParagraph"
      AllTables:
        type: "array"
        description: "All tables anywhere in the document; these objects are not sequentially\
          \ placed but are scatted across the document"
        items:
          $ref: "#/definitions/DocxTable"
    example:
      Path: "Path"
      AllTables:
      - CellHorizontalBorderType: "CellHorizontalBorderType"
        LeftBorderType: "LeftBorderType"
        TopBorderSize: 2
        TableRows:
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        CellVerticalBorderSpace: 7
        RightBorderSpace: 1
        CellVerticalBorderType: "CellVerticalBorderType"
        TableIndentationMode: "TableIndentationMode"
        RightBorderColor: "RightBorderColor"
        CellHorizontalBorderSize: 1
        Width: "Width"
        LeftBorderSize: 2
        WidthType: "WidthType"
        TableID: "TableID"
        Path: "Path"
        StartBorderSpace: 4
        StartBorderColor: "StartBorderColor"
        BottomBorderSize: 9
        BottomBorderColor: "BottomBorderColor"
        BottomBorderSpace: 3
        CellHorizontalBorderSpace: 1
        LeftBorderColor: "LeftBorderColor"
        EndBorderSpace: 9
        TableIndentationWidth: 9
        CellVerticalBorderSize: 6
        TopBorderSpace: 7
        BottomBorderType: "BottomBorderType"
        LeftBorderSpace: 4
        EndBorderColor: "EndBorderColor"
        TopBorderColor: "TopBorderColor"
        TopBorderType: "TopBorderType"
        CellVerticalBorderColor: "CellVerticalBorderColor"
        RightBorderSize: 7
        StartBorderSize: 1
        StartBorderType: "StartBorderType"
        EndBorderType: "EndBorderType"
        RightBorderType: "RightBorderType"
        EndBorderSize: 5
        CellHorizontalBorderColor: "CellHorizontalBorderColor"
      - CellHorizontalBorderType: "CellHorizontalBorderType"
        LeftBorderType: "LeftBorderType"
        TopBorderSize: 2
        TableRows:
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        CellVerticalBorderSpace: 7
        RightBorderSpace: 1
        CellVerticalBorderType: "CellVerticalBorderType"
        TableIndentationMode: "TableIndentationMode"
        RightBorderColor: "RightBorderColor"
        CellHorizontalBorderSize: 1
        Width: "Width"
        LeftBorderSize: 2
        WidthType: "WidthType"
        TableID: "TableID"
        Path: "Path"
        StartBorderSpace: 4
        StartBorderColor: "StartBorderColor"
        BottomBorderSize: 9
        BottomBorderColor: "BottomBorderColor"
        BottomBorderSpace: 3
        CellHorizontalBorderSpace: 1
        LeftBorderColor: "LeftBorderColor"
        EndBorderSpace: 9
        TableIndentationWidth: 9
        CellVerticalBorderSize: 6
        TopBorderSpace: 7
        BottomBorderType: "BottomBorderType"
        LeftBorderSpace: 4
        EndBorderColor: "EndBorderColor"
        TopBorderColor: "TopBorderColor"
        TopBorderType: "TopBorderType"
        CellVerticalBorderColor: "CellVerticalBorderColor"
        RightBorderSize: 7
        StartBorderSize: 1
        StartBorderType: "StartBorderType"
        EndBorderType: "EndBorderType"
        RightBorderType: "RightBorderType"
        EndBorderSize: 5
        CellHorizontalBorderColor: "CellHorizontalBorderColor"
      AllParagraphs:
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
  FindDocxParagraphRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      FindString:
        type: "string"
        description: "Required: The target string to search for in the paragraphs\
          \ of the document"
      MatchCase:
        type: "boolean"
        description: "Optional: True to match case, false to ignore case when matching"
    description: "Input to a request to find matching paragraphs in a Word DOCX document"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      MatchCase: true
      FindString: "FindString"
  FindDocxParagraphResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful; false otherwise"
      MatchingParagraphs:
        type: "array"
        description: "Matching paragraphs"
        items:
          $ref: "#/definitions/DocxParagraph"
      Count:
        type: "integer"
        format: "int32"
        description: "Count of matching paragraphs"
    description: "Result of performing a find matching paragraphs operation on a Word\
      \ Document"
    example:
      Count: 0
      Successful: true
      MatchingParagraphs:
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
  ReplaceDocxParagraphRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      FindString:
        type: "string"
        description: "Required: The target string to search for in the paragraphs\
          \ of the document"
      MatchCase:
        type: "boolean"
        description: "Optional: True to match case, false to ignore case when matching"
      Replacement_Image:
        description: "Optional: Image to replace the paragraph with; note that most\
          \ of the fields in this object are optional and do not need to be supplied"
        $ref: "#/definitions/DocxImage"
    description: "Input to a request to replace matching paragraphs in a Word DOCX\
      \ document"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      MatchCase: true
      FindString: "FindString"
      Replacement_Image:
        Path: "Path"
        ImageDataEmbedId: "ImageDataEmbedId"
        YOffset: 5
        XOffset: 5
        InlineWithText: true
        ImageInternalFileName: "ImageInternalFileName"
        ImageName: "ImageName"
        ImageHeight: 1
        ImageWidth: 6
        ImageId: 0
        ImageDescription: "ImageDescription"
        ImageDataContentType: "ImageDataContentType"
        ImageContentsURL: "ImageContentsURL"
  ReplaceDocxParagraphResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful; false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL of the edited document"
    description: "Result of performing a replace matching paragraphs operation on\
      \ a Word Document"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  GetDocxPagesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      MaximumPages:
        type: "integer"
        format: "int32"
        description: "Optional: Maximum number of pages to return; set to 0 or do\
          \ not supply to return all pages"
    description: "Input to a Get Word DOCX Document Pages request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      MaximumPages: 0
  GetDocxPagesResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Pages:
        type: "array"
        description: "Pages in the document"
        items:
          $ref: "#/definitions/DocxPage"
      PageCount:
        type: "integer"
        format: "int32"
        description: "Count of pages"
    description: "Result of getting pages from a Word Document DOCX"
    example:
      Pages:
      - PageNumber: 0
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
      - PageNumber: 0
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
      PageCount: 6
      Successful: true
  DocxPage:
    type: "object"
    properties:
      PageNumber:
        type: "integer"
        format: "int32"
        description: "Page number of this page, 1-based"
      Paragraphs:
        type: "array"
        description: "All paragraphs anywhere in the document; these objects are not\
          \ sequentially placed but are scatted across document"
        items:
          $ref: "#/definitions/DocxParagraph"
    description: "One page in a Word Document DOCX"
    example:
      PageNumber: 0
      Paragraphs:
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
  GetDocxGetCommentsRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Word DOCX Document comments request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetDocxCommentsResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Comments:
        type: "array"
        description: "Comments in the document"
        items:
          $ref: "#/definitions/DocxComment"
      CommentCount:
        type: "integer"
        format: "int32"
        description: "The number of comments in the document"
    description: "Result of getting comments from a Word Document DOCX"
    example:
      Comments:
      - Path: "Path"
        Done: true
        AuthorInitials: "AuthorInitials"
        CommentText: "CommentText"
        IsReply: true
        Author: "Author"
        IsTopLevel: true
        CommentDate: "2000-01-23T04:56:07.000+00:00"
        ParentCommentPath: "ParentCommentPath"
      - Path: "Path"
        Done: true
        AuthorInitials: "AuthorInitials"
        CommentText: "CommentText"
        IsReply: true
        Author: "Author"
        IsTopLevel: true
        CommentDate: "2000-01-23T04:56:07.000+00:00"
        ParentCommentPath: "ParentCommentPath"
      CommentCount: 0
      Successful: true
  DocxComment:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "Path to the comment in the document"
      Author:
        type: "string"
        description: "Author name of the comment"
      AuthorInitials:
        type: "string"
        description: "Initials of the author of the comment"
      CommentText:
        type: "string"
        description: "Text content of the comment"
      CommentDate:
        type: "string"
        format: "date-time"
        description: "Date timestamp of the comment"
      IsTopLevel:
        type: "boolean"
        description: "True if the comment is at the top level, false if this comment\
          \ is a child reply of another comment"
      IsReply:
        type: "boolean"
        description: "True if this comment is a reply to another comment, false otherwise"
      ParentCommentPath:
        type: "string"
        description: "Path to the parent of this comment, if this comment is a reply,\
          \ otherwise this value will be null"
      Done:
        type: "boolean"
        description: "True if this comment is marked as Done in Word, otherwise it\
          \ is false"
    description: "Comment in a Word Document"
    example:
      Path: "Path"
      Done: true
      AuthorInitials: "AuthorInitials"
      CommentText: "CommentText"
      IsReply: true
      Author: "Author"
      IsTopLevel: true
      CommentDate: "2000-01-23T04:56:07.000+00:00"
      ParentCommentPath: "ParentCommentPath"
  GetDocxGetCommentsHierarchicalRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Word DOCX Document comments hierarchically request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetDocxCommentsHierarchicalResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Comments:
        type: "array"
        description: "Comments in the document"
        items:
          $ref: "#/definitions/DocxTopLevelComment"
      TopLevelCommentCount:
        type: "integer"
        format: "int32"
        description: "The number of comments in the document"
    description: "Result of getting comments hierarchically from a Word Document DOCX"
    example:
      TopLevelCommentCount: 0
      Comments:
      - Path: "Path"
        Done: true
        AuthorInitials: "AuthorInitials"
        CommentText: "CommentText"
        ReplyChildComments:
        - Path: "Path"
          Done: true
          AuthorInitials: "AuthorInitials"
          CommentText: "CommentText"
          IsReply: true
          Author: "Author"
          IsTopLevel: true
          CommentDate: "2000-01-23T04:56:07.000+00:00"
          ParentCommentPath: "ParentCommentPath"
        - Path: "Path"
          Done: true
          AuthorInitials: "AuthorInitials"
          CommentText: "CommentText"
          IsReply: true
          Author: "Author"
          IsTopLevel: true
          CommentDate: "2000-01-23T04:56:07.000+00:00"
          ParentCommentPath: "ParentCommentPath"
        Author: "Author"
        CommentDate: "2000-01-23T04:56:07.000+00:00"
      - Path: "Path"
        Done: true
        AuthorInitials: "AuthorInitials"
        CommentText: "CommentText"
        ReplyChildComments:
        - Path: "Path"
          Done: true
          AuthorInitials: "AuthorInitials"
          CommentText: "CommentText"
          IsReply: true
          Author: "Author"
          IsTopLevel: true
          CommentDate: "2000-01-23T04:56:07.000+00:00"
          ParentCommentPath: "ParentCommentPath"
        - Path: "Path"
          Done: true
          AuthorInitials: "AuthorInitials"
          CommentText: "CommentText"
          IsReply: true
          Author: "Author"
          IsTopLevel: true
          CommentDate: "2000-01-23T04:56:07.000+00:00"
          ParentCommentPath: "ParentCommentPath"
        Author: "Author"
        CommentDate: "2000-01-23T04:56:07.000+00:00"
      Successful: true
  DocxTopLevelComment:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "Path to the comment in the document"
      Author:
        type: "string"
        description: "Author name of the comment"
      AuthorInitials:
        type: "string"
        description: "Initials of the author of the comment"
      CommentText:
        type: "string"
        description: "Text content of the comment"
      CommentDate:
        type: "string"
        format: "date-time"
        description: "Date timestamp of the comment"
      ReplyChildComments:
        type: "array"
        description: "Child comments, that are replies to this one"
        items:
          $ref: "#/definitions/DocxComment"
      Done:
        type: "boolean"
        description: "True if this comment is marked as Done in Word, otherwise it\
          \ is false"
    description: "Top-level Comment in a Word Document"
    example:
      Path: "Path"
      Done: true
      AuthorInitials: "AuthorInitials"
      CommentText: "CommentText"
      ReplyChildComments:
      - Path: "Path"
        Done: true
        AuthorInitials: "AuthorInitials"
        CommentText: "CommentText"
        IsReply: true
        Author: "Author"
        IsTopLevel: true
        CommentDate: "2000-01-23T04:56:07.000+00:00"
        ParentCommentPath: "ParentCommentPath"
      - Path: "Path"
        Done: true
        AuthorInitials: "AuthorInitials"
        CommentText: "CommentText"
        IsReply: true
        Author: "Author"
        IsTopLevel: true
        CommentDate: "2000-01-23T04:56:07.000+00:00"
        ParentCommentPath: "ParentCommentPath"
      Author: "Author"
      CommentDate: "2000-01-23T04:56:07.000+00:00"
  DocxInsertCommentOnParagraphRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      ParagraphPath:
        type: "string"
        description: "Path to the paragraph to attach the comment to.  You can get\
          \ the Path by retrieving all of the Paragraphs in document by calling Get\
          \ Body and taking the Path property of the desired paragraph to add the\
          \ comment to."
      CommentToInsert:
        description: "Comment to insert"
        $ref: "#/definitions/DocxComment"
    description: "Input to a Insert Comment on Paragraph request"
    example:
      InputFileBytes: "InputFileBytes"
      ParagraphPath: "ParagraphPath"
      InputFileUrl: "InputFileUrl"
      CommentToInsert:
        Path: "Path"
        Done: true
        AuthorInitials: "AuthorInitials"
        CommentText: "CommentText"
        IsReply: true
        Author: "Author"
        IsTopLevel: true
        CommentDate: "2000-01-23T04:56:07.000+00:00"
        ParentCommentPath: "ParentCommentPath"
  InsertDocxCommentOnParagraphResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Insert-Comment-on-Paragraph command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  RemoveDocxPagesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      StartDeletePageNumber:
        type: "integer"
        format: "int32"
        description: "Page number (1-based) to start deleting pages; inclusive"
      EndDeletePageNumber:
        type: "integer"
        format: "int32"
        description: "Page number (1-based) to stop deleting pages; inclusive"
    description: "Input to a Remove Word DOCX Document Pages request"
    example:
      StartDeletePageNumber: 0
      EndDeletePageNumber: 6
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetDocxHeadersAndFootersRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Tables request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetDocxHeadersAndFootersResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Headers:
        type: "array"
        items:
          $ref: "#/definitions/DocxHeader"
      Footers:
        type: "array"
        items:
          $ref: "#/definitions/DocxFooter"
    description: "Result of running a Get-Tables command"
    example:
      Headers:
      - Path: "Path"
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        SectionsWithHeader:
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
      - Path: "Path"
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        SectionsWithHeader:
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
      Footers:
      - Path: "Path"
        SectionsWithFooter:
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
      - Path: "Path"
        SectionsWithFooter:
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
      Successful: true
  DocxHeader:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ tables"
      Paragraphs:
        type: "array"
        description: "Paragraphs in this header"
        items:
          $ref: "#/definitions/DocxParagraph"
      SectionsWithHeader:
        type: "array"
        description: "Sections that the header is applied to"
        items:
          $ref: "#/definitions/DocxSection"
    description: "Header of a Word Document (DOCX)"
    example:
      Path: "Path"
      Paragraphs:
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
      SectionsWithHeader:
      - Path: "Path"
        StartingPageNumbers:
        - 0
        - 0
      - Path: "Path"
        StartingPageNumbers:
        - 0
        - 0
  DocxFooter:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ tables"
      Paragraphs:
        type: "array"
        description: "Paragraphs in this footer"
        items:
          $ref: "#/definitions/DocxParagraph"
      SectionsWithFooter:
        type: "array"
        description: "Sections that the footer is applied to"
        items:
          $ref: "#/definitions/DocxSection"
    description: "Footer in a Word Document (DOCX)"
    example:
      Path: "Path"
      SectionsWithFooter:
      - Path: "Path"
        StartingPageNumbers:
        - 0
        - 0
      - Path: "Path"
        StartingPageNumbers:
        - 0
        - 0
      Paragraphs:
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
      - Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
  DocxSetHeaderRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      HeaderToApply:
        description: "Header to apply"
        $ref: "#/definitions/DocxHeader"
    description: "Input to a set-header command"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      HeaderToApply:
        Path: "Path"
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        SectionsWithHeader:
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
  DocxSetHeaderResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a set-header command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  DocxSetFooterRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      FooterToApply:
        description: "Footer to apply"
        $ref: "#/definitions/DocxFooter"
    description: "Input to set-footer command"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      FooterToApply:
        Path: "Path"
        SectionsWithFooter:
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
        - Path: "Path"
          StartingPageNumbers:
          - 0
          - 0
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
  DocxSetFooterResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a set-footer command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  DocxSetFooterAddPageNumberRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      PrependText:
        type: "string"
        description: "Optional: extra text to add before the page number, for example\
          \ if you want to show \"Page 1\" then you can set PrependText to \"Page\""
    description: "Input to set-footer/add-page-number command"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      PrependText: "PrependText"
  DocxInsertImageRequest:
    type: "object"
    properties:
      InputDocumentFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputDocumentFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      InputImageFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input image file to operate on; if you\
          \ supply this value do not supply InputImageFileUrl or ImageToAdd."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputImageFileUrl:
        type: "string"
        description: "Optional: URL of an image file to operate on as input; if you\
          \ supply this value do not supply InputImageFileBytes or ImageToAdd.  This\
          \ can be a public URL, or you can also use the begin-editing API to upload\
          \ a document and pass in the secure URL result from that operation as the\
          \ URL here (this URL is not public)."
      ImageToAdd:
        description: "Optional: Image to add; if you supply in this object, do not\
          \ supply InputImageFileBytes or InputImageFileUrl."
        $ref: "#/definitions/DocxImage"
      InsertPlacement:
        type: "string"
        description: "Optional; default is DocumentEnd.  Placement Type of the insert;\
          \ possible values are: DocumentStart (very beginning of the document), DocumentEnd\
          \ (very end of the document), BeforeExistingObject (right before an existing\
          \ object - fill in the InsertPath field using the Path value from an existing\
          \ object), AfterExistingObject (right after an existing object - fill in\
          \ the InsertPath field using the Path value from an existing object)"
      InsertPath:
        type: "string"
        description: "Optional; location within the document to insert the object;\
          \ fill in the InsertPath field using the Path value from an existing object.\
          \  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject"
      WidthInEMUs:
        type: "integer"
        format: "int64"
        description: "Optional: The width of the image in EMUs"
      HeightInEMUs:
        type: "integer"
        format: "int64"
        description: "Optional: The height of the image in EMUs"
    description: "Input to set-footer command"
    example:
      InputDocumentFileBytes: "InputDocumentFileBytes"
      InsertPlacement: "InsertPlacement"
      HeightInEMUs: 6
      WidthInEMUs: 0
      InputImageFileBytes: "InputImageFileBytes"
      InputImageFileUrl: "InputImageFileUrl"
      InsertPath: "InsertPath"
      InputDocumentFileUrl: "InputDocumentFileUrl"
      ImageToAdd:
        Path: "Path"
        ImageDataEmbedId: "ImageDataEmbedId"
        YOffset: 5
        XOffset: 5
        InlineWithText: true
        ImageInternalFileName: "ImageInternalFileName"
        ImageName: "ImageName"
        ImageHeight: 1
        ImageWidth: 6
        ImageId: 0
        ImageDescription: "ImageDescription"
        ImageDataContentType: "ImageDataContentType"
        ImageContentsURL: "ImageContentsURL"
  DocxInsertImageResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a set-footer command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  InsertDocxInsertParagraphRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      ParagraphToInsert:
        description: "Table you would like to insert"
        $ref: "#/definitions/DocxParagraph"
      InsertPlacement:
        type: "string"
        description: "Optional; default is DocumentEnd.  Placement Type of the insert;\
          \ possible values are: DocumentStart (very beginning of the document), DocumentEnd\
          \ (very end of the document), BeforeExistingObject (right before an existing\
          \ object - fill in the InsertPath field using the Path value from an existing\
          \ object), AfterExistingObject (right after an existing object - fill in\
          \ the InsertPath field using the Path value from an existing object)"
      InsertPath:
        type: "string"
        description: "Optional; location within the document to insert the object;\
          \ fill in the InsertPath field using the Path value from an existing object.\
          \  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject"
    description: "Input to a Insert Paragraph request"
    example:
      InputFileBytes: "InputFileBytes"
      InsertPlacement: "InsertPlacement"
      InputFileUrl: "InputFileUrl"
      InsertPath: "InsertPath"
      ParagraphToInsert:
        Path: "Path"
        ContentRuns:
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        - Path: "Path"
          RunIndex: 5
          FontFamily: "FontFamily"
          Italic: true
          FontSize: "FontSize"
          TextItems:
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          - Path: "Path"
            TextIndex: 5
            TextContent: "TextContent"
          Underline: "Underline"
          Bold: true
        ParagraphIndex: 1
        StyleID: "StyleID"
  InsertDocxInsertParagraphResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Insert-Paragraph command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  InsertDocxTablesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      TableToInsert:
        description: "Table you would like to insert"
        $ref: "#/definitions/DocxTable"
      InsertPlacement:
        type: "string"
        description: "Optional; default is DocumentEnd.  Placement Type of the insert;\
          \ possible values are: DocumentStart (very beginning of the document), DocumentEnd\
          \ (very end of the document), BeforeExistingObject (right before an existing\
          \ object - fill in the InsertPath field using the Path value from an existing\
          \ object), AfterExistingObject (right after an existing object - fill in\
          \ the InsertPath field using the Path value from an existing object)"
      InsertPath:
        type: "string"
        description: "Optional; location within the document to insert the object;\
          \ fill in the InsertPath field using the Path value from an existing object.\
          \  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject"
    description: "Input to a Insert Tables request"
    example:
      InputFileBytes: "InputFileBytes"
      TableToInsert:
        CellHorizontalBorderType: "CellHorizontalBorderType"
        LeftBorderType: "LeftBorderType"
        TopBorderSize: 2
        TableRows:
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        - Path: "Path"
          RowCells:
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          - Path: "Path"
            CellWidthMode: "CellWidthMode"
            CellWidth: "CellWidth"
            CellIndex: 6
            CellShadingColor: "CellShadingColor"
            Paragraphs:
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            - Path: "Path"
              ContentRuns:
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              - Path: "Path"
                RunIndex: 5
                FontFamily: "FontFamily"
                Italic: true
                FontSize: "FontSize"
                TextItems:
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                - Path: "Path"
                  TextIndex: 5
                  TextContent: "TextContent"
                Underline: "Underline"
                Bold: true
              ParagraphIndex: 1
              StyleID: "StyleID"
            CellShadingFill: "CellShadingFill"
            CellShadingPattern: "CellShadingPattern"
          RowIndex: 0
        CellVerticalBorderSpace: 7
        RightBorderSpace: 1
        CellVerticalBorderType: "CellVerticalBorderType"
        TableIndentationMode: "TableIndentationMode"
        RightBorderColor: "RightBorderColor"
        CellHorizontalBorderSize: 1
        Width: "Width"
        LeftBorderSize: 2
        WidthType: "WidthType"
        TableID: "TableID"
        Path: "Path"
        StartBorderSpace: 4
        StartBorderColor: "StartBorderColor"
        BottomBorderSize: 9
        BottomBorderColor: "BottomBorderColor"
        BottomBorderSpace: 3
        CellHorizontalBorderSpace: 1
        LeftBorderColor: "LeftBorderColor"
        EndBorderSpace: 9
        TableIndentationWidth: 9
        CellVerticalBorderSize: 6
        TopBorderSpace: 7
        BottomBorderType: "BottomBorderType"
        LeftBorderSpace: 4
        EndBorderColor: "EndBorderColor"
        TopBorderColor: "TopBorderColor"
        TopBorderType: "TopBorderType"
        CellVerticalBorderColor: "CellVerticalBorderColor"
        RightBorderSize: 7
        StartBorderSize: 1
        StartBorderType: "StartBorderType"
        EndBorderType: "EndBorderType"
        RightBorderType: "RightBorderType"
        EndBorderSize: 5
        CellHorizontalBorderColor: "CellHorizontalBorderColor"
      InsertPlacement: "InsertPlacement"
      InputFileUrl: "InputFileUrl"
      InsertPath: "InsertPath"
  InsertDocxTablesResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Insert-Tables command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  GetDocxTableRowRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      TablePath:
        type: "string"
        description: "Path to the table to retrievew the row from"
      TableRowRowIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the row to retrieve (e.g. 0, 1, 2, ...) in\
          \ the table"
    description: "Input to a get DOCX table row request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      TablePath: "TablePath"
      TableRowRowIndex: 0
  GetDocxTableRowResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      RowResult:
        description: "Contents of the table row that was requested"
        $ref: "#/definitions/DocxTableRow"
    description: "Result of running an Get Table Row command"
    example:
      RowResult:
        Path: "Path"
        RowCells:
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        RowIndex: 0
      Successful: true
  DeleteDocxTableRowRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      TablePath:
        type: "string"
        description: "Path to the table to delete the row from"
      TableRowRowIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the row to delete (e.g. 0, 1, 2, ...) in the\
          \ table"
    description: "Input to a delete DOCX table row request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      TablePath: "TablePath"
      TableRowRowIndex: 0
  DeleteDocxTableRowResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Delete Table Row command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  DeleteDocxTableRowRangeRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      TablePath:
        type: "string"
        description: "Path to the table to delete the row from"
      TableRowRowIndexStart:
        type: "integer"
        format: "int32"
        description: "0-based index of the row to begin deleting rows (e.g. 0, 1,\
          \ 2, ...) in the table"
      TableRowRowIndexEnd:
        type: "integer"
        format: "int32"
        description: "0-based index of the row to stop deleting rows (e.g. 0, 1, 2,\
          \ ...) in the table"
    description: "Input to a delete DOCX table row range request"
    example:
      TableRowRowIndexEnd: 6
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      TablePath: "TablePath"
      TableRowRowIndexStart: 0
  DeleteDocxTableRowRangeResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Delete Table Row Range command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  InsertDocxTableRowRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      RowToInsert:
        description: "Table you would like to insert"
        $ref: "#/definitions/DocxTableRow"
      InsertPlacement:
        type: "string"
        description: "Optional; default is TableEnd.  Placement Type of the insert;\
          \ possible values are: TableStart (very beginning of the table), TableEnd\
          \ (very end of the document), or a 0-based row index number as an integer,\
          \ 0 being the first row in the table, 1 being the second row in the table,\
          \ 2 being the third row in the table, etc. to insert this row after"
      ExistingTablePath:
        type: "string"
        description: "Required; the path to the existing table to modify"
    description: "Input to a Insert Table Row request"
    example:
      InputFileBytes: "InputFileBytes"
      InsertPlacement: "InsertPlacement"
      InputFileUrl: "InputFileUrl"
      ExistingTablePath: "ExistingTablePath"
      RowToInsert:
        Path: "Path"
        RowCells:
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        RowIndex: 0
  InsertDocxTableRowResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Insert-Table Row command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  UpdateDocxTableRowRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      RowToUpdate:
        description: "Table row contents you would like to update the row with"
        $ref: "#/definitions/DocxTableRow"
      TableRowIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the Table Row to update"
      ExistingTablePath:
        type: "string"
        description: "Required; the path to the existing table to modify"
    description: "Input to a Update Table Row request"
    example:
      InputFileBytes: "InputFileBytes"
      TableRowIndex: 0
      InputFileUrl: "InputFileUrl"
      ExistingTablePath: "ExistingTablePath"
      RowToUpdate:
        Path: "Path"
        RowCells:
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        - Path: "Path"
          CellWidthMode: "CellWidthMode"
          CellWidth: "CellWidth"
          CellIndex: 6
          CellShadingColor: "CellShadingColor"
          Paragraphs:
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          - Path: "Path"
            ContentRuns:
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            - Path: "Path"
              RunIndex: 5
              FontFamily: "FontFamily"
              Italic: true
              FontSize: "FontSize"
              TextItems:
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              - Path: "Path"
                TextIndex: 5
                TextContent: "TextContent"
              Underline: "Underline"
              Bold: true
            ParagraphIndex: 1
            StyleID: "StyleID"
          CellShadingFill: "CellShadingFill"
          CellShadingPattern: "CellShadingPattern"
        RowIndex: 0
  UpdateDocxTableRowResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Update Table Row command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  UpdateDocxTableCellRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      CellToUpdate:
        description: "Table cell contents you would like to update the cell with"
        $ref: "#/definitions/DocxTableCell"
      TableRowIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the Table Row to update"
      TableCellIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the Table Cell (within the row) to update"
      ExistingTablePath:
        type: "string"
        description: "Required; the path to the existing table to modify"
    description: "Input to a Update Table Cell request"
    example:
      InputFileBytes: "InputFileBytes"
      TableRowIndex: 0
      TableCellIndex: 6
      InputFileUrl: "InputFileUrl"
      ExistingTablePath: "ExistingTablePath"
      CellToUpdate:
        Path: "Path"
        CellWidthMode: "CellWidthMode"
        CellWidth: "CellWidth"
        CellIndex: 6
        CellShadingColor: "CellShadingColor"
        Paragraphs:
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        - Path: "Path"
          ContentRuns:
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          - Path: "Path"
            RunIndex: 5
            FontFamily: "FontFamily"
            Italic: true
            FontSize: "FontSize"
            TextItems:
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            - Path: "Path"
              TextIndex: 5
              TextContent: "TextContent"
            Underline: "Underline"
            Bold: true
          ParagraphIndex: 1
          StyleID: "StyleID"
        CellShadingFill: "CellShadingFill"
        CellShadingPattern: "CellShadingPattern"
  UpdateDocxTableCellResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Update Table Cell command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  RemoveDocxHeadersAndFootersRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      RemoveHeaders:
        type: "boolean"
        description: "True if you would like to remove all headers from the input\
          \ document, false otherwise"
      RemoveFooters:
        type: "boolean"
        description: "True if you would like to remove all footers from the input\
          \ document, false otherwise"
    description: "Input to a Remove Headers and Footers request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      RemoveHeaders: true
      RemoveFooters: true
  RemoveDocxHeadersAndFootersResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL of the resulting edited document; this is a secure URL and\
          \ cannot be downloaded without adding the Apikey header; it is also temporary,\
          \ stored in an in-memory cache and will be deleted.  Call Finish-Editing\
          \ to get the result document contents."
    description: "Result of running a Remove Headers and Footers command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  DocxRemoveObjectRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      PathToObjectToRemove:
        type: "string"
        description: "Path within the document of the object to delete; fill in the\
          \ PathToObjectToRemove field using the Path value from an existing object."
    description: "Input to a Insert Paragraph request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      PathToObjectToRemove: "PathToObjectToRemove"
  DocxRemoveObjectResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited DOCX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Remove-Object command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  CreateBlankSpreadsheetRequest:
    type: "object"
    properties:
      WorksheetName:
        type: "string"
        description: "The blank Spreadsheet will have a default Worksheet in it; supply\
          \ a name, or if left empty, will default to Worksheet1"
    description: "Input to a Create Blank Spreadsheet request"
    example:
      WorksheetName: "WorksheetName"
  CreateBlankSpreadsheetResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of creating a blank worksheet"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  CreateSpreadsheetFromDataRequest:
    type: "object"
    properties:
      WorksheetName:
        type: "string"
        description: "Optional; The new Spreadsheet will have a default Worksheet\
          \ in it; supply a name, or if left empty, will default to Worksheet1"
      Rows:
        type: "array"
        description: "Required; Rows and cells to populate the spreadsheet with"
        items:
          $ref: "#/definitions/XlsxSpreadsheetRow"
    description: "Input to Create a new Spreadsheet request"
    example:
      WorksheetName: "WorksheetName"
      Rows:
      - Path: "Path"
        Cells:
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
      - Path: "Path"
        Cells:
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
  XlsxSpreadsheetRow:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ rows"
      Cells:
        type: "array"
        description: "Spreadsheet Cells in the spreadsheet row"
        items:
          $ref: "#/definitions/XlsxSpreadsheetCell"
    description: "Row in an Excel spreadsheet worksheet"
    example:
      Path: "Path"
      Cells:
      - Path: "Path"
        Formula: "Formula"
        StyleIndex: 0
        TextValue: "TextValue"
        CellIdentifier: "CellIdentifier"
      - Path: "Path"
        Formula: "Formula"
        StyleIndex: 0
        TextValue: "TextValue"
        CellIdentifier: "CellIdentifier"
  XlsxSpreadsheetCell:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ rows"
      TextValue:
        type: "string"
        description: "Text value of the cell"
      CellIdentifier:
        type: "string"
        description: "Cell reference of the cell, e.g. A1, Z22, etc."
      StyleIndex:
        type: "integer"
        format: "int32"
        description: "Identifier for the style to apply to this style"
      Formula:
        type: "string"
    description: "Cell in an Excel Spreadsheet worksheet"
    example:
      Path: "Path"
      Formula: "Formula"
      StyleIndex: 0
      TextValue: "TextValue"
      CellIdentifier: "CellIdentifier"
  CreateSpreadsheetFromDataResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of creating a new worksheet from rows and cells"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  GetXlsxWorksheetsRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Worksheets request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetXlsxWorksheetsResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Worksheets:
        type: "array"
        description: "Worksheets in the Excel XLSX spreadsheet"
        items:
          $ref: "#/definitions/XlsxWorksheet"
    description: "Result of running a Get-Worksheets command"
    example:
      Successful: true
      Worksheets:
      - Path: "Path"
        WorksheetName: "WorksheetName"
      - Path: "Path"
        WorksheetName: "WorksheetName"
  XlsxWorksheet:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ worksheets"
      WorksheetName:
        type: "string"
        description: "User-facing name of the worksheet tab"
    description: "A worksheet (tab) in an Excel (XLSX) spreadsheet"
    example:
      Path: "Path"
      WorksheetName: "WorksheetName"
  GetXlsxRowsAndCellsRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToQuery:
        description: "Optional; Worksheet (tab) within the spreadsheet to get the\
          \ rows and cells of; leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
    description: "Input to a Get Worksheets request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      WorksheetToQuery:
        Path: "Path"
        WorksheetName: "WorksheetName"
  GetXlsxRowsAndCellsResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Rows:
        type: "array"
        description: "Spreadsheet Rows in the Excel XLSX document"
        items:
          $ref: "#/definitions/XlsxSpreadsheetRow"
    description: "Result of running a Get-Worksheets command"
    example:
      Successful: true
      Rows:
      - Path: "Path"
        Cells:
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
      - Path: "Path"
        Cells:
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
  GetXlsxSpecificRowRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToQuery:
        description: "Optional; Worksheet (tab) within the spreadsheet to get the\
          \ specific row from; leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
      Path:
        type: "string"
        description: "Required; Full path for the desired row"
    description: "Input to a Get-Specific-Row request"
    example:
      Path: "Path"
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      WorksheetToQuery:
        Path: "Path"
        WorksheetName: "WorksheetName"
  GetXlsxSpecificRowResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Row:
        description: "Spreadsheet Row from the Excel XLSX document"
        $ref: "#/definitions/XlsxSpreadsheetRow"
    description: "Result of running a Get-Specific-Row command"
    example:
      Row:
        Path: "Path"
        Cells:
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
      Successful: true
  ClearXlsxRowRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToEdit:
        description: "Optional; Worksheet (tab) within the spreadsheet to get the\
          \ specific row from; leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
      RowIndex:
        type: "integer"
        format: "int32"
        description: "Required; Index for the desired row to be cleared"
    description: "Input to a Clear-Row request"
    example:
      InputFileBytes: "InputFileBytes"
      RowIndex: 0
      InputFileUrl: "InputFileUrl"
      WorksheetToEdit:
        Path: "Path"
        WorksheetName: "WorksheetName"
  ClearXlsxRowResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a Clear-Row command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  AppendXlsxRowRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToUpdate:
        description: "Optional; Worksheet (tab) within the spreadsheet to get the\
          \ specific row from; leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
      Row:
        description: "Required; Row to be appended to the worksheet."
        $ref: "#/definitions/XlsxSpreadsheetRow"
    description: "Input to a Append-Row request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      WorksheetToUpdate:
        Path: "Path"
        WorksheetName: "WorksheetName"
      Row:
        Path: "Path"
        Cells:
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
        - Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
  AppendXlsxRowResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running an Append-Row command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  RemoveXlsxWorksheetRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToRemove:
        description: "Required; Worksheet (tab) within the spreadsheet to delete;\
          \ leave blank to default to the first worksheet.  Use the Get Worksheets\
          \ API to enumerate available worksheets in a spreadsheet."
        $ref: "#/definitions/XlsxWorksheet"
    description: "Input to a Remove Excel XLSX Spreadsheet worksheet request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      WorksheetToRemove:
        Path: "Path"
        WorksheetName: "WorksheetName"
  GetXlsxCellRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToQuery:
        description: "Optional; Worksheet (tab) within the spreadsheet to get the\
          \ rows and cells of; leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
      RowIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the row, 0, 1, 2, ... to retrieve"
      CellIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the cell, 0, 1, 2, ... in the row to retrieve"
    description: "Input to a Get Cell request"
    example:
      InputFileBytes: "InputFileBytes"
      RowIndex: 0
      CellIndex: 6
      InputFileUrl: "InputFileUrl"
      WorksheetToQuery:
        Path: "Path"
        WorksheetName: "WorksheetName"
  GetXlsxCellResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Cell:
        description: "Requested Cell in the Excel XLSX document"
        $ref: "#/definitions/XlsxSpreadsheetCell"
    description: "Result of running a Get-Cell command"
    example:
      Successful: true
      Cell:
        Path: "Path"
        Formula: "Formula"
        StyleIndex: 0
        TextValue: "TextValue"
        CellIdentifier: "CellIdentifier"
  GetXlsxCellByIdentifierRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToQuery:
        description: "Optional; Worksheet (tab) within the spreadsheet to get the\
          \ rows and cells of; leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
      CellIdentifier:
        type: "string"
        description: "Required; Excel cell identifier, e.g. A1, B22, C33, etc."
    description: "Input to a Get Cell by cell identifier request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      WorksheetToQuery:
        Path: "Path"
        WorksheetName: "WorksheetName"
      CellIdentifier: "CellIdentifier"
  GetXlsxCellByIdentifierResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Cell:
        description: "Requested Cell in the Excel XLSX document"
        $ref: "#/definitions/XlsxSpreadsheetCell"
    description: "Result of running a Get-Cell command"
    example:
      Successful: true
      Cell:
        Path: "Path"
        Formula: "Formula"
        StyleIndex: 0
        TextValue: "TextValue"
        CellIdentifier: "CellIdentifier"
  ClearXlsxCellRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToUpdate:
        description: "Optional; Worksheet (tab) within the spreadsheet to update;\
          \ leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
      RowIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the row, 0, 1, 2, ... to clear"
      CellIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the cell, 0, 1, 2, ... in the row to clear"
    description: "Input to a Clear Cell in XLSX Worksheet request"
    example:
      InputFileBytes: "InputFileBytes"
      RowIndex: 0
      CellIndex: 6
      InputFileUrl: "InputFileUrl"
      WorksheetToUpdate:
        Path: "Path"
        WorksheetName: "WorksheetName"
  ClearXlsxCellResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a Clear XLSX Cell command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  SetXlsxCellRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToUpdate:
        description: "Optional; Worksheet (tab) within the spreadsheet to update;\
          \ leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
      RowIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the row, 0, 1, 2, ... to set"
      CellIndex:
        type: "integer"
        format: "int32"
        description: "0-based index of the cell, 0, 1, 2, ... in the row to set"
      CellValue:
        description: "New Cell value to update/overwrite into the Excel XLSX spreadsheet"
        $ref: "#/definitions/XlsxSpreadsheetCell"
    description: "Input to a Set Cell in XLSX Worksheets request"
    example:
      InputFileBytes: "InputFileBytes"
      RowIndex: 0
      CellIndex: 6
      InputFileUrl: "InputFileUrl"
      WorksheetToUpdate:
        Path: "Path"
        WorksheetName: "WorksheetName"
      CellValue:
        Path: "Path"
        Formula: "Formula"
        StyleIndex: 0
        TextValue: "TextValue"
        CellIdentifier: "CellIdentifier"
  SetXlsxCellResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a Set Cell in XLSX Worksheets command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  SetXlsxCellByIdentifierRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToUpdate:
        description: "Optional; Worksheet (tab) within the spreadsheet to update;\
          \ leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
      CellIdentifier:
        type: "string"
        description: "The Excel cell identifier (e.g. A1, B2, C33, etc.) of the cell\
          \ to update"
      CellValue:
        description: "New Cell value to update/overwrite into the Excel XLSX spreadsheet"
        $ref: "#/definitions/XlsxSpreadsheetCell"
    description: "Input to a Set Cell by identifier in XLSX Worksheets request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      WorksheetToUpdate:
        Path: "Path"
        WorksheetName: "WorksheetName"
      CellValue:
        Path: "Path"
        Formula: "Formula"
        StyleIndex: 0
        TextValue: "TextValue"
        CellIdentifier: "CellIdentifier"
      CellIdentifier: "CellIdentifier"
  SetXlsxCellByIdentifierResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a Set Cell by identifier in XLSX Worksheets command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  GetXlsxColumnsRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToQuery:
        description: "Optional; Worksheet (tab) within the spreadsheet to get the\
          \ columns of; leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
    description: "Input to a Get Columns request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      WorksheetToQuery:
        Path: "Path"
        WorksheetName: "WorksheetName"
  GetXlsxColumnsResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Columns:
        type: "array"
        description: "Spreadsheet Columns in the XLSX document"
        items:
          $ref: "#/definitions/XlsxSpreadsheetColumn"
    description: "Result of running a Get-Columns command"
    example:
      Columns:
      - Path: "Path"
        HeadingCell:
          Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
      - Path: "Path"
        HeadingCell:
          Path: "Path"
          Formula: "Formula"
          StyleIndex: 0
          TextValue: "TextValue"
          CellIdentifier: "CellIdentifier"
      Successful: true
  XlsxSpreadsheetColumn:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ rows"
      HeadingCell:
        description: "Heading cell for this column"
        $ref: "#/definitions/XlsxSpreadsheetCell"
    description: "Column in an Excel spreadsheet worksheet"
    example:
      Path: "Path"
      HeadingCell:
        Path: "Path"
        Formula: "Formula"
        StyleIndex: 0
        TextValue: "TextValue"
        CellIdentifier: "CellIdentifier"
  GetXlsxImagesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToQuery:
        description: "Optional; Worksheet (tab) within the spreadsheet to get the\
          \ images of; leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
    description: "Input to a Get Images request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      WorksheetToQuery:
        Path: "Path"
        WorksheetName: "WorksheetName"
  GetXlsxImagesResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Images:
        type: "array"
        description: "Spreadsheet Images in the XLSX document"
        items:
          $ref: "#/definitions/XlsxImage"
    description: "Result of running a Get-Images command"
    example:
      Images:
      - Path: "Path"
        ImageDataEmbedId: "ImageDataEmbedId"
        ImageDataContentType: "ImageDataContentType"
        ImageContentsURL: "ImageContentsURL"
        ImageInternalFileName: "ImageInternalFileName"
      - Path: "Path"
        ImageDataEmbedId: "ImageDataEmbedId"
        ImageDataContentType: "ImageDataContentType"
        ImageContentsURL: "ImageContentsURL"
        ImageInternalFileName: "ImageInternalFileName"
      Successful: true
  XlsxImage:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ rows"
      ImageDataEmbedId:
        type: "string"
        description: "Read-only; internal ID for the image contents"
      ImageDataContentType:
        type: "string"
        description: "Read-only; image data MIME content-type"
      ImageInternalFileName:
        type: "string"
        description: "Read-only; internal file name/path for the image"
      ImageContentsURL:
        type: "string"
        description: "URL to the image contents; file is stored in an in-memory cache\
          \ and will be deleted.  Call Finish-Editing to get the contents."
    example:
      Path: "Path"
      ImageDataEmbedId: "ImageDataEmbedId"
      ImageDataContentType: "ImageDataContentType"
      ImageContentsURL: "ImageContentsURL"
      ImageInternalFileName: "ImageInternalFileName"
  GetXlsxStylesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Get Worksheets request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  GetXlsxStylesResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      CellStyles:
        type: "array"
        description: "Cell styles"
        items:
          $ref: "#/definitions/DocxCellStyle"
    description: "Result of running a Get-Worksheets command"
    example:
      CellStyles:
      - Path: "Path"
        BuiltInID: 6
        FormatID: 0
        Name: "Name"
      - Path: "Path"
        BuiltInID: 6
        FormatID: 0
        Name: "Name"
      Successful: true
  DocxCellStyle:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "The Path of the location of this object; leave blank for new\
          \ rows"
      Name:
        type: "string"
        description: "Name of the style"
      FormatID:
        type: "integer"
        format: "int32"
        description: "Format ID of the cell style"
      BuiltInID:
        type: "integer"
        format: "int32"
        description: "Built=in ID of the cell style"
    description: "Style in an Excel spreadsheet"
    example:
      Path: "Path"
      BuiltInID: 6
      FormatID: 0
      Name: "Name"
  InsertXlsxWorksheetRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToInsert:
        description: "Workersheet to insert"
        $ref: "#/definitions/XlsxWorksheet"
    description: "Input to a Insert Worksheets request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      WorksheetToInsert:
        Path: "Path"
        WorksheetName: "WorksheetName"
  InsertXlsxWorksheetResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a insert worksheet command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  RenameXlsxWorksheetRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      WorksheetToRename:
        description: "Optional; Worksheet (tab) within the spreadsheet to get the\
          \ specific row from; leave blank to default to the first worksheet"
        $ref: "#/definitions/XlsxWorksheet"
      NewWorksheetName:
        type: "string"
        description: "Required; The new name to be used for the worksheet"
    description: "Input to a Rename-Worksheet request"
    example:
      WorksheetToRename:
        Path: "Path"
        WorksheetName: "WorksheetName"
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      NewWorksheetName: "NewWorksheetName"
  RenameXlsxWorksheetResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a Rename-Worksheet command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  EnableSharedWorkbookRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Enabled Shared Workbook request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  EnableSharedWorkbookResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a Enable Shared Workbook command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  DisableSharedWorkbookRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
    description: "Input to a Disable Shared Workbook request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
  DisableSharedWorkbookResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      EditedDocumentURL:
        type: "string"
        description: "URL to the edited XLSX file; file is stored in an in-memory\
          \ cache and will be deleted.  Call Finish-Editing to get the result document\
          \ contents."
    description: "Result of running a Disable Shared Workbook command"
    example:
      Successful: true
      EditedDocumentURL: "EditedDocumentURL"
  RemovePptxSlidesRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Optional: Bytes of the input file to operate on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      InputFileUrl:
        type: "string"
        description: "Optional: URL of a file to operate on as input.  This can be\
          \ a public URL, or you can also use the begin-editing API to upload a document\
          \ and pass in the secure URL result from that operation as the URL here\
          \ (this URL is not public)."
      StartDeleteSlideNumber:
        type: "integer"
        format: "int32"
        description: "Slide number (1-based) to start deleting slides; inclusive"
      EndDeleteSlideNumber:
        type: "integer"
        format: "int32"
        description: "Slide number (1-based) to stop deleting slides; inclusive"
    description: "Input to a Remove PowerPoint PPTX Presentation Slides request"
    example:
      InputFileBytes: "InputFileBytes"
      InputFileUrl: "InputFileUrl"
      StartDeleteSlideNumber: 0
      EndDeleteSlideNumber: 6
  HtmlGetLanguageResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      LanguageCode:
        type: "string"
        description: "HTML language code of the HTML document, e.g. \"en\" or \"de\""
    description: "Result of getting the language of the input HTML document"
    example:
      LanguageCode: "LanguageCode"
      Successful: true
  HtmlGetRelCanonicalUrlResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      CanonicalUrl:
        type: "string"
        description: "HTML canonical URL if present"
    description: "Result of getting the canonical URL of the input HTML document"
    example:
      CanonicalUrl: "CanonicalUrl"
      Successful: true
  HtmlGetSitemapUrlResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      CanonicalUrl:
        type: "string"
        description: "HTML sitemap URL if present"
    description: "Result of getting the sitemap URL of the input HTML document"
    example:
      CanonicalUrl: "CanonicalUrl"
      Successful: true
  HtmlGetLinksResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      Links:
        type: "array"
        description: "All hyperlinks in the HTML document"
        items:
          $ref: "#/definitions/HtmlHyperlink"
    description: "Result of extracting links from an HTML file"
    example:
      Links:
      - Anchortext: "Anchortext"
        Url: "Url"
      - Anchortext: "Anchortext"
        Url: "Url"
      Successful: true
  HtmlHyperlink:
    type: "object"
    properties:
      Anchortext:
        type: "string"
        description: "Anchor text of the hyperlink, e.g. Click Here"
      Url:
        type: "string"
        description: "URL of the hyperlink; fully-qualified if possible, otherwise\
          \ relative"
    description: "Individual hyperlink in an HTML File"
    example:
      Anchortext: "Anchortext"
      Url: "Url"
  PdfTextByPageResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      Pages:
        type: "array"
        description: "Pages in the PDF"
        items:
          $ref: "#/definitions/PdfPageText"
    description: "Text of the PDF, broken down by page"
    example:
      Pages:
      - PageNumber: 0
        PageText: "PageText"
      - PageNumber: 0
        PageText: "PageText"
      Successful: true
  PdfPageText:
    type: "object"
    properties:
      PageNumber:
        type: "integer"
        format: "int32"
        description: "Page number of the page (1-based)"
      PageText:
        type: "string"
        description: "Text of the page"
    description: "Text of a single page of a PDF"
    example:
      PageNumber: 0
      PageText: "PageText"
  PdfMetadata:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      Title:
        type: "string"
        description: "Title of the document"
      Keywords:
        type: "string"
        description: "Keywords of the document"
      Subject:
        type: "string"
        description: "Subject of the document"
      Author:
        type: "string"
        description: "User name of the creator/author of the document, if available,\
          \ null if not available"
      Creator:
        type: "string"
        description: "Creator of the document"
      DateModified:
        type: "string"
        format: "date-time"
        description: "The timestamp that the document was last modified, if available,\
          \ null if not available"
      DateCreated:
        type: "string"
        format: "date-time"
        description: "The timestamp that the document was created, if available, null\
          \ if not available"
      PageCount:
        type: "integer"
        format: "int32"
        description: "The number of pages in the document"
    description: "Result of an autodetect/get-info operation"
    example:
      Keywords: "Keywords"
      PageCount: 0
      Title: "Title"
      Author: "Author"
      DateCreated: "2000-01-23T04:56:07.000+00:00"
      Creator: "Creator"
      Successful: true
      Subject: "Subject"
      DateModified: "2000-01-23T04:56:07.000+00:00"
  SetPdfMetadataRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Input file contents bytes for the file to modify"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      MetadataToSet:
        description: "PDF metadata to set on the file"
        $ref: "#/definitions/PdfMetadata"
    description: "Request to set PDF metadata"
    example:
      InputFileBytes: "InputFileBytes"
      MetadataToSet:
        Keywords: "Keywords"
        PageCount: 0
        Title: "Title"
        Author: "Author"
        DateCreated: "2000-01-23T04:56:07.000+00:00"
        Creator: "Creator"
        Successful: true
        Subject: "Subject"
        DateModified: "2000-01-23T04:56:07.000+00:00"
  PdfFormFields:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      FormFields:
        type: "array"
        description: "Fields and field values found in the form"
        items:
          $ref: "#/definitions/PdfFormField"
    description: "Result of retrieving PDF form fields"
  PdfFormField:
    type: "object"
    properties:
      FieldName:
        type: "string"
        description: "Name of the form field"
      FieldType:
        type: "string"
        description: "The data type of the field; possible values are Text (FieldValue\
          \ will be a string), Checkbox (FieldValue can be \"true\" or \"false\"),\
          \ ComboBox (FieldComboBoxSelectedIndex will also be populated), Other"
      FieldValue:
        type: "string"
        description: "Value of the form field"
      FieldComboBoxSelectedIndex:
        type: "integer"
        format: "int32"
        description: "Applies to ComboBox field types only; specifies the selected\
          \ index of the combo box selection if available"
    description: "Field definition and value in the form"
  SetPdfFormFieldsRequest:
    type: "object"
    properties:
      FieldValues:
        type: "array"
        description: "Field values to set"
        items:
          $ref: "#/definitions/SetFormFieldValue"
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Contents of the input file to set the fields on"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "Request to set the fields in a PDF form"
    example:
      InputFileBytes: "InputFileBytes"
      FieldValues:
      - TextValue: "TextValue"
        ComboBoxSelectedIndex: 0
        CheckboxValue: true
        FieldName: "FieldName"
      - TextValue: "TextValue"
        ComboBoxSelectedIndex: 0
        CheckboxValue: true
        FieldName: "FieldName"
  SetFormFieldValue:
    type: "object"
    properties:
      FieldName:
        type: "string"
        description: "Name of the field to set; you can call /convert/edit/pdf/form/get-fields\
          \ to enumerate field names in a form"
      TextValue:
        type: "string"
        description: "For fields of type Text, the text value to put into the field"
      CheckboxValue:
        type: "boolean"
        description: "For fields of type Checkbox, the value to put into the field"
      ComboBoxSelectedIndex:
        type: "integer"
        format: "int32"
        description: "For fields of type ComboBox; specifies the selected index of\
          \ the combo box selection"
    description: "Individual field value to set in a PDF form"
    example:
      TextValue: "TextValue"
      ComboBoxSelectedIndex: 0
      CheckboxValue: true
      FieldName: "FieldName"
  GetPdfAnnotationsResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Annotations:
        type: "array"
        description: "Annotations in the PDF file, ordered by placement from start\
          \ to finish in the document"
        items:
          $ref: "#/definitions/PdfAnnotation"
    description: "Result of retrieving annotations from a PDF document"
  PdfAnnotation:
    type: "object"
    properties:
      Title:
        type: "string"
        description: "Title of the annotation; this is often the author of the annotation\
          \ in Acrobat-created PDF files"
      AnnotationType:
        type: "string"
        description: "Type of the annotation; possible values are Text"
      PageNumber:
        type: "integer"
        format: "int32"
        description: "The 1-based index of the page containing the annotation"
      AnnotationIndex:
        type: "integer"
        format: "int32"
        description: "The 0-based index of the annotation in the document"
      Subject:
        type: "string"
        description: "Subject of the annotation"
      TextContents:
        type: "string"
        description: "Text contents of the annotation"
      CreationDate:
        type: "string"
        format: "date-time"
        description: "Date that the annotation was created"
      ModifiedDate:
        type: "string"
        format: "date-time"
        description: "Date that the annotation was last modified"
      LeftX:
        type: "number"
        format: "double"
        description: "Left X coordinate for the location of the annotation"
      TopY:
        type: "number"
        format: "double"
        description: "Top Y coordination of the location of the annotation"
      Width:
        type: "number"
        format: "double"
        description: "Width of the annotation"
      Height:
        type: "number"
        format: "double"
        description: "Height of the annotation"
    description: "PDF Annotation details"
    example:
      CreationDate: "2000-01-23T04:56:07.000+00:00"
      TopY: 5.962133916683182
      PageNumber: 0
      Title: "Title"
      AnnotationIndex: 6
      TextContents: "TextContents"
      Height: 2.3021358869347655
      ModifiedDate: "2000-01-23T04:56:07.000+00:00"
      Width: 5.637376656633329
      AnnotationType: "AnnotationType"
      Subject: "Subject"
      LeftX: 1.4658129805029452
  AddPdfAnnotationRequest:
    type: "object"
    properties:
      InputFileBytes:
        type: "string"
        format: "byte"
        description: "Input file contents bytes for the file to modify"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      AnnotationsToAdd:
        type: "array"
        description: "Annotations to add to the PDF file"
        items:
          $ref: "#/definitions/PdfAnnotation"
    description: "Request to add annotations to a PDF"
    example:
      InputFileBytes: "InputFileBytes"
      AnnotationsToAdd:
      - CreationDate: "2000-01-23T04:56:07.000+00:00"
        TopY: 5.962133916683182
        PageNumber: 0
        Title: "Title"
        AnnotationIndex: 6
        TextContents: "TextContents"
        Height: 2.3021358869347655
        ModifiedDate: "2000-01-23T04:56:07.000+00:00"
        Width: 5.637376656633329
        AnnotationType: "AnnotationType"
        Subject: "Subject"
        LeftX: 1.4658129805029452
      - CreationDate: "2000-01-23T04:56:07.000+00:00"
        TopY: 5.962133916683182
        PageNumber: 0
        Title: "Title"
        AnnotationIndex: 6
        TextContents: "TextContents"
        Height: 2.3021358869347655
        ModifiedDate: "2000-01-23T04:56:07.000+00:00"
        Width: 5.637376656633329
        AnnotationType: "AnnotationType"
        Subject: "Subject"
        LeftX: 1.4658129805029452
  Base64DetectRequest:
    type: "object"
    properties:
      Base64ContentToDetect:
        type: "string"
        description: "Input content text to detect if it is base 64 encoded"
    description: "Request to detect if input content is base 64 encoded"
    example:
      Base64ContentToDetect: "Base64ContentToDetect"
  Base64DetectResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      IsBase64Encoded:
        type: "boolean"
        description: "True if the input string is base 64 encoded, false otherwise"
    description: "Result of base 64 detection"
    example:
      IsBase64Encoded: true
      Successful: true
  Base64EncodeRequest:
    type: "object"
    properties:
      ContentToEncode:
        type: "string"
        format: "byte"
        description: "Input content to encode into Base 64"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "Request to encode content to Base 64"
    example:
      ContentToEncode: "ContentToEncode"
  Base64EncodeResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Base64TextContentResult:
        type: "string"
        description: "Result of performing a base 64 encoding operation, a text string\
          \ representing the encoded original file content"
    description: "Result of base 64 encoding"
    example:
      Base64TextContentResult: "Base64TextContentResult"
      Successful: true
  Base64DecodeRequest:
    type: "object"
    properties:
      Base64ContentToDecode:
        type: "string"
        description: "Input content to decode from Base 64 into binary"
    description: "Request to decode content from Base 64 into binary"
    example:
      Base64ContentToDecode: "Base64ContentToDecode"
  Base64DecodeResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      ContentResult:
        type: "string"
        format: "byte"
        description: "Result of performing a base 64 decode operation, binary file\
          \ content"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "Result of base 64 decoding"
    example:
      ContentResult: "ContentResult"
      Successful: true
  TextEncodingDetectResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      TextEncoding:
        type: "string"
        description: "Text encoding used in file; possible values are ASCII, UTF7,\
          \ UTF8, UTF16, BigEndianUnicode and UTF32"
    description: "Result of detecting text encoding"
    example:
      Successful: true
      TextEncoding: "TextEncoding"
  FindStringSimpleRequest:
    type: "object"
    properties:
      TextContent:
        type: "string"
        description: "Input text content"
      TargetString:
        type: "string"
        description: "Target input string to find"
    description: "Request to find a string in a string"
    example:
      TargetString: "TargetString"
      TextContent: "TextContent"
  FindStringSimpleResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Matches:
        type: "array"
        description: "Found matches"
        items:
          $ref: "#/definitions/FindStringMatch"
      MatchCount:
        type: "integer"
        format: "int32"
        description: "The number of matches"
    description: "Result of finding a string"
    example:
      Matches:
      - ContainingLine: "ContainingLine"
        CharacterOffsetStart: 0
        CharacterOffsetEnd: 6
      - ContainingLine: "ContainingLine"
        CharacterOffsetStart: 0
        CharacterOffsetEnd: 6
      MatchCount: 1
      Successful: true
  FindStringMatch:
    type: "object"
    properties:
      CharacterOffsetStart:
        type: "integer"
        format: "int32"
        description: "0-based index of the start of the match"
      CharacterOffsetEnd:
        type: "integer"
        format: "int32"
        description: "0-based index of the end of the match"
      ContainingLine:
        type: "string"
        description: "Text content of the line containing the match"
    description: "Individual match result of finding a target string in a longer text\
      \ string"
    example:
      ContainingLine: "ContainingLine"
      CharacterOffsetStart: 0
      CharacterOffsetEnd: 6
  FindStringRegexRequest:
    type: "object"
    properties:
      TextContent:
        type: "string"
        description: "Input text content"
      TargetRegex:
        type: "string"
        description: "Target input regular expression (regex) to find"
      MatchCase:
        type: "boolean"
        description: "Set to True to match case, False to ignore case"
    description: "Request to find a string in a string"
    example:
      MatchCase: true
      TextContent: "TextContent"
      TargetRegex: "TargetRegex"
  FindStringRegexResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      Matches:
        type: "array"
        description: "Regular expression matches"
        items:
          $ref: "#/definitions/FindRegexMatch"
      MatchCount:
        type: "integer"
        format: "int32"
        description: "The number of matches"
    description: "Result of finding a string"
    example:
      Matches:
      - MatchGroups:
        - "MatchGroups"
        - "MatchGroups"
        ContainingLine: "ContainingLine"
        MatchValue: "MatchValue"
        CharacterOffsetStart: 0
        CharacterOffsetEnd: 6
      - MatchGroups:
        - "MatchGroups"
        - "MatchGroups"
        ContainingLine: "ContainingLine"
        MatchValue: "MatchValue"
        CharacterOffsetStart: 0
        CharacterOffsetEnd: 6
      MatchCount: 1
      Successful: true
  FindRegexMatch:
    type: "object"
    properties:
      CharacterOffsetStart:
        type: "integer"
        format: "int32"
        description: "0-based index of the start of the match"
      CharacterOffsetEnd:
        type: "integer"
        format: "int32"
        description: "0-based index of the end of the match"
      ContainingLine:
        type: "string"
        description: "Text content of the line containing the match"
      MatchValue:
        type: "string"
        description: "The match value"
      MatchGroups:
        type: "array"
        description: "Regular expression regex match groups; these correspond to the\
          \ match values"
        items:
          type: "string"
    description: "Individual regular expression match result of finding a target regex\
      \ in a longer text string"
    example:
      MatchGroups:
      - "MatchGroups"
      - "MatchGroups"
      ContainingLine: "ContainingLine"
      MatchValue: "MatchValue"
      CharacterOffsetStart: 0
      CharacterOffsetEnd: 6
  ReplaceStringSimpleRequest:
    type: "object"
    properties:
      TextContent:
        type: "string"
        description: "Input text content"
      TargetString:
        type: "string"
        description: "Target input string to match and be replaced"
      ReplaceWithString:
        type: "string"
        description: "Replacement for target string"
    description: "Request to replace a string in a string"
    example:
      TargetString: "TargetString"
      ReplaceWithString: "ReplaceWithString"
      TextContent: "TextContent"
  ReplaceStringSimpleResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      TextContentResult:
        type: "string"
        description: "Result of performing a replace string operation"
    description: "Result of replacing a string"
    example:
      Successful: true
      TextContentResult: "TextContentResult"
  ReplaceStringRegexRequest:
    type: "object"
    properties:
      TextContent:
        type: "string"
        description: "Input text content"
      RegularExpressionString:
        type: "string"
        description: "Target input regular expression (regex) string to match and\
          \ be replaced; supports all regular expression values"
      ReplaceWithString:
        type: "string"
        description: "Replacement for target string; supports referencing indexed\
          \ regex matched values from RegularExpressionString, such as $1, $2, and\
          \ so on"
    description: "Request to replace a regex string in a string"
    example:
      ReplaceWithString: "ReplaceWithString"
      RegularExpressionString: "RegularExpressionString"
      TextContent: "TextContent"
  ReplaceStringRegexResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      TextContentResult:
        type: "string"
        description: "Result of performing a base 64 decode operation, binary file\
          \ content"
    description: "Result of replacing a regex string"
    example:
      Successful: true
      TextContentResult: "TextContentResult"
  DetectLineEndingsResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      PrimaryNewlineType:
        type: "string"
        description: "Type of newline in the file; possible vlaues are \"Mac\" (legacy\
          \ Mac OS uses carriage return only); \"Unix\" (Unix and Linux OSes, and\
          \ modern Mac OS); \"Windows\" (Windows operating systems)"
      PrimaryNewlineTerminator:
        type: "string"
        description: "Characters used to terminate a newline; can be carriage return,\
          \ linefeed, or carriage return + linefeed"
      InputLength:
        type: "integer"
        format: "int32"
        description: "Length of the input string in characters"
    description: "Result of base 64 decoding"
    example:
      PrimaryNewlineTerminator: "PrimaryNewlineTerminator"
      InputLength: 0
      PrimaryNewlineType: "PrimaryNewlineType"
      Successful: true
  ChangeLineEndingResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      TextContentResult:
        type: "string"
        description: "Text content result"
    description: "Result of performing a change line ending operation"
    example:
      Successful: true
      TextContentResult: "TextContentResult"
  RemoveHtmlFromTextRequest:
    type: "object"
    properties:
      TextContainingHtml:
        type: "string"
        description: "Input text string to remove the HTML from"
    description: "Request to remove HTML from a string"
    example:
      TextContainingHtml: "TextContainingHtml"
  RemoveHtmlFromTextResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      TextContentResult:
        type: "string"
        description: "Result of performing a remove HTML from string operation"
    description: "Result of removing HTML from a string"
    example:
      Successful: true
      TextContentResult: "TextContentResult"
  RemoveWhitespaceFromTextRequest:
    type: "object"
    properties:
      TextContainingWhitespace:
        type: "string"
        description: "Input text string to remove the whitespace from"
    description: "Request to remove whitespace from a string"
    example:
      TextContainingWhitespace: "TextContainingWhitespace"
  RemoveWhitespaceFromTextResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if successful, false otherwise"
      TextContentResult:
        type: "string"
        description: "Result of performing a remove whitespace from string operation"
    description: "Result of removing whitespace from a string"
    example:
      Successful: true
      TextContentResult: "TextContentResult"
  SplitDocxDocumentResult:
    type: "object"
    properties:
      ResultDocuments:
        type: "array"
        items:
          $ref: "#/definitions/SplitDocumentResult"
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
    description: "The result of splitting a Word document into individual Word DOCX\
      \ pages"
    example:
      ResultDocuments:
      - DocumentContents: "DocumentContents"
        PageNumber: 0
        URL: "URL"
      - DocumentContents: "DocumentContents"
        PageNumber: 0
        URL: "URL"
      Successful: true
  SplitDocumentResult:
    type: "object"
    properties:
      PageNumber:
        type: "integer"
        format: "int32"
        description: "Page number of the converted page, starting with 1 for the first\
          \ page"
      URL:
        type: "string"
        description: "URL to the DOCX file of this slide; file is stored in an in-memory\
          \ cache and will be deleted"
      DocumentContents:
        type: "string"
        format: "byte"
        description: "Contents of the document in bytes"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "A single Word DOCX file corresponding to one page in the original\
      \ document"
    example:
      DocumentContents: "DocumentContents"
      PageNumber: 0
      URL: "URL"
  SplitXlsxWorksheetResult:
    type: "object"
    properties:
      ResultWorksheets:
        type: "array"
        items:
          $ref: "#/definitions/WorksheetResult"
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
    description: "The result of splitting a spreadsheet into individual Excel XLSX\
      \ worksheets"
    example:
      ResultWorksheets:
      - WorksheetContents: "WorksheetContents"
        WorksheetNumber: 0
        URL: "URL"
        WorksheetName: "WorksheetName"
      - WorksheetContents: "WorksheetContents"
        WorksheetNumber: 0
        URL: "URL"
        WorksheetName: "WorksheetName"
      Successful: true
  WorksheetResult:
    type: "object"
    properties:
      WorksheetNumber:
        type: "integer"
        format: "int32"
        description: "Worksheet number of the converted page, starting with 1 for\
          \ the left-most worksheet"
      WorksheetName:
        type: "string"
        description: "The name of the worksheet"
      URL:
        type: "string"
        description: "URL to the XLSX file of this worksheet; file is stored in an\
          \ in-memory cache and will be deleted"
      WorksheetContents:
        type: "string"
        format: "byte"
        description: "Contents of the worksheet in bytes"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "A single Excel XLSX file corresponding to one worksheet (tab) in\
      \ the original spreadsheet"
    example:
      WorksheetContents: "WorksheetContents"
      WorksheetNumber: 0
      URL: "URL"
      WorksheetName: "WorksheetName"
  SplitPptxPresentationResult:
    type: "object"
    properties:
      ResultPresentations:
        type: "array"
        items:
          $ref: "#/definitions/PresentationResult"
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
    description: "The result of splitting a presentation into individual PowerPoint\
      \ PPTX slides"
    example:
      ResultPresentations:
      - SlideNumber: 0
        PresentationContents: "PresentationContents"
        URL: "URL"
      - SlideNumber: 0
        PresentationContents: "PresentationContents"
        URL: "URL"
      Successful: true
  PresentationResult:
    type: "object"
    properties:
      SlideNumber:
        type: "integer"
        format: "int32"
        description: "Worksheet number of the converted page, starting with 1 for\
          \ the left-most worksheet"
      URL:
        type: "string"
        description: "URL to the PPTX file of this slide; file is stored in an in-memory\
          \ cache and will be deleted"
      PresentationContents:
        type: "string"
        format: "byte"
        description: "Contents of the presentation in bytes"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "A single Excel XLSX file corresponding to one worksheet (tab) in\
      \ the original spreadsheet"
    example:
      SlideNumber: 0
      PresentationContents: "PresentationContents"
      URL: "URL"
  SplitPdfResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      Documents:
        type: "array"
        description: "PDF documents as output"
        items:
          $ref: "#/definitions/PdfDocument"
    description: "Result of performing a PDF file split operation"
    example:
      Documents:
      - DocumentContents: "DocumentContents"
        PageNumber: 0
        URL: "URL"
      - DocumentContents: "DocumentContents"
        PageNumber: 0
        URL: "URL"
      Successful: true
  PdfDocument:
    type: "object"
    properties:
      PageNumber:
        type: "integer"
        format: "int32"
        description: "Page number of the converted page, starting with 1 for the first\
          \ page"
      URL:
        type: "string"
        description: "URL to the PDF file of this worksheet; file is stored in an\
          \ in-memory cache and will be deleted"
      DocumentContents:
        type: "string"
        format: "byte"
        description: "If returnDocumentContents is set to true, will contain the contents\
          \ of the document; otherwise will be set to null and the document contents\
          \ will be available via the URL parameter"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "A single PDF file corresponding to one page in the original document"
    example:
      DocumentContents: "DocumentContents"
      PageNumber: 0
      URL: "URL"
  SplitTextDocumentByLinesResult:
    type: "object"
    properties:
      ResultLines:
        type: "array"
        items:
          $ref: "#/definitions/TextDocumentLine"
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      LineCount:
        type: "integer"
        format: "int32"
        description: "The count of lines in the text file"
    description: "The result of splitting a Text document into separate lines"
    example:
      ResultLines:
      - LineContents: "LineContents"
        LineNumber: 0
      - LineContents: "LineContents"
        LineNumber: 0
      LineCount: 6
      Successful: true
  TextDocumentLine:
    type: "object"
    properties:
      LineNumber:
        type: "integer"
        format: "int32"
        description: "The 1-based line index of the line"
      LineContents:
        type: "string"
        description: "The text contents of a single line of a text file"
    description: "A single line of a Text document"
    example:
      LineContents: "LineContents"
      LineNumber: 0
  SplitTextDocumentByStringResult:
    type: "object"
    properties:
      ResultElements:
        type: "array"
        items:
          $ref: "#/definitions/TextDocumentElement"
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ElementCount:
        type: "integer"
        format: "int32"
        description: "The count of elements in the text file"
    description: "The result of splitting a Text document into separate elements"
    example:
      ElementCount: 6
      ResultElements:
      - ElementNumber: 0
        ElementContents: "ElementContents"
      - ElementNumber: 0
        ElementContents: "ElementContents"
      Successful: true
  TextDocumentElement:
    type: "object"
    properties:
      ElementNumber:
        type: "integer"
        format: "int32"
        description: "The 1-based line index of the element"
      ElementContents:
        type: "string"
        description: "The text contents of a single element of a text file"
    description: "A single element of a Text document"
    example:
      ElementNumber: 0
      ElementContents: "ElementContents"
  AutodetectDocumentValidationResult:
    type: "object"
    properties:
      FileFormatExtension:
        type: "string"
      DocumentIsValid:
        type: "boolean"
        description: "True if the document is valid and has no errors, false otherwise"
      ErrorCount:
        type: "integer"
        format: "int32"
        description: "Number of validation errors found in the document"
      WarningCount:
        type: "integer"
        format: "int32"
        description: "Number of validation warnings found in the document"
      ErrorsAndWarnings:
        type: "array"
        description: "Details of errors and warnings found"
        items:
          $ref: "#/definitions/DocumentValidationError"
    description: "Document validation result"
    example:
      WarningCount: 6
      DocumentIsValid: true
      FileFormatExtension: "FileFormatExtension"
      ErrorsAndWarnings:
      - Path: "Path"
        Description: "Description"
        IsError: true
        Uri: "Uri"
      - Path: "Path"
        Description: "Description"
        IsError: true
        Uri: "Uri"
      ErrorCount: 0
  DocumentValidationError:
    type: "object"
    properties:
      Description:
        type: "string"
        description: "Description of the error"
      Path:
        type: "string"
        description: "XPath to the error"
      Uri:
        type: "string"
        description: "URI of the part in question"
      IsError:
        type: "boolean"
        description: "True if this is an error, false otherwise"
    description: "Validation error found in document"
    example:
      Path: "Path"
      Description: "Description"
      IsError: true
      Uri: "Uri"
  DocumentValidationResult:
    type: "object"
    properties:
      DocumentIsValid:
        type: "boolean"
        description: "True if the document is valid and has no errors, false otherwise"
      PasswordProtected:
        type: "boolean"
        description: "True if the document is password protected, false otherwise"
      ErrorCount:
        type: "integer"
        format: "int32"
        description: "Number of validation errors found in the document"
      WarningCount:
        type: "integer"
        format: "int32"
        description: "Number of validation warnings found in the document"
      ErrorsAndWarnings:
        type: "array"
        description: "Details of errors and warnings found"
        items:
          $ref: "#/definitions/DocumentValidationError"
    description: "Document validation result"
    example:
      WarningCount: 6
      DocumentIsValid: true
      ErrorsAndWarnings:
      - Path: "Path"
        Description: "Description"
        IsError: true
        Uri: "Uri"
      - Path: "Path"
        Description: "Description"
        IsError: true
        Uri: "Uri"
      PasswordProtected: true
      ErrorCount: 0
  XxeThreatDetectionResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      ContainsXxeThreat:
        type: "boolean"
        description: "True if the XML input contains XXE threats, false otherwise"
    description: "Result of performing an XXE threat detection operation"
    example:
      Successful: true
      ContainsXxeThreat: true
  HtmlSsrfThreatCheckResult:
    type: "object"
    properties:
      IsValid:
        type: "boolean"
        description: "True if the document is valid and has no errors, false otherwise"
      IsThreat:
        type: "boolean"
        description: "True if the document contains an SSRF threat, false otherwise"
      ThreatLinks:
        type: "array"
        description: "Links found in the input HTML that contains threats"
        items:
          $ref: "#/definitions/HtmlThreatLink"
    description: "HTML SSRF validation result"
    example:
      ThreatLinks:
      - LinkUrl: "LinkUrl"
        ThreatLevel: "ThreatLevel"
      - LinkUrl: "LinkUrl"
        ThreatLevel: "ThreatLevel"
      IsThreat: true
      IsValid: true
  HtmlThreatLink:
    type: "object"
    properties:
      LinkUrl:
        type: "string"
        description: "URL of the link"
      ThreatLevel:
        type: "string"
        description: "Threat assessment level; possible values are None, Low, Medium\
          \ and High"
    description: "Threat assessment for a hyperlink URL"
    example:
      LinkUrl: "LinkUrl"
      ThreatLevel: "ThreatLevel"
  ViewerResponse:
    type: "object"
    properties:
      HtmlEmbed:
        type: "string"
      Successful:
        type: "boolean"
    description: "Result of creating a viewer"
    example:
      HtmlEmbed: "HtmlEmbed"
      Successful: true
  CreateZipArchiveRequest:
    type: "object"
    properties:
      FilesInZip:
        type: "array"
        description: "Top-level files in the root directory fo the zip file"
        items:
          $ref: "#/definitions/ZipFile"
      DirectoriesInZip:
        type: "array"
        description: "Top-level directories in the root directory of the zip; directories\
          \ can contain sub-directories and files"
        items:
          $ref: "#/definitions/ZipDirectory"
    description: "Request to create a Zip Archive"
    example:
      FilesInZip:
      - FileContents: "FileContents"
        FileName: "FileName"
      - FileContents: "FileContents"
        FileName: "FileName"
      DirectoriesInZip:
      - FilesInDirectory:
        - FileContents: "FileContents"
          FileName: "FileName"
        - FileContents: "FileContents"
          FileName: "FileName"
        DirectoryName: "DirectoryName"
        DirectoriesInDirectory:
        - null
        - null
      - FilesInDirectory:
        - FileContents: "FileContents"
          FileName: "FileName"
        - FileContents: "FileContents"
          FileName: "FileName"
        DirectoryName: "DirectoryName"
        DirectoriesInDirectory:
        - null
        - null
  ZipFile:
    type: "object"
    properties:
      FileName:
        type: "string"
        description: "Name of this file"
      FileContents:
        type: "string"
        format: "byte"
        description: "Contents of this file"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "Representation of a file in a zip file"
    example:
      FileContents: "FileContents"
      FileName: "FileName"
  ZipDirectory:
    type: "object"
    properties:
      DirectoryName:
        type: "string"
        description: "Name of this directory"
      DirectoriesInDirectory:
        type: "array"
        description: "Child directories contained directly in this directory"
        items:
          $ref: "#/definitions/ZipDirectory"
      FilesInDirectory:
        type: "array"
        description: "Child files contained directly in this directory"
        items:
          $ref: "#/definitions/ZipFile"
    description: "Representation of a directory in a zip file"
    example:
      FilesInDirectory:
      - FileContents: "FileContents"
        FileName: "FileName"
      - FileContents: "FileContents"
        FileName: "FileName"
      DirectoryName: "DirectoryName"
      DirectoriesInDirectory:
      - null
      - null
  ZipExtractResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      FilesInZip:
        type: "array"
        description: "Top-level files in the root directory fo the zip file"
        items:
          $ref: "#/definitions/ZipFile"
      DirectoriesInZip:
        type: "array"
        description: "Top-level directories in the root directory of the zip; directories\
          \ can contain sub-directories and files"
        items:
          $ref: "#/definitions/ZipDirectory"
    description: "Result of performing a zip extract operation"
    example:
      FilesInZip:
      - FileContents: "FileContents"
        FileName: "FileName"
      - FileContents: "FileContents"
        FileName: "FileName"
      Successful: true
      DirectoriesInZip:
      - FilesInDirectory:
        - FileContents: "FileContents"
          FileName: "FileName"
        - FileContents: "FileContents"
          FileName: "FileName"
        DirectoryName: "DirectoryName"
        DirectoriesInDirectory:
        - null
        - null
      - FilesInDirectory:
        - FileContents: "FileContents"
          FileName: "FileName"
        - FileContents: "FileContents"
          FileName: "FileName"
        DirectoryName: "DirectoryName"
        DirectoriesInDirectory:
        - null
        - null
  ZipEncryptionAdvancedRequest:
    type: "object"
    properties:
      InputFileContents:
        type: "string"
        format: "byte"
        description: "Input Zip File archive contents in bytes"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      Password:
        type: "string"
        description: "Password to place on the Zip file; the longer the password,\
          \ the more secure"
      EncryptionAlgorithm:
        type: "string"
        description: "Encryption algorithm to use; possible values are AES-256 (recommended),\
          \ AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm).\
          \  Default is AES-256."
    description: "Request to encrypt an existing Zip Archive file and protect it with\
      \ a password"
    example:
      EncryptionAlgorithm: "EncryptionAlgorithm"
      InputFileContents: "InputFileContents"
      Password: "Password"
