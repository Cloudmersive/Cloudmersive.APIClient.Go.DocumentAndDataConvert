/*
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package GoCloudmersiveDocumentConvertApiClient

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ context.Context
)

type MergeDocumentApiService service

/* 
MergeDocumentApiService Merge Two Word DOCX Together
Combine two Office Word Documents (docx) into one single Office Word document
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied).

@return string
*/
func (a *MergeDocumentApiService) MergeDocumentDocx(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/docx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Multple Word DOCX Together
Combine multiple Office Word Documents (docx) into one single Office Word document
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on.
 * @param optional nil or *MergeDocumentDocxMultiOpts - Optional Parameters:
     * @param "InputFile3" (optional.Interface of *os.File) -  Third input file to perform the operation on.
     * @param "InputFile4" (optional.Interface of *os.File) -  Fourth input file to perform the operation on.
     * @param "InputFile5" (optional.Interface of *os.File) -  Fifth input file to perform the operation on.
     * @param "InputFile6" (optional.Interface of *os.File) -  Sixth input file to perform the operation on.
     * @param "InputFile7" (optional.Interface of *os.File) -  Seventh input file to perform the operation on.
     * @param "InputFile8" (optional.Interface of *os.File) -  Eighth input file to perform the operation on.
     * @param "InputFile9" (optional.Interface of *os.File) -  Ninth input file to perform the operation on.
     * @param "InputFile10" (optional.Interface of *os.File) -  Tenth input file to perform the operation on.

@return string
*/

type MergeDocumentDocxMultiOpts struct { 
	InputFile3 optional.Interface
	InputFile4 optional.Interface
	InputFile5 optional.Interface
	InputFile6 optional.Interface
	InputFile7 optional.Interface
	InputFile8 optional.Interface
	InputFile9 optional.Interface
	InputFile10 optional.Interface
}

func (a *MergeDocumentApiService) MergeDocumentDocxMulti(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File, localVarOptionals *MergeDocumentDocxMultiOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/docx/multi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile3.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile3.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile3 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile4.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile4.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile4 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile5.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile5.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile5 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile6.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile6.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile6 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile7.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile7.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile7 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile8.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile8.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile8 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile9.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile9.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile9 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile10.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile10.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile10 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Two PDF Files Together
Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied).

@return string
*/
func (a *MergeDocumentApiService) MergeDocumentPdf(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/pdf"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Multple PDF Files Together
Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on.
 * @param optional nil or *MergeDocumentPdfMultiOpts - Optional Parameters:
     * @param "InputFile3" (optional.Interface of *os.File) -  Third input file to perform the operation on.
     * @param "InputFile4" (optional.Interface of *os.File) -  Fourth input file to perform the operation on.
     * @param "InputFile5" (optional.Interface of *os.File) -  Fifth input file to perform the operation on.
     * @param "InputFile6" (optional.Interface of *os.File) -  Sixth input file to perform the operation on.
     * @param "InputFile7" (optional.Interface of *os.File) -  Seventh input file to perform the operation on.
     * @param "InputFile8" (optional.Interface of *os.File) -  Eighth input file to perform the operation on.
     * @param "InputFile9" (optional.Interface of *os.File) -  Ninth input file to perform the operation on.
     * @param "InputFile10" (optional.Interface of *os.File) -  Tenth input file to perform the operation on.

@return string
*/

type MergeDocumentPdfMultiOpts struct { 
	InputFile3 optional.Interface
	InputFile4 optional.Interface
	InputFile5 optional.Interface
	InputFile6 optional.Interface
	InputFile7 optional.Interface
	InputFile8 optional.Interface
	InputFile9 optional.Interface
	InputFile10 optional.Interface
}

func (a *MergeDocumentApiService) MergeDocumentPdfMulti(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File, localVarOptionals *MergeDocumentPdfMultiOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/pdf/multi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile3.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile3.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile3 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile4.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile4.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile4 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile5.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile5.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile5 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile6.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile6.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile6 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile7.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile7.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile7 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile8.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile8.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile8 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile9.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile9.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile9 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile10.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile10.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile10 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Two PNG Files Together
Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied).

@return string
*/
func (a *MergeDocumentApiService) MergeDocumentPng(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/png/vertical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Multple PNG Files Together
Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on.
 * @param optional nil or *MergeDocumentPngMultiOpts - Optional Parameters:
     * @param "InputFile3" (optional.Interface of *os.File) -  Third input file to perform the operation on.
     * @param "InputFile4" (optional.Interface of *os.File) -  Fourth input file to perform the operation on.
     * @param "InputFile5" (optional.Interface of *os.File) -  Fifth input file to perform the operation on.
     * @param "InputFile6" (optional.Interface of *os.File) -  Sixth input file to perform the operation on.
     * @param "InputFile7" (optional.Interface of *os.File) -  Seventh input file to perform the operation on.
     * @param "InputFile8" (optional.Interface of *os.File) -  Eighth input file to perform the operation on.
     * @param "InputFile9" (optional.Interface of *os.File) -  Ninth input file to perform the operation on.
     * @param "InputFile10" (optional.Interface of *os.File) -  Tenth input file to perform the operation on.

@return string
*/

type MergeDocumentPngMultiOpts struct { 
	InputFile3 optional.Interface
	InputFile4 optional.Interface
	InputFile5 optional.Interface
	InputFile6 optional.Interface
	InputFile7 optional.Interface
	InputFile8 optional.Interface
	InputFile9 optional.Interface
	InputFile10 optional.Interface
}

func (a *MergeDocumentApiService) MergeDocumentPngMulti(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File, localVarOptionals *MergeDocumentPngMultiOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/png/vertical/multi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile3.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile3.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile3 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile4.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile4.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile4 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile5.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile5.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile5 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile6.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile6.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile6 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile7.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile7.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile7 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile8.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile8.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile8 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile9.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile9.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile9 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile10.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile10.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile10 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Two PowerPoint PPTX Together
Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied).

@return string
*/
func (a *MergeDocumentApiService) MergeDocumentPptx(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/pptx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Multple PowerPoint PPTX Together
Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on.
 * @param optional nil or *MergeDocumentPptxMultiOpts - Optional Parameters:
     * @param "InputFile3" (optional.Interface of *os.File) -  Third input file to perform the operation on.
     * @param "InputFile4" (optional.Interface of *os.File) -  Fourth input file to perform the operation on.
     * @param "InputFile5" (optional.Interface of *os.File) -  Fifth input file to perform the operation on.
     * @param "InputFile6" (optional.Interface of *os.File) -  Sixth input file to perform the operation on.
     * @param "InputFile7" (optional.Interface of *os.File) -  Seventh input file to perform the operation on.
     * @param "InputFile8" (optional.Interface of *os.File) -  Eighth input file to perform the operation on.
     * @param "InputFile9" (optional.Interface of *os.File) -  Ninth input file to perform the operation on.
     * @param "InputFile10" (optional.Interface of *os.File) -  Tenth input file to perform the operation on.

@return string
*/

type MergeDocumentPptxMultiOpts struct { 
	InputFile3 optional.Interface
	InputFile4 optional.Interface
	InputFile5 optional.Interface
	InputFile6 optional.Interface
	InputFile7 optional.Interface
	InputFile8 optional.Interface
	InputFile9 optional.Interface
	InputFile10 optional.Interface
}

func (a *MergeDocumentApiService) MergeDocumentPptxMulti(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File, localVarOptionals *MergeDocumentPptxMultiOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/pptx/multi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile3.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile3.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile3 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile4.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile4.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile4 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile5.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile5.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile5 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile6.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile6.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile6 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile7.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile7.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile7 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile8.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile8.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile8 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile9.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile9.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile9 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile10.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile10.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile10 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Two Text (TXT) Files Together
Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied).

@return interface{}
*/
func (a *MergeDocumentApiService) MergeDocumentTxt(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/txt"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Multple Text (TXT) Files Together
Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on.
 * @param optional nil or *MergeDocumentTxtMultiOpts - Optional Parameters:
     * @param "InputFile3" (optional.Interface of *os.File) -  Third input file to perform the operation on.
     * @param "InputFile4" (optional.Interface of *os.File) -  Fourth input file to perform the operation on.
     * @param "InputFile5" (optional.Interface of *os.File) -  Fifth input file to perform the operation on.
     * @param "InputFile6" (optional.Interface of *os.File) -  Sixth input file to perform the operation on.
     * @param "InputFile7" (optional.Interface of *os.File) -  Seventh input file to perform the operation on.
     * @param "InputFile8" (optional.Interface of *os.File) -  Eighth input file to perform the operation on.
     * @param "InputFile9" (optional.Interface of *os.File) -  Ninth input file to perform the operation on.
     * @param "InputFile10" (optional.Interface of *os.File) -  Tenth input file to perform the operation on.

@return string
*/

type MergeDocumentTxtMultiOpts struct { 
	InputFile3 optional.Interface
	InputFile4 optional.Interface
	InputFile5 optional.Interface
	InputFile6 optional.Interface
	InputFile7 optional.Interface
	InputFile8 optional.Interface
	InputFile9 optional.Interface
	InputFile10 optional.Interface
}

func (a *MergeDocumentApiService) MergeDocumentTxtMulti(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File, localVarOptionals *MergeDocumentTxtMultiOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/txt/multi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile3.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile3.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile3 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile4.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile4.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile4 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile5.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile5.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile5 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile6.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile6.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile6 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile7.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile7.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile7 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile8.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile8.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile8 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile9.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile9.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile9 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile10.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile10.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile10 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Two Excel XLSX Together
Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on (more than 2 can be supplied).

@return string
*/
func (a *MergeDocumentApiService) MergeDocumentXlsx(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/xlsx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
MergeDocumentApiService Merge Multple Excel XLSX Together
Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param inputFile1 First input file to perform the operation on.
 * @param inputFile2 Second input file to perform the operation on.
 * @param optional nil or *MergeDocumentXlsxMultiOpts - Optional Parameters:
     * @param "InputFile3" (optional.Interface of *os.File) -  Third input file to perform the operation on.
     * @param "InputFile4" (optional.Interface of *os.File) -  Fourth input file to perform the operation on.
     * @param "InputFile5" (optional.Interface of *os.File) -  Fifth input file to perform the operation on.
     * @param "InputFile6" (optional.Interface of *os.File) -  Sixth input file to perform the operation on.
     * @param "InputFile7" (optional.Interface of *os.File) -  Seventh input file to perform the operation on.
     * @param "InputFile8" (optional.Interface of *os.File) -  Eighth input file to perform the operation on.
     * @param "InputFile9" (optional.Interface of *os.File) -  Ninth input file to perform the operation on.
     * @param "InputFile10" (optional.Interface of *os.File) -  Tenth input file to perform the operation on.

@return string
*/

type MergeDocumentXlsxMultiOpts struct { 
	InputFile3 optional.Interface
	InputFile4 optional.Interface
	InputFile5 optional.Interface
	InputFile6 optional.Interface
	InputFile7 optional.Interface
	InputFile8 optional.Interface
	InputFile9 optional.Interface
	InputFile10 optional.Interface
}

func (a *MergeDocumentApiService) MergeDocumentXlsxMulti(ctx context.Context, inputFile1 *os.File, inputFile2 *os.File, localVarOptionals *MergeDocumentXlsxMultiOpts) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/convert/merge/xlsx/multi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile3.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile3.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile3 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile4.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile4.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile4 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile5.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile5.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile5 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile6.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile6.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile6 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile7.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile7.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile7 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile8.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile8.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile8 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile9.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile9.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile9 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.InputFile10.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.InputFile10.Value().(*os.File)
		if !localVarFileOk {
				return localVarReturnValue, nil, reportError("inputFile10 should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Apikey"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
